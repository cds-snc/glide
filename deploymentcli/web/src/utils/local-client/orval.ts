/**
 * Generated by orval v6.10.3 üç∫
 * Do not edit manually.
 * Example API
 * Example API
 * OpenAPI spec version: 1.0
 */
import useSwr from 'swr'
import type {
  SWRConfiguration,
  Key
} from 'swr'
import {
  rest
} from 'msw'
import { customInstanceLocal } from '../custom-instance'
import type { ErrorType } from '../custom-instance'
export type ErrorResponseResponse = {
  error?: string;
};




  
  // eslint-disable-next-line
  type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary Your GET endpoint
 */
export const getSecret = (
    
 options?: SecondParameter<typeof customInstanceLocal>) => {
      return customInstanceLocal<void>(
      {url: `/api/v1/secrets`, method: 'get'
    },
      options);
    }
  

export const getGetSecretKey = () => [`/api/v1/secrets`];

    
export type GetSecretQueryResult = NonNullable<Awaited<ReturnType<typeof getSecret>>>
export type GetSecretQueryError = ErrorType<unknown>

export const useGetSecret = <TError = ErrorType<unknown>>(
  options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getSecret>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customInstanceLocal> }

  ) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetSecretKey() : null);
  const swrFn = () => getSecret(requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}


export const postSecret = (
    
 options?: SecondParameter<typeof customInstanceLocal>) => {
      return customInstanceLocal<void>(
      {url: `/api/v1/secrets`, method: 'post'
    },
      options);
    }
  


/**
 * @summary Your GET endpoint
 */
export const getDeployment = (
    
 options?: SecondParameter<typeof customInstanceLocal>) => {
      return customInstanceLocal<void>(
      {url: `/api/v1/deployments`, method: 'get'
    },
      options);
    }
  

export const getGetDeploymentKey = () => [`/api/v1/deployments`];

    
export type GetDeploymentQueryResult = NonNullable<Awaited<ReturnType<typeof getDeployment>>>
export type GetDeploymentQueryError = ErrorType<unknown>

export const useGetDeployment = <TError = ErrorType<unknown>>(
  options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getDeployment>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customInstanceLocal> }

  ) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetDeploymentKey() : null);
  const swrFn = () => getDeployment(requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}


export const postDeployment = (
    
 options?: SecondParameter<typeof customInstanceLocal>) => {
      return customInstanceLocal<void>(
      {url: `/api/v1/deployments`, method: 'post'
    },
      options);
    }
  




export const getExampleAPIMSW = () => [
rest.get('*/api/v1/secrets', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
        )
      }),rest.post('*/api/v1/secrets', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
        )
      }),rest.get('*/api/v1/deployments', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
        )
      }),rest.post('*/api/v1/deployments', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
        )
      }),]
