// Package types provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package types

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// Defines values for IdpStatus.
const (
	IdpStatusACTIVE   IdpStatus = "ACTIVE"
	IdpStatusARCHIVED IdpStatus = "ARCHIVED"
)

// Defines values for LogLevel.
const (
	ERROR   LogLevel = "ERROR"
	INFO    LogLevel = "INFO"
	WARNING LogLevel = "WARNING"
)

// Defines values for RequestAccessGroupApprovalMethod.
const (
	AUTOMATIC RequestAccessGroupApprovalMethod = "AUTOMATIC"
	REVIEWED  RequestAccessGroupApprovalMethod = "REVIEWED"
)

// Defines values for RequestAccessGroupStatus.
const (
	RequestAccessGroupStatusAPPROVED        RequestAccessGroupStatus = "APPROVED"
	RequestAccessGroupStatusDECLINED        RequestAccessGroupStatus = "DECLINED"
	RequestAccessGroupStatusPENDINGAPPROVAL RequestAccessGroupStatus = "PENDING_APPROVAL"
)

// Defines values for RequestAccessGroupTargetStatus.
const (
	RequestAccessGroupTargetStatusACTIVE              RequestAccessGroupTargetStatus = "ACTIVE"
	RequestAccessGroupTargetStatusAWAITINGSTART       RequestAccessGroupTargetStatus = "AWAITING_START"
	RequestAccessGroupTargetStatusERROR               RequestAccessGroupTargetStatus = "ERROR"
	RequestAccessGroupTargetStatusEXPIRED             RequestAccessGroupTargetStatus = "EXPIRED"
	RequestAccessGroupTargetStatusPENDINGPROVISIONING RequestAccessGroupTargetStatus = "PENDING_PROVISIONING"
	RequestAccessGroupTargetStatusREVOKED             RequestAccessGroupTargetStatus = "REVOKED"
)

// Defines values for RequestStatus.
const (
	ACTIVE    RequestStatus = "ACTIVE"
	CANCELLED RequestStatus = "CANCELLED"
	COMPLETE  RequestStatus = "COMPLETE"
	PENDING   RequestStatus = "PENDING"
	REVOKED   RequestStatus = "REVOKED"
	REVOKING  RequestStatus = "REVOKING"
)

// Defines values for ResourceFilterOperationTypeEnum.
const (
	BEGINSWITH ResourceFilterOperationTypeEnum = "BEGINS_WITH"
	IN         ResourceFilterOperationTypeEnum = "IN"
)

// Defines values for ReviewDecision.
const (
	ReviewDecisionAPPROVED ReviewDecision = "APPROVED"
	ReviewDecisionDECLINED ReviewDecision = "DECLINED"
)

// AccessRule contains detailed information about a rule and is used in administrative apis.
type AccessRule struct {
	// Approver config for access rules
	Approval    AccessRuleApproverConfig `json:"approval"`
	Description string                   `json:"description"`

	// The group IDs that the access rule applies to.
	Groups   []string           `json:"groups"`
	ID       string             `json:"id"`
	Metadata AccessRuleMetadata `json:"metadata"`
	Name     string             `json:"name"`
	Priority int                `json:"priority"`
	Targets  []AccessRuleTarget `json:"targets"`

	// Time configuration for an Access Rule.
	TimeConstraints AccessRuleTimeConstraints `json:"timeConstraints"`
}

// Approver config for access rules
type AccessRuleApproverConfig struct {
	Groups []string `json:"groups"`

	// The user IDs of the approvers for the request.
	Users []string `json:"users"`
}

// AccessRuleMetadata defines model for AccessRuleMetadata.
type AccessRuleMetadata struct {
	CreatedAt     time.Time `json:"createdAt"`
	CreatedBy     string    `json:"createdBy"`
	UpdateMessage *string   `json:"updateMessage,omitempty"`
	UpdatedAt     time.Time `json:"updatedAt"`
	UpdatedBy     string    `json:"updatedBy"`
}

// a request body for an Access Rule Target
type AccessRuleTarget struct {
	FieldFilterExpessions map[string]interface{} `json:"fieldFilterExpessions"`
	TargetGroup           TargetGroup            `json:"targetGroup"`
}

// Time configuration for an Access Rule.
type AccessRuleTimeConstraints struct {
	// The maximum duration in seconds the access is allowed for.
	MaxDurationSeconds int `json:"maxDurationSeconds"`
}

// CreateAccessRequestGroupOptions defines model for CreateAccessRequestGroupOptions.
type CreateAccessRequestGroupOptions struct {
	Id     string                   `json:"id"`
	Timing RequestAccessGroupTiming `json:"timing"`
}

// a request body for creating a Access Rule Target
type CreateAccessRuleTarget struct {
	FieldFilterExpessions map[string]interface{} `json:"fieldFilterExpessions"`
	TargetGroupId         string                 `json:"targetGroupId"`
}

// Diagnostic defines model for Diagnostic.
type Diagnostic struct {
	Code    string   `json:"code"`
	Level   LogLevel `json:"level"`
	Message string   `json:"message"`
}

// Group defines model for Group.
type Group struct {
	Description string   `json:"description"`
	Id          string   `json:"id"`
	MemberCount int      `json:"memberCount"`
	Members     []string `json:"members"`
	Name        string   `json:"name"`
	Source      string   `json:"source"`
}

// IdpStatus defines model for IdpStatus.
type IdpStatus string

// LogLevel defines model for LogLevel.
type LogLevel string

// Operation defines model for Operation.
type Operation struct {
	Attribute     string                          `json:"attribute"`
	OperationType ResourceFilterOperationTypeEnum `json:"operationType"`
	Operations    *Operation                      `json:"operations,omitempty"`
	Value         *string                         `json:"value,omitempty"`
	Values        *[]string                       `json:"values,omitempty"`
}

// Preflight defines model for Preflight.
type Preflight struct {
	AccessGroups []PreflightAccessGroup `json:"accessGroups"`
	CreatedAt    time.Time              `json:"createdAt"`
	Id           string                 `json:"id"`
}

// PreflightAccessGroup defines model for PreflightAccessGroup.
type PreflightAccessGroup struct {
	Id               string   `json:"id"`
	RequiresApproval bool     `json:"requiresApproval"`
	Targets          []Target `json:"targets"`

	// Time configuration for an Access Rule.
	TimeConstraints AccessRuleTimeConstraints `json:"timeConstraints"`
}

// A request to access something made by an end user in Common Fate.
type Request struct {
	AccessGroups []RequestAccessGroup `json:"accessGroups"`
	ID           string               `json:"id"`
	Purpose      RequestPurpose       `json:"purpose"`
	RequestedAt  time.Time            `json:"requestedAt"`

	// The user who requested access
	RequestedBy RequestRequestedBy `json:"requestedBy"`

	// The status of an Access Request.
	Status RequestStatus `json:"status"`
}

// RequestAccessGroup defines model for RequestAccessGroup.
type RequestAccessGroup struct {
	AccessRule RequestAccessGroupAccessRule `json:"accessRule"`

	// Describes whether a request has been approved automatically or from a review
	ApprovalMethod *RequestAccessGroupApprovalMethod `json:"approvalMethod,omitempty"`
	CreatedAt      time.Time                         `json:"createdAt"`
	Id             string                            `json:"id"`
	OverrideTiming *RequestAccessGroupTiming         `json:"overrideTiming,omitempty"`
	RequestId      string                            `json:"requestId"`

	// The user who requested access
	RequestedBy     RequestRequestedBy       `json:"requestedBy"`
	RequestedTiming RequestAccessGroupTiming `json:"requestedTiming"`

	// The status of an Access Request.
	Status    RequestAccessGroupStatus   `json:"status"`
	Targets   []RequestAccessGroupTarget `json:"targets"`
	UpdatedAt time.Time                  `json:"updatedAt"`
}

// RequestAccessGroupAccessRule defines model for RequestAccessGroupAccessRule.
type RequestAccessGroupAccessRule struct {
	// Time configuration for an Access Rule.
	TimeConstraints AccessRuleTimeConstraints `json:"timeConstraints"`
}

// Describes whether a request has been approved automatically or from a review
type RequestAccessGroupApprovalMethod string

// The status of an Access Request.
type RequestAccessGroupStatus string

// A temporary assignment of a user to a principal.
type RequestAccessGroupTarget struct {
	AccessGroupId string        `json:"accessGroupId"`
	Fields        []TargetField `json:"fields"`
	Id            string        `json:"id"`
	RequestId     string        `json:"requestId"`

	// The user who requested access
	RequestedBy RequestRequestedBy `json:"requestedBy"`

	// The status of a grant.
	Status        RequestAccessGroupTargetStatus `json:"status"`
	TargetGroupId string                         `json:"targetGroupId"`
	TargetKind    TargetKind                     `json:"targetKind"`
}

// Instructions on how to access the requested resource.
//
// The `instructions` field will be null if no instructions are available.
type RequestAccessGroupTargetAccessInstructions struct {
	// Instructions on how to access the role or resource.
	Instructions *string `json:"instructions,omitempty"`
}

// The status of a grant.
type RequestAccessGroupTargetStatus string

// RequestAccessGroupTiming defines model for RequestAccessGroupTiming.
type RequestAccessGroupTiming struct {
	DurationSeconds int `json:"durationSeconds"`

	// iso8601 timestamp in UTC timezone
	StartTime *time.Time `json:"startTime,omitempty"`
}

// RequestEvent defines model for RequestEvent.
type RequestEvent struct {
	Actor     *string   `json:"actor,omitempty"`
	CreatedAt time.Time `json:"createdAt"`

	// The status of a grant.
	FromGrantStatus *RequestAccessGroupTargetStatus `json:"fromGrantStatus,omitempty"`

	// The status of an Access Request.
	FromStatus         *RequestStatus            `json:"fromStatus,omitempty"`
	FromTiming         *RequestAccessGroupTiming `json:"fromTiming,omitempty"`
	GrantCreated       *bool                     `json:"grantCreated,omitempty"`
	GrantFailureReason *string                   `json:"grantFailureReason,omitempty"`
	Id                 string                    `json:"id"`

	// An event which was recorded relating to the grant.
	RecordedEvent  *map[string]string `json:"recordedEvent,omitempty"`
	RequestCreated *bool              `json:"requestCreated,omitempty"`
	RequestId      string             `json:"requestId"`

	// The status of a grant.
	ToGrantStatus *RequestAccessGroupTargetStatus `json:"toGrantStatus,omitempty"`

	// The status of an Access Request.
	ToStatus *RequestStatus            `json:"toStatus,omitempty"`
	ToTiming *RequestAccessGroupTiming `json:"toTiming,omitempty"`
}

// RequestPurpose defines model for RequestPurpose.
type RequestPurpose struct {
	Reason *string `json:"reason,omitempty"`
}

// The user who requested access
type RequestRequestedBy struct {
	Email     string  `json:"email"`
	FirstName string  `json:"firstName"`
	ID        string  `json:"id"`
	LastName  string  `json:"lastName"`
	Picture   *string `json:"picture,omitempty"`
}

// The status of an Access Request.
type RequestStatus string

// Resource defines model for Resource.
type Resource struct {
	Attributes map[string]string `json:"attributes"`
	Id         string            `json:"id"`
	Name       string            `json:"name"`
}

// ResourceFilter defines model for ResourceFilter.
type ResourceFilter = []Operation

// ResourceFilterOperationTypeEnum defines model for ResourceFilterOperationTypeEnum.
type ResourceFilterOperationTypeEnum string

// A decision made on an Access Request.
type ReviewDecision string

// Handler represents a deployment of a provider.
// Handlers can be linked to target groups via routes
type TGHandler struct {
	AwsAccount  string       `json:"awsAccount"`
	AwsRegion   string       `json:"awsRegion"`
	Diagnostics []Diagnostic `json:"diagnostics"`
	FunctionArn string       `json:"functionArn"`
	Healthy     bool         `json:"healthy"`
	Id          string       `json:"id"`
	Runtime     string       `json:"runtime"`
}

// Target defines model for Target.
type Target struct {
	Fields []TargetField `json:"fields"`
	Id     string        `json:"id"`
	Kind   TargetKind    `json:"kind"`
}

// TargetField defines model for TargetField.
type TargetField struct {
	FieldDescription *string `json:"fieldDescription,omitempty"`
	FieldTitle       string  `json:"fieldTitle"`
	Id               string  `json:"id"`
	Value            string  `json:"value"`
	ValueDescription *string `json:"valueDescription,omitempty"`
	ValueLabel       string  `json:"valueLabel"`
}

// TargetGroup defines model for TargetGroup.
type TargetGroup struct {
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// Specifies a particular Access Provider to create a Target Group schema from.
	From      TargetGroupFrom   `json:"from"`
	Icon      string            `json:"icon"`
	Id        string            `json:"id"`
	Schema    TargetGroupSchema `json:"schema"`
	UpdatedAt *time.Time        `json:"updatedAt,omitempty"`
}

// Specifies a particular Access Provider to create a Target Group schema from.
type TargetGroupFrom struct {
	Kind      string `json:"kind"`
	Name      string `json:"name"`
	Publisher string `json:"publisher"`
	Version   string `json:"version"`
}

// TargetGroupResource defines model for TargetGroupResource.
type TargetGroupResource struct {
	Resource      Resource `json:"resource"`
	ResourceType  string   `json:"resourceType"`
	TargetGroupId string   `json:"targetGroupId"`
}

// TargetGroupSchema defines model for TargetGroupSchema.
type TargetGroupSchema struct {
	AdditionalProperties map[string]TargetGroupSchemaArgument `json:"-"`
}

// Define the metadata, data type and UI elements for the argument
type TargetGroupSchemaArgument struct {
	Description *string `json:"description,omitempty"`
	Id          string  `json:"id"`
	Title       string  `json:"title"`
}

// TargetKind defines model for TargetKind.
type TargetKind struct {
	Icon      string `json:"icon"`
	Kind      string `json:"kind"`
	Name      string `json:"name"`
	Publisher string `json:"publisher"`
}

// TargetRoute defines model for TargetRoute.
type TargetRoute struct {
	Diagnostics   []Diagnostic `json:"diagnostics"`
	HandlerId     string       `json:"handlerId"`
	Kind          string       `json:"kind"`
	Priority      int          `json:"priority"`
	TargetGroupId string       `json:"targetGroupId"`
	Valid         bool         `json:"valid"`
}

// User defines model for User.
type User struct {
	Email     string    `json:"email"`
	FirstName string    `json:"firstName"`
	Groups    []string  `json:"groups"`
	Id        string    `json:"id"`
	LastName  string    `json:"lastName"`
	Picture   string    `json:"picture"`
	Status    IdpStatus `json:"status"`
	UpdatedAt time.Time `json:"updatedAt"`
}

// AuthUserResponse defines model for AuthUserResponse.
type AuthUserResponse struct {
	// Whether the user is an administrator of Common Fate.
	IsAdmin bool `json:"isAdmin"`
	User    User `json:"user"`
}

// DeploymentVersionResponse defines model for DeploymentVersionResponse.
type DeploymentVersionResponse struct {
	// The deployment version. Will be a semver, such as "v0.9.0" for official releases, or "dev+GIT_HASH" for pre-release builds.
	Version string `json:"version"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error string `json:"error"`
}

// IdentityConfigurationResponse defines model for IdentityConfigurationResponse.
type IdentityConfigurationResponse struct {
	AdministratorGroupId string `json:"administratorGroupId"`
	IdentityProvider     string `json:"identityProvider"`
}

// ListAccessGroupsResponse defines model for ListAccessGroupsResponse.
type ListAccessGroupsResponse struct {
	Groups []RequestAccessGroup `json:"groups"`
	Next   *string              `json:"next,omitempty"`
}

// ListAccessRulesResponse defines model for ListAccessRulesResponse.
type ListAccessRulesResponse struct {
	AccessRules []AccessRule `json:"accessRules"`
	Next        *string      `json:"next"`
}

// ListEntitlementsResponse defines model for ListEntitlementsResponse.
type ListEntitlementsResponse struct {
	Entitlements []TargetKind `json:"entitlements"`
}

// ListGrantsResponse defines model for ListGrantsResponse.
type ListGrantsResponse struct {
	Grants []RequestAccessGroupTarget `json:"grants"`
	Next   *string                    `json:"next,omitempty"`
}

// ListGroupsResponse defines model for ListGroupsResponse.
type ListGroupsResponse struct {
	Groups []Group `json:"groups"`
	Next   *string `json:"next"`
}

// ListHandlersResponse defines model for ListHandlersResponse.
type ListHandlersResponse struct {
	Next string      `json:"next"`
	Res  []TGHandler `json:"res"`
}

// ListRequestEventsResponse defines model for ListRequestEventsResponse.
type ListRequestEventsResponse struct {
	Events []RequestEvent `json:"events"`
	Next   *string        `json:"next"`
}

// ListRequestsResponse defines model for ListRequestsResponse.
type ListRequestsResponse struct {
	Next     *string   `json:"next"`
	Requests []Request `json:"requests"`
}

// ListTargetGroupResource defines model for ListTargetGroupResource.
type ListTargetGroupResource = []TargetGroupResource

// ListTargetGroupResponse defines model for ListTargetGroupResponse.
type ListTargetGroupResponse struct {
	TargetGroups []TargetGroup `json:"targetGroups"`
}

// ListTargetGroupRoutes defines model for ListTargetGroupRoutes.
type ListTargetGroupRoutes struct {
	Next   *string       `json:"next,omitempty"`
	Routes []TargetRoute `json:"routes"`
}

// ListTargetsResponse defines model for ListTargetsResponse.
type ListTargetsResponse struct {
	Next    *string  `json:"next,omitempty"`
	Targets []Target `json:"targets"`
}

// ListUserResponse defines model for ListUserResponse.
type ListUserResponse struct {
	Next  *string `json:"next"`
	Users []User  `json:"users"`
}

// ReviewResponse defines model for ReviewResponse.
type ReviewResponse struct {
	// A request to access something made by an end user in Common Fate.
	Request *Request `json:"request,omitempty"`
}

// CreateAccessRequestRequest defines model for CreateAccessRequestRequest.
type CreateAccessRequestRequest struct {
	GroupOptions []CreateAccessRequestGroupOptions `json:"groupOptions"`
	PreflightId  string                            `json:"preflightId"`
	Reason       *string                           `json:"reason,omitempty"`
}

// CreateAccessRuleRequest defines model for CreateAccessRuleRequest.
type CreateAccessRuleRequest struct {
	// Approver config for access rules
	Approval    AccessRuleApproverConfig `json:"approval"`
	Description string                   `json:"description"`

	// The group IDs that the access rule applies to.
	Groups   []string                 `json:"groups"`
	Name     string                   `json:"name"`
	Priority int                      `json:"priority"`
	Targets  []CreateAccessRuleTarget `json:"targets"`

	// Time configuration for an Access Rule.
	TimeConstraints AccessRuleTimeConstraints `json:"timeConstraints"`
}

// CreateGroupRequest defines model for CreateGroupRequest.
type CreateGroupRequest struct {
	Description *string  `json:"description,omitempty"`
	Members     []string `json:"members"`
	Name        string   `json:"name"`
}

// CreatePreflightRequest defines model for CreatePreflightRequest.
type CreatePreflightRequest struct {
	Targets []string `json:"targets"`
}

// CreateTargetGroupLink defines model for CreateTargetGroupLink.
type CreateTargetGroupLink struct {
	DeploymentId string `json:"deploymentId"`
	Kind         string `json:"kind"`
	Priority     int    `json:"priority"`
}

// CreateTargetGroupRequest defines model for CreateTargetGroupRequest.
type CreateTargetGroupRequest struct {
	// Specifies a particular Access Provider to create a Target Group schema from.
	From TargetGroupFrom `json:"from"`
	Id   string          `json:"id"`
}

// CreateUserRequest defines model for CreateUserRequest.
type CreateUserRequest struct {
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"firstName"`
	IsAdmin   bool                `json:"isAdmin"`
	LastName  string              `json:"lastName"`
}

// RegisterHandlerRequest defines model for RegisterHandlerRequest.
type RegisterHandlerRequest struct {
	AwsAccount string `json:"awsAccount"`
	AwsRegion  string `json:"awsRegion"`

	// The ID of the target group to deploy to. User, provided
	Id      string `json:"id"`
	Runtime string `json:"runtime"`
}

// ResouceFilterRequest defines model for ResouceFilterRequest.
type ResouceFilterRequest = ResourceFilter

// ReviewRequest defines model for ReviewRequest.
type ReviewRequest struct {
	Comment *string `json:"comment,omitempty"`

	// A decision made on an Access Request.
	Decision       ReviewDecision            `json:"decision"`
	OverrideTiming *RequestAccessGroupTiming `json:"overrideTiming,omitempty"`
}

// AdminListAccessRulesParams defines parameters for AdminListAccessRules.
type AdminListAccessRulesParams struct {
	// Next page token
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`
}

// AdminListGroupsParams defines parameters for AdminListGroups.
type AdminListGroupsParams struct {
	// encrypted token containing pagination info
	NextToken *string                      `form:"nextToken,omitempty" json:"nextToken,omitempty"`
	Source    *AdminListGroupsParamsSource `form:"source,omitempty" json:"source,omitempty"`
}

// AdminListGroupsParamsSource defines parameters for AdminListGroups.
type AdminListGroupsParamsSource string

// AdminListRequestsParams defines parameters for AdminListRequests.
type AdminListRequestsParams struct {
	// omit this param to view all results
	Status *AdminListRequestsParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// encrypted token containing pagination info
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`
}

// AdminListRequestsParamsStatus defines parameters for AdminListRequests.
type AdminListRequestsParamsStatus string

// AdminFilterTargetGroupResourcesJSONBody defines parameters for AdminFilterTargetGroupResources.
type AdminFilterTargetGroupResourcesJSONBody = ResourceFilter

// AdminRemoveTargetGroupLinkParams defines parameters for AdminRemoveTargetGroupLink.
type AdminRemoveTargetGroupLinkParams struct {
	DeploymentId string `form:"deploymentId" json:"deploymentId"`
	Kind         string `form:"kind" json:"kind"`
}

// AdminListUsersParams defines parameters for AdminListUsers.
type AdminListUsersParams struct {
	// encrypted token containing pagination info
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`
}

// AdminUpdateUserJSONBody defines parameters for AdminUpdateUser.
type AdminUpdateUserJSONBody struct {
	Groups []string `json:"groups"`
}

// UserListEntitlementTargetsParams defines parameters for UserListEntitlementTargets.
type UserListEntitlementTargetsParams struct {
	// query
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`

	// filter targets by kind
	Kind *string `form:"kind,omitempty" json:"kind,omitempty"`
}

// UserListRequestsParams defines parameters for UserListRequests.
type UserListRequestsParams struct {
	// pagination token
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`

	// filter for past or upcoming requests
	Filter *UserListRequestsParamsFilter `form:"filter,omitempty" json:"filter,omitempty"`
}

// UserListRequestsParamsFilter defines parameters for UserListRequests.
type UserListRequestsParamsFilter string

// UserListReviewsParams defines parameters for UserListReviews.
type UserListReviewsParams struct {
	// omit this param to view all results
	Status *UserListReviewsParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// pagination token
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`
}

// UserListReviewsParamsStatus defines parameters for UserListReviews.
type UserListReviewsParamsStatus string

// AdminCreateAccessRuleJSONRequestBody defines body for AdminCreateAccessRule for application/json ContentType.
type AdminCreateAccessRuleJSONRequestBody CreateAccessRuleRequest

// AdminUpdateAccessRuleJSONRequestBody defines body for AdminUpdateAccessRule for application/json ContentType.
type AdminUpdateAccessRuleJSONRequestBody CreateAccessRuleRequest

// AdminCreateGroupJSONRequestBody defines body for AdminCreateGroup for application/json ContentType.
type AdminCreateGroupJSONRequestBody CreateGroupRequest

// AdminUpdateGroupJSONRequestBody defines body for AdminUpdateGroup for application/json ContentType.
type AdminUpdateGroupJSONRequestBody CreateGroupRequest

// AdminRegisterHandlerJSONRequestBody defines body for AdminRegisterHandler for application/json ContentType.
type AdminRegisterHandlerJSONRequestBody RegisterHandlerRequest

// AdminCreateTargetGroupJSONRequestBody defines body for AdminCreateTargetGroup for application/json ContentType.
type AdminCreateTargetGroupJSONRequestBody CreateTargetGroupRequest

// AdminCreateTargetGroupLinkJSONRequestBody defines body for AdminCreateTargetGroupLink for application/json ContentType.
type AdminCreateTargetGroupLinkJSONRequestBody CreateTargetGroupLink

// AdminFilterTargetGroupResourcesJSONRequestBody defines body for AdminFilterTargetGroupResources for application/json ContentType.
type AdminFilterTargetGroupResourcesJSONRequestBody = AdminFilterTargetGroupResourcesJSONBody

// AdminCreateUserJSONRequestBody defines body for AdminCreateUser for application/json ContentType.
type AdminCreateUserJSONRequestBody CreateUserRequest

// AdminUpdateUserJSONRequestBody defines body for AdminUpdateUser for application/json ContentType.
type AdminUpdateUserJSONRequestBody AdminUpdateUserJSONBody

// UserRequestPreflightJSONRequestBody defines body for UserRequestPreflight for application/json ContentType.
type UserRequestPreflightJSONRequestBody CreatePreflightRequest

// UserPostRequestsJSONRequestBody defines body for UserPostRequests for application/json ContentType.
type UserPostRequestsJSONRequestBody CreateAccessRequestRequest

// UserReviewRequestJSONRequestBody defines body for UserReviewRequest for application/json ContentType.
type UserReviewRequestJSONRequestBody ReviewRequest

// Getter for additional properties for TargetGroupSchema. Returns the specified
// element and whether it was found
func (a TargetGroupSchema) Get(fieldName string) (value TargetGroupSchemaArgument, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TargetGroupSchema
func (a *TargetGroupSchema) Set(fieldName string, value TargetGroupSchemaArgument) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]TargetGroupSchemaArgument)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TargetGroupSchema to handle AdditionalProperties
func (a *TargetGroupSchema) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]TargetGroupSchemaArgument)
		for fieldName, fieldBuf := range object {
			var fieldVal TargetGroupSchemaArgument
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TargetGroupSchema to handle AdditionalProperties
func (a TargetGroupSchema) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// AdminListAccessRules request
	AdminListAccessRules(ctx context.Context, params *AdminListAccessRulesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminCreateAccessRule request with any body
	AdminCreateAccessRuleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AdminCreateAccessRule(ctx context.Context, body AdminCreateAccessRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminDeleteAccessRule request
	AdminDeleteAccessRule(ctx context.Context, ruleId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminGetAccessRule request
	AdminGetAccessRule(ctx context.Context, ruleId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminUpdateAccessRule request with any body
	AdminUpdateAccessRuleWithBody(ctx context.Context, ruleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AdminUpdateAccessRule(ctx context.Context, ruleId string, body AdminUpdateAccessRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminGetDeploymentVersion request
	AdminGetDeploymentVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminListGroups request
	AdminListGroups(ctx context.Context, params *AdminListGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminCreateGroup request with any body
	AdminCreateGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AdminCreateGroup(ctx context.Context, body AdminCreateGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminDeleteGroup request
	AdminDeleteGroup(ctx context.Context, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminGetGroup request
	AdminGetGroup(ctx context.Context, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminUpdateGroup request with any body
	AdminUpdateGroupWithBody(ctx context.Context, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AdminUpdateGroup(ctx context.Context, groupId string, body AdminUpdateGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminListHandlers request
	AdminListHandlers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminRegisterHandler request with any body
	AdminRegisterHandlerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AdminRegisterHandler(ctx context.Context, body AdminRegisterHandlerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminDeleteHandler request
	AdminDeleteHandler(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminGetHandler request
	AdminGetHandler(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminHealthcheckHandlers request
	AdminHealthcheckHandlers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminGetIdentityConfiguration request
	AdminGetIdentityConfiguration(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminSyncIdentity request
	AdminSyncIdentity(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminListRequests request
	AdminListRequests(ctx context.Context, params *AdminListRequestsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminListTargetGroups request
	AdminListTargetGroups(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminCreateTargetGroup request with any body
	AdminCreateTargetGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AdminCreateTargetGroup(ctx context.Context, body AdminCreateTargetGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminDeleteTargetGroup request
	AdminDeleteTargetGroup(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminGetTargetGroup request
	AdminGetTargetGroup(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminCreateTargetGroupLink request with any body
	AdminCreateTargetGroupLinkWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AdminCreateTargetGroupLink(ctx context.Context, id string, body AdminCreateTargetGroupLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminGetTargetGroupResources request
	AdminGetTargetGroupResources(ctx context.Context, id string, resourceType string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminFilterTargetGroupResources request with any body
	AdminFilterTargetGroupResourcesWithBody(ctx context.Context, id string, resourceType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AdminFilterTargetGroupResources(ctx context.Context, id string, resourceType string, body AdminFilterTargetGroupResourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminListTargetRoutes request
	AdminListTargetRoutes(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminRemoveTargetGroupLink request
	AdminRemoveTargetGroupLink(ctx context.Context, id string, params *AdminRemoveTargetGroupLinkParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminListUsers request
	AdminListUsers(ctx context.Context, params *AdminListUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminCreateUser request with any body
	AdminCreateUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AdminCreateUser(ctx context.Context, body AdminCreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminUpdateUser request with any body
	AdminUpdateUserWithBody(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AdminUpdateUser(ctx context.Context, userId string, body AdminUpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserListEntitlements request
	UserListEntitlements(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserListEntitlementTargets request
	UserListEntitlementTargets(ctx context.Context, params *UserListEntitlementTargetsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserRequestPreflight request with any body
	UserRequestPreflightWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UserRequestPreflight(ctx context.Context, body UserRequestPreflightJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserListRequests request
	UserListRequests(ctx context.Context, params *UserListRequestsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserPostRequests request with any body
	UserPostRequestsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UserPostRequests(ctx context.Context, body UserPostRequestsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserGetRequest request
	UserGetRequest(ctx context.Context, requestId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserReviewRequest request with any body
	UserReviewRequestWithBody(ctx context.Context, requestId string, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UserReviewRequest(ctx context.Context, requestId string, groupId string, body UserReviewRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserRevokeRequest request
	UserRevokeRequest(ctx context.Context, requestid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserListReviews request
	UserListReviews(ctx context.Context, params *UserListReviewsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserGetMe request
	UserGetMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UserGetUser request
	UserGetUser(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) AdminListAccessRules(ctx context.Context, params *AdminListAccessRulesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminListAccessRulesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminCreateAccessRuleWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminCreateAccessRuleRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminCreateAccessRule(ctx context.Context, body AdminCreateAccessRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminCreateAccessRuleRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminDeleteAccessRule(ctx context.Context, ruleId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminDeleteAccessRuleRequest(c.Server, ruleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminGetAccessRule(ctx context.Context, ruleId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminGetAccessRuleRequest(c.Server, ruleId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminUpdateAccessRuleWithBody(ctx context.Context, ruleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminUpdateAccessRuleRequestWithBody(c.Server, ruleId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminUpdateAccessRule(ctx context.Context, ruleId string, body AdminUpdateAccessRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminUpdateAccessRuleRequest(c.Server, ruleId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminGetDeploymentVersion(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminGetDeploymentVersionRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminListGroups(ctx context.Context, params *AdminListGroupsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminListGroupsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminCreateGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminCreateGroupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminCreateGroup(ctx context.Context, body AdminCreateGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminCreateGroupRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminDeleteGroup(ctx context.Context, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminDeleteGroupRequest(c.Server, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminGetGroup(ctx context.Context, groupId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminGetGroupRequest(c.Server, groupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminUpdateGroupWithBody(ctx context.Context, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminUpdateGroupRequestWithBody(c.Server, groupId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminUpdateGroup(ctx context.Context, groupId string, body AdminUpdateGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminUpdateGroupRequest(c.Server, groupId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminListHandlers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminListHandlersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminRegisterHandlerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminRegisterHandlerRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminRegisterHandler(ctx context.Context, body AdminRegisterHandlerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminRegisterHandlerRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminDeleteHandler(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminDeleteHandlerRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminGetHandler(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminGetHandlerRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminHealthcheckHandlers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminHealthcheckHandlersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminGetIdentityConfiguration(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminGetIdentityConfigurationRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminSyncIdentity(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminSyncIdentityRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminListRequests(ctx context.Context, params *AdminListRequestsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminListRequestsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminListTargetGroups(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminListTargetGroupsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminCreateTargetGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminCreateTargetGroupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminCreateTargetGroup(ctx context.Context, body AdminCreateTargetGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminCreateTargetGroupRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminDeleteTargetGroup(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminDeleteTargetGroupRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminGetTargetGroup(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminGetTargetGroupRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminCreateTargetGroupLinkWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminCreateTargetGroupLinkRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminCreateTargetGroupLink(ctx context.Context, id string, body AdminCreateTargetGroupLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminCreateTargetGroupLinkRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminGetTargetGroupResources(ctx context.Context, id string, resourceType string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminGetTargetGroupResourcesRequest(c.Server, id, resourceType)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminFilterTargetGroupResourcesWithBody(ctx context.Context, id string, resourceType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminFilterTargetGroupResourcesRequestWithBody(c.Server, id, resourceType, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminFilterTargetGroupResources(ctx context.Context, id string, resourceType string, body AdminFilterTargetGroupResourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminFilterTargetGroupResourcesRequest(c.Server, id, resourceType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminListTargetRoutes(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminListTargetRoutesRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminRemoveTargetGroupLink(ctx context.Context, id string, params *AdminRemoveTargetGroupLinkParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminRemoveTargetGroupLinkRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminListUsers(ctx context.Context, params *AdminListUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminListUsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminCreateUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminCreateUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminCreateUser(ctx context.Context, body AdminCreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminCreateUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminUpdateUserWithBody(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminUpdateUserRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminUpdateUser(ctx context.Context, userId string, body AdminUpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminUpdateUserRequest(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserListEntitlements(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserListEntitlementsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserListEntitlementTargets(ctx context.Context, params *UserListEntitlementTargetsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserListEntitlementTargetsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserRequestPreflightWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserRequestPreflightRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserRequestPreflight(ctx context.Context, body UserRequestPreflightJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserRequestPreflightRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserListRequests(ctx context.Context, params *UserListRequestsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserListRequestsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserPostRequestsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserPostRequestsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserPostRequests(ctx context.Context, body UserPostRequestsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserPostRequestsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserGetRequest(ctx context.Context, requestId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserGetRequestRequest(c.Server, requestId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserReviewRequestWithBody(ctx context.Context, requestId string, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserReviewRequestRequestWithBody(c.Server, requestId, groupId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserReviewRequest(ctx context.Context, requestId string, groupId string, body UserReviewRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserReviewRequestRequest(c.Server, requestId, groupId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserRevokeRequest(ctx context.Context, requestid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserRevokeRequestRequest(c.Server, requestid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserListReviews(ctx context.Context, params *UserListReviewsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserListReviewsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserGetMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserGetMeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UserGetUser(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUserGetUserRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewAdminListAccessRulesRequest generates requests for AdminListAccessRules
func NewAdminListAccessRulesRequest(server string, params *AdminListAccessRulesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/access-rules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.NextToken != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nextToken", runtime.ParamLocationQuery, *params.NextToken); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAdminCreateAccessRuleRequest calls the generic AdminCreateAccessRule builder with application/json body
func NewAdminCreateAccessRuleRequest(server string, body AdminCreateAccessRuleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAdminCreateAccessRuleRequestWithBody(server, "application/json", bodyReader)
}

// NewAdminCreateAccessRuleRequestWithBody generates requests for AdminCreateAccessRule with any type of body
func NewAdminCreateAccessRuleRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/access-rules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAdminDeleteAccessRuleRequest generates requests for AdminDeleteAccessRule
func NewAdminDeleteAccessRuleRequest(server string, ruleId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ruleId", runtime.ParamLocationPath, ruleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/access-rules/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAdminGetAccessRuleRequest generates requests for AdminGetAccessRule
func NewAdminGetAccessRuleRequest(server string, ruleId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ruleId", runtime.ParamLocationPath, ruleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/access-rules/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAdminUpdateAccessRuleRequest calls the generic AdminUpdateAccessRule builder with application/json body
func NewAdminUpdateAccessRuleRequest(server string, ruleId string, body AdminUpdateAccessRuleJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAdminUpdateAccessRuleRequestWithBody(server, ruleId, "application/json", bodyReader)
}

// NewAdminUpdateAccessRuleRequestWithBody generates requests for AdminUpdateAccessRule with any type of body
func NewAdminUpdateAccessRuleRequestWithBody(server string, ruleId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ruleId", runtime.ParamLocationPath, ruleId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/access-rules/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAdminGetDeploymentVersionRequest generates requests for AdminGetDeploymentVersion
func NewAdminGetDeploymentVersionRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/deployment/version")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAdminListGroupsRequest generates requests for AdminListGroups
func NewAdminListGroupsRequest(server string, params *AdminListGroupsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.NextToken != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nextToken", runtime.ParamLocationQuery, *params.NextToken); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Source != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "source", runtime.ParamLocationQuery, *params.Source); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAdminCreateGroupRequest calls the generic AdminCreateGroup builder with application/json body
func NewAdminCreateGroupRequest(server string, body AdminCreateGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAdminCreateGroupRequestWithBody(server, "application/json", bodyReader)
}

// NewAdminCreateGroupRequestWithBody generates requests for AdminCreateGroup with any type of body
func NewAdminCreateGroupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAdminDeleteGroupRequest generates requests for AdminDeleteGroup
func NewAdminDeleteGroupRequest(server string, groupId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAdminGetGroupRequest generates requests for AdminGetGroup
func NewAdminGetGroupRequest(server string, groupId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAdminUpdateGroupRequest calls the generic AdminUpdateGroup builder with application/json body
func NewAdminUpdateGroupRequest(server string, groupId string, body AdminUpdateGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAdminUpdateGroupRequestWithBody(server, groupId, "application/json", bodyReader)
}

// NewAdminUpdateGroupRequestWithBody generates requests for AdminUpdateGroup with any type of body
func NewAdminUpdateGroupRequestWithBody(server string, groupId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAdminListHandlersRequest generates requests for AdminListHandlers
func NewAdminListHandlersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/handlers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAdminRegisterHandlerRequest calls the generic AdminRegisterHandler builder with application/json body
func NewAdminRegisterHandlerRequest(server string, body AdminRegisterHandlerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAdminRegisterHandlerRequestWithBody(server, "application/json", bodyReader)
}

// NewAdminRegisterHandlerRequestWithBody generates requests for AdminRegisterHandler with any type of body
func NewAdminRegisterHandlerRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/handlers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAdminDeleteHandlerRequest generates requests for AdminDeleteHandler
func NewAdminDeleteHandlerRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/handlers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAdminGetHandlerRequest generates requests for AdminGetHandler
func NewAdminGetHandlerRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/handlers/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAdminHealthcheckHandlersRequest generates requests for AdminHealthcheckHandlers
func NewAdminHealthcheckHandlersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/healthcheck-handlers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAdminGetIdentityConfigurationRequest generates requests for AdminGetIdentityConfiguration
func NewAdminGetIdentityConfigurationRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/identity")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAdminSyncIdentityRequest generates requests for AdminSyncIdentity
func NewAdminSyncIdentityRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/identity/sync")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAdminListRequestsRequest generates requests for AdminListRequests
func NewAdminListRequestsRequest(server string, params *AdminListRequestsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/requests")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NextToken != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nextToken", runtime.ParamLocationQuery, *params.NextToken); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAdminListTargetGroupsRequest generates requests for AdminListTargetGroups
func NewAdminListTargetGroupsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/target-groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAdminCreateTargetGroupRequest calls the generic AdminCreateTargetGroup builder with application/json body
func NewAdminCreateTargetGroupRequest(server string, body AdminCreateTargetGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAdminCreateTargetGroupRequestWithBody(server, "application/json", bodyReader)
}

// NewAdminCreateTargetGroupRequestWithBody generates requests for AdminCreateTargetGroup with any type of body
func NewAdminCreateTargetGroupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/target-groups")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAdminDeleteTargetGroupRequest generates requests for AdminDeleteTargetGroup
func NewAdminDeleteTargetGroupRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/target-groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAdminGetTargetGroupRequest generates requests for AdminGetTargetGroup
func NewAdminGetTargetGroupRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/target-groups/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAdminCreateTargetGroupLinkRequest calls the generic AdminCreateTargetGroupLink builder with application/json body
func NewAdminCreateTargetGroupLinkRequest(server string, id string, body AdminCreateTargetGroupLinkJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAdminCreateTargetGroupLinkRequestWithBody(server, id, "application/json", bodyReader)
}

// NewAdminCreateTargetGroupLinkRequestWithBody generates requests for AdminCreateTargetGroupLink with any type of body
func NewAdminCreateTargetGroupLinkRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/target-groups/%s/link", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAdminGetTargetGroupResourcesRequest generates requests for AdminGetTargetGroupResources
func NewAdminGetTargetGroupResourcesRequest(server string, id string, resourceType string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceType", runtime.ParamLocationPath, resourceType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/target-groups/%s/resources/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAdminFilterTargetGroupResourcesRequest calls the generic AdminFilterTargetGroupResources builder with application/json body
func NewAdminFilterTargetGroupResourcesRequest(server string, id string, resourceType string, body AdminFilterTargetGroupResourcesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAdminFilterTargetGroupResourcesRequestWithBody(server, id, resourceType, "application/json", bodyReader)
}

// NewAdminFilterTargetGroupResourcesRequestWithBody generates requests for AdminFilterTargetGroupResources with any type of body
func NewAdminFilterTargetGroupResourcesRequestWithBody(server string, id string, resourceType string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "resourceType", runtime.ParamLocationPath, resourceType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/target-groups/%s/resources/%s/filters", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAdminListTargetRoutesRequest generates requests for AdminListTargetRoutes
func NewAdminListTargetRoutesRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/target-groups/%s/routes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAdminRemoveTargetGroupLinkRequest generates requests for AdminRemoveTargetGroupLink
func NewAdminRemoveTargetGroupLinkRequest(server string, id string, params *AdminRemoveTargetGroupLinkParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/target-groups/%s/unlink", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "deploymentId", runtime.ParamLocationQuery, params.DeploymentId); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "kind", runtime.ParamLocationQuery, params.Kind); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAdminListUsersRequest generates requests for AdminListUsers
func NewAdminListUsersRequest(server string, params *AdminListUsersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.NextToken != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nextToken", runtime.ParamLocationQuery, *params.NextToken); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAdminCreateUserRequest calls the generic AdminCreateUser builder with application/json body
func NewAdminCreateUserRequest(server string, body AdminCreateUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAdminCreateUserRequestWithBody(server, "application/json", bodyReader)
}

// NewAdminCreateUserRequestWithBody generates requests for AdminCreateUser with any type of body
func NewAdminCreateUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAdminUpdateUserRequest calls the generic AdminUpdateUser builder with application/json body
func NewAdminUpdateUserRequest(server string, userId string, body AdminUpdateUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAdminUpdateUserRequestWithBody(server, userId, "application/json", bodyReader)
}

// NewAdminUpdateUserRequestWithBody generates requests for AdminUpdateUser with any type of body
func NewAdminUpdateUserRequestWithBody(server string, userId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUserListEntitlementsRequest generates requests for UserListEntitlements
func NewUserListEntitlementsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/entitlements")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUserListEntitlementTargetsRequest generates requests for UserListEntitlementTargets
func NewUserListEntitlementTargetsRequest(server string, params *UserListEntitlementTargetsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/entitlements/targets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.NextToken != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nextToken", runtime.ParamLocationQuery, *params.NextToken); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Kind != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "kind", runtime.ParamLocationQuery, *params.Kind); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUserRequestPreflightRequest calls the generic UserRequestPreflight builder with application/json body
func NewUserRequestPreflightRequest(server string, body UserRequestPreflightJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUserRequestPreflightRequestWithBody(server, "application/json", bodyReader)
}

// NewUserRequestPreflightRequestWithBody generates requests for UserRequestPreflight with any type of body
func NewUserRequestPreflightRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/preflight")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUserListRequestsRequest generates requests for UserListRequests
func NewUserListRequestsRequest(server string, params *UserListRequestsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/requests")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.NextToken != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nextToken", runtime.ParamLocationQuery, *params.NextToken); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Filter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUserPostRequestsRequest calls the generic UserPostRequests builder with application/json body
func NewUserPostRequestsRequest(server string, body UserPostRequestsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUserPostRequestsRequestWithBody(server, "application/json", bodyReader)
}

// NewUserPostRequestsRequestWithBody generates requests for UserPostRequests with any type of body
func NewUserPostRequestsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/requests")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUserGetRequestRequest generates requests for UserGetRequest
func NewUserGetRequestRequest(server string, requestId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "requestId", runtime.ParamLocationPath, requestId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/requests/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUserReviewRequestRequest calls the generic UserReviewRequest builder with application/json body
func NewUserReviewRequestRequest(server string, requestId string, groupId string, body UserReviewRequestJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUserReviewRequestRequestWithBody(server, requestId, groupId, "application/json", bodyReader)
}

// NewUserReviewRequestRequestWithBody generates requests for UserReviewRequest with any type of body
func NewUserReviewRequestRequestWithBody(server string, requestId string, groupId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "requestId", runtime.ParamLocationPath, requestId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "groupId", runtime.ParamLocationPath, groupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/requests/%s/review/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUserRevokeRequestRequest generates requests for UserRevokeRequest
func NewUserRevokeRequestRequest(server string, requestid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "requestid", runtime.ParamLocationPath, requestid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/requests/%s/revoke", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUserListReviewsRequest generates requests for UserListReviews
func NewUserListReviewsRequest(server string, params *UserListReviewsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/reviews")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NextToken != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nextToken", runtime.ParamLocationQuery, *params.NextToken); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUserGetMeRequest generates requests for UserGetMe
func NewUserGetMeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/users/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUserGetUserRequest generates requests for UserGetUser
func NewUserGetUserRequest(server string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// AdminListAccessRules request
	AdminListAccessRulesWithResponse(ctx context.Context, params *AdminListAccessRulesParams, reqEditors ...RequestEditorFn) (*AdminListAccessRulesResponse, error)

	// AdminCreateAccessRule request with any body
	AdminCreateAccessRuleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminCreateAccessRuleResponse, error)

	AdminCreateAccessRuleWithResponse(ctx context.Context, body AdminCreateAccessRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminCreateAccessRuleResponse, error)

	// AdminDeleteAccessRule request
	AdminDeleteAccessRuleWithResponse(ctx context.Context, ruleId string, reqEditors ...RequestEditorFn) (*AdminDeleteAccessRuleResponse, error)

	// AdminGetAccessRule request
	AdminGetAccessRuleWithResponse(ctx context.Context, ruleId string, reqEditors ...RequestEditorFn) (*AdminGetAccessRuleResponse, error)

	// AdminUpdateAccessRule request with any body
	AdminUpdateAccessRuleWithBodyWithResponse(ctx context.Context, ruleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminUpdateAccessRuleResponse, error)

	AdminUpdateAccessRuleWithResponse(ctx context.Context, ruleId string, body AdminUpdateAccessRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminUpdateAccessRuleResponse, error)

	// AdminGetDeploymentVersion request
	AdminGetDeploymentVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AdminGetDeploymentVersionResponse, error)

	// AdminListGroups request
	AdminListGroupsWithResponse(ctx context.Context, params *AdminListGroupsParams, reqEditors ...RequestEditorFn) (*AdminListGroupsResponse, error)

	// AdminCreateGroup request with any body
	AdminCreateGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminCreateGroupResponse, error)

	AdminCreateGroupWithResponse(ctx context.Context, body AdminCreateGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminCreateGroupResponse, error)

	// AdminDeleteGroup request
	AdminDeleteGroupWithResponse(ctx context.Context, groupId string, reqEditors ...RequestEditorFn) (*AdminDeleteGroupResponse, error)

	// AdminGetGroup request
	AdminGetGroupWithResponse(ctx context.Context, groupId string, reqEditors ...RequestEditorFn) (*AdminGetGroupResponse, error)

	// AdminUpdateGroup request with any body
	AdminUpdateGroupWithBodyWithResponse(ctx context.Context, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminUpdateGroupResponse, error)

	AdminUpdateGroupWithResponse(ctx context.Context, groupId string, body AdminUpdateGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminUpdateGroupResponse, error)

	// AdminListHandlers request
	AdminListHandlersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AdminListHandlersResponse, error)

	// AdminRegisterHandler request with any body
	AdminRegisterHandlerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminRegisterHandlerResponse, error)

	AdminRegisterHandlerWithResponse(ctx context.Context, body AdminRegisterHandlerJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminRegisterHandlerResponse, error)

	// AdminDeleteHandler request
	AdminDeleteHandlerWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*AdminDeleteHandlerResponse, error)

	// AdminGetHandler request
	AdminGetHandlerWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*AdminGetHandlerResponse, error)

	// AdminHealthcheckHandlers request
	AdminHealthcheckHandlersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AdminHealthcheckHandlersResponse, error)

	// AdminGetIdentityConfiguration request
	AdminGetIdentityConfigurationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AdminGetIdentityConfigurationResponse, error)

	// AdminSyncIdentity request
	AdminSyncIdentityWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AdminSyncIdentityResponse, error)

	// AdminListRequests request
	AdminListRequestsWithResponse(ctx context.Context, params *AdminListRequestsParams, reqEditors ...RequestEditorFn) (*AdminListRequestsResponse, error)

	// AdminListTargetGroups request
	AdminListTargetGroupsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AdminListTargetGroupsResponse, error)

	// AdminCreateTargetGroup request with any body
	AdminCreateTargetGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminCreateTargetGroupResponse, error)

	AdminCreateTargetGroupWithResponse(ctx context.Context, body AdminCreateTargetGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminCreateTargetGroupResponse, error)

	// AdminDeleteTargetGroup request
	AdminDeleteTargetGroupWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*AdminDeleteTargetGroupResponse, error)

	// AdminGetTargetGroup request
	AdminGetTargetGroupWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*AdminGetTargetGroupResponse, error)

	// AdminCreateTargetGroupLink request with any body
	AdminCreateTargetGroupLinkWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminCreateTargetGroupLinkResponse, error)

	AdminCreateTargetGroupLinkWithResponse(ctx context.Context, id string, body AdminCreateTargetGroupLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminCreateTargetGroupLinkResponse, error)

	// AdminGetTargetGroupResources request
	AdminGetTargetGroupResourcesWithResponse(ctx context.Context, id string, resourceType string, reqEditors ...RequestEditorFn) (*AdminGetTargetGroupResourcesResponse, error)

	// AdminFilterTargetGroupResources request with any body
	AdminFilterTargetGroupResourcesWithBodyWithResponse(ctx context.Context, id string, resourceType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminFilterTargetGroupResourcesResponse, error)

	AdminFilterTargetGroupResourcesWithResponse(ctx context.Context, id string, resourceType string, body AdminFilterTargetGroupResourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminFilterTargetGroupResourcesResponse, error)

	// AdminListTargetRoutes request
	AdminListTargetRoutesWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*AdminListTargetRoutesResponse, error)

	// AdminRemoveTargetGroupLink request
	AdminRemoveTargetGroupLinkWithResponse(ctx context.Context, id string, params *AdminRemoveTargetGroupLinkParams, reqEditors ...RequestEditorFn) (*AdminRemoveTargetGroupLinkResponse, error)

	// AdminListUsers request
	AdminListUsersWithResponse(ctx context.Context, params *AdminListUsersParams, reqEditors ...RequestEditorFn) (*AdminListUsersResponse, error)

	// AdminCreateUser request with any body
	AdminCreateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminCreateUserResponse, error)

	AdminCreateUserWithResponse(ctx context.Context, body AdminCreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminCreateUserResponse, error)

	// AdminUpdateUser request with any body
	AdminUpdateUserWithBodyWithResponse(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminUpdateUserResponse, error)

	AdminUpdateUserWithResponse(ctx context.Context, userId string, body AdminUpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminUpdateUserResponse, error)

	// UserListEntitlements request
	UserListEntitlementsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UserListEntitlementsResponse, error)

	// UserListEntitlementTargets request
	UserListEntitlementTargetsWithResponse(ctx context.Context, params *UserListEntitlementTargetsParams, reqEditors ...RequestEditorFn) (*UserListEntitlementTargetsResponse, error)

	// UserRequestPreflight request with any body
	UserRequestPreflightWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UserRequestPreflightResponse, error)

	UserRequestPreflightWithResponse(ctx context.Context, body UserRequestPreflightJSONRequestBody, reqEditors ...RequestEditorFn) (*UserRequestPreflightResponse, error)

	// UserListRequests request
	UserListRequestsWithResponse(ctx context.Context, params *UserListRequestsParams, reqEditors ...RequestEditorFn) (*UserListRequestsResponse, error)

	// UserPostRequests request with any body
	UserPostRequestsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UserPostRequestsResponse, error)

	UserPostRequestsWithResponse(ctx context.Context, body UserPostRequestsJSONRequestBody, reqEditors ...RequestEditorFn) (*UserPostRequestsResponse, error)

	// UserGetRequest request
	UserGetRequestWithResponse(ctx context.Context, requestId string, reqEditors ...RequestEditorFn) (*UserGetRequestResponse, error)

	// UserReviewRequest request with any body
	UserReviewRequestWithBodyWithResponse(ctx context.Context, requestId string, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UserReviewRequestResponse, error)

	UserReviewRequestWithResponse(ctx context.Context, requestId string, groupId string, body UserReviewRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*UserReviewRequestResponse, error)

	// UserRevokeRequest request
	UserRevokeRequestWithResponse(ctx context.Context, requestid string, reqEditors ...RequestEditorFn) (*UserRevokeRequestResponse, error)

	// UserListReviews request
	UserListReviewsWithResponse(ctx context.Context, params *UserListReviewsParams, reqEditors ...RequestEditorFn) (*UserListReviewsResponse, error)

	// UserGetMe request
	UserGetMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UserGetMeResponse, error)

	// UserGetUser request
	UserGetUserWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*UserGetUserResponse, error)
}

type AdminListAccessRulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AccessRules []AccessRule `json:"accessRules"`
		Next        *string      `json:"next"`
	}
	JSON401 *struct {
		Error string `json:"error"`
	}
	JSON500 *struct {
		Error string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminListAccessRulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminListAccessRulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminCreateAccessRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AccessRule
	JSON400      *struct {
		Error string `json:"error"`
	}
	JSON401 *struct {
		Error string `json:"error"`
	}
	JSON500 *struct {
		Error string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminCreateAccessRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminCreateAccessRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminDeleteAccessRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *struct {
		Error string `json:"error"`
	}
	JSON404 *struct {
		Error string `json:"error"`
	}
	JSON500 *struct {
		Error string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminDeleteAccessRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminDeleteAccessRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminGetAccessRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccessRule
	JSON401      *struct {
		Error string `json:"error"`
	}
	JSON404 *struct {
		Error string `json:"error"`
	}
	JSON500 *struct {
		Error string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminGetAccessRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminGetAccessRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminUpdateAccessRuleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccessRule
}

// Status returns HTTPResponse.Status
func (r AdminUpdateAccessRuleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminUpdateAccessRuleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminGetDeploymentVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// The deployment version. Will be a semver, such as "v0.9.0" for official releases, or "dev+GIT_HASH" for pre-release builds.
		Version string `json:"version"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminGetDeploymentVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminGetDeploymentVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminListGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Groups []Group `json:"groups"`
		Next   *string `json:"next"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminListGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminListGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminCreateGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Group
	JSON400      *struct {
		Error string `json:"error"`
	}
	JSON401 *struct {
		Error string `json:"error"`
	}
	JSON500 *struct {
		Error string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminCreateGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminCreateGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminDeleteGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *struct {
		Error string `json:"error"`
	}
	JSON500 *struct {
		Error string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminDeleteGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminDeleteGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminGetGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Group
}

// Status returns HTTPResponse.Status
func (r AdminGetGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminGetGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminUpdateGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Group
	JSON400      *struct {
		Error string `json:"error"`
	}
	JSON500 *struct {
		Error string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminUpdateGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminUpdateGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminListHandlersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Next string      `json:"next"`
		Res  []TGHandler `json:"res"`
	}
	JSON401 *struct {
		Error string `json:"error"`
	}
	JSON500 *struct {
		Error string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminListHandlersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminListHandlersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminRegisterHandlerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TGHandler
	JSON400      *struct {
		Error string `json:"error"`
	}
	JSON401 *struct {
		Error string `json:"error"`
	}
	JSON500 *struct {
		Error string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminRegisterHandlerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminRegisterHandlerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminDeleteHandlerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *map[string]interface{}
	JSON401      *struct {
		Error string `json:"error"`
	}
	JSON404 *struct {
		Error string `json:"error"`
	}
	JSON500 *struct {
		Error string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminDeleteHandlerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminDeleteHandlerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminGetHandlerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TGHandler
	JSON401      *struct {
		Error string `json:"error"`
	}
	JSON404 *struct {
		Error string `json:"error"`
	}
	JSON500 *struct {
		Error string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminGetHandlerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminGetHandlerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminHealthcheckHandlersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *struct {
		Error string `json:"error"`
	}
	JSON500 *struct {
		Error string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminHealthcheckHandlersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminHealthcheckHandlersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminGetIdentityConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AdministratorGroupId string `json:"administratorGroupId"`
		IdentityProvider     string `json:"identityProvider"`
	}
	JSON401 *struct {
		Error string `json:"error"`
	}
	JSON500 *struct {
		Error string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminGetIdentityConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminGetIdentityConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminSyncIdentityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *struct {
		Error string `json:"error"`
	}
	JSON500 *struct {
		Error string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminSyncIdentityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminSyncIdentityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminListRequestsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Next     *string   `json:"next"`
		Requests []Request `json:"requests"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminListRequestsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminListRequestsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminListTargetGroupsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		TargetGroups []TargetGroup `json:"targetGroups"`
	}
	JSON401 *struct {
		Error string `json:"error"`
	}
	JSON500 *struct {
		Error string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminListTargetGroupsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminListTargetGroupsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminCreateTargetGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *TargetGroup
	JSON400      *struct {
		Error string `json:"error"`
	}
	JSON401 *struct {
		Error string `json:"error"`
	}
	JSON409 *struct {
		Error string `json:"error"`
	}
	JSON500 *struct {
		Error string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminCreateTargetGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminCreateTargetGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminDeleteTargetGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *struct {
		Error string `json:"error"`
	}
	JSON404 *struct {
		Error string `json:"error"`
	}
	JSON500 *struct {
		Error string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminDeleteTargetGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminDeleteTargetGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminGetTargetGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TargetGroup
	JSON401      *struct {
		Error string `json:"error"`
	}
	JSON404 *struct {
		Error string `json:"error"`
	}
	JSON500 *struct {
		Error string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminGetTargetGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminGetTargetGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminCreateTargetGroupLinkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TargetRoute
	JSON400      *struct {
		Error string `json:"error"`
	}
	JSON401 *struct {
		Error string `json:"error"`
	}
	JSON404 *struct {
		Error string `json:"error"`
	}
	JSON500 *struct {
		Error string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminCreateTargetGroupLinkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminCreateTargetGroupLinkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminGetTargetGroupResourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]TargetGroupResource
	JSON401      *struct {
		Error string `json:"error"`
	}
	JSON404 *struct {
		Error string `json:"error"`
	}
	JSON500 *struct {
		Error string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminGetTargetGroupResourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminGetTargetGroupResourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminFilterTargetGroupResourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]TargetGroupResource
}

// Status returns HTTPResponse.Status
func (r AdminFilterTargetGroupResourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminFilterTargetGroupResourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminListTargetRoutesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Next   *string       `json:"next,omitempty"`
		Routes []TargetRoute `json:"routes"`
	}
	JSON404 *struct {
		Error string `json:"error"`
	}
	JSON500 *struct {
		Error string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminListTargetRoutesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminListTargetRoutesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminRemoveTargetGroupLinkResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		Error string `json:"error"`
	}
	JSON401 *struct {
		Error string `json:"error"`
	}
	JSON404 *struct {
		Error string `json:"error"`
	}
	JSON500 *struct {
		Error string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminRemoveTargetGroupLinkResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminRemoveTargetGroupLinkResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminListUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Next  *string `json:"next"`
		Users []User  `json:"users"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminListUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminListUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminCreateUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *User
	JSON400      *struct {
		Error string `json:"error"`
	}
	JSON401 *struct {
		Error string `json:"error"`
	}
	JSON500 *struct {
		Error string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminCreateUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminCreateUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminUpdateUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
	JSON400      *struct {
		Error string `json:"error"`
	}
	JSON401 *struct {
		Error string `json:"error"`
	}
	JSON500 *struct {
		Error string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminUpdateUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminUpdateUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserListEntitlementsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Entitlements []TargetKind `json:"entitlements"`
	}
	JSON500 *struct {
		Error string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r UserListEntitlementsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserListEntitlementsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserListEntitlementTargetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Next    *string  `json:"next,omitempty"`
		Targets []Target `json:"targets"`
	}
	JSON400 *struct {
		Error string `json:"error"`
	}
	JSON404 *struct {
		Error string `json:"error"`
	}
	JSON500 *struct {
		Error string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r UserListEntitlementTargetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserListEntitlementTargetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserRequestPreflightResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Preflight
	JSON400      *struct {
		Error string `json:"error"`
	}
	JSON401 *struct {
		Error string `json:"error"`
	}
	JSON404 *struct {
		Error string `json:"error"`
	}
	JSON500 *struct {
		Error string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r UserRequestPreflightResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserRequestPreflightResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserListRequestsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Next     *string   `json:"next"`
		Requests []Request `json:"requests"`
	}
	JSON500 *struct {
		Error string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r UserListRequestsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserListRequestsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserPostRequestsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Request
	JSON404      *struct {
		Error string `json:"error"`
	}
	JSON500 *struct {
		Error string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r UserPostRequestsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserPostRequestsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserGetRequestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Request
	JSON404      *struct {
		Error string `json:"error"`
	}
	JSON500 *struct {
		Error string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r UserGetRequestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserGetRequestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserReviewRequestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// A request to access something made by an end user in Common Fate.
		Request *Request `json:"request,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r UserReviewRequestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserReviewRequestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserRevokeRequestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		Error string `json:"error"`
	}
	JSON404 *struct {
		Error string `json:"error"`
	}
	JSON500 *struct {
		Error string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r UserRevokeRequestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserRevokeRequestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserListReviewsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Next     *string   `json:"next"`
		Requests []Request `json:"requests"`
	}
	JSON500 *struct {
		Error string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r UserListReviewsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserListReviewsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserGetMeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Whether the user is an administrator of Common Fate.
		IsAdmin bool `json:"isAdmin"`
		User    User `json:"user"`
	}
}

// Status returns HTTPResponse.Status
func (r UserGetMeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserGetMeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UserGetUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r UserGetUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UserGetUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// AdminListAccessRulesWithResponse request returning *AdminListAccessRulesResponse
func (c *ClientWithResponses) AdminListAccessRulesWithResponse(ctx context.Context, params *AdminListAccessRulesParams, reqEditors ...RequestEditorFn) (*AdminListAccessRulesResponse, error) {
	rsp, err := c.AdminListAccessRules(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminListAccessRulesResponse(rsp)
}

// AdminCreateAccessRuleWithBodyWithResponse request with arbitrary body returning *AdminCreateAccessRuleResponse
func (c *ClientWithResponses) AdminCreateAccessRuleWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminCreateAccessRuleResponse, error) {
	rsp, err := c.AdminCreateAccessRuleWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminCreateAccessRuleResponse(rsp)
}

func (c *ClientWithResponses) AdminCreateAccessRuleWithResponse(ctx context.Context, body AdminCreateAccessRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminCreateAccessRuleResponse, error) {
	rsp, err := c.AdminCreateAccessRule(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminCreateAccessRuleResponse(rsp)
}

// AdminDeleteAccessRuleWithResponse request returning *AdminDeleteAccessRuleResponse
func (c *ClientWithResponses) AdminDeleteAccessRuleWithResponse(ctx context.Context, ruleId string, reqEditors ...RequestEditorFn) (*AdminDeleteAccessRuleResponse, error) {
	rsp, err := c.AdminDeleteAccessRule(ctx, ruleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminDeleteAccessRuleResponse(rsp)
}

// AdminGetAccessRuleWithResponse request returning *AdminGetAccessRuleResponse
func (c *ClientWithResponses) AdminGetAccessRuleWithResponse(ctx context.Context, ruleId string, reqEditors ...RequestEditorFn) (*AdminGetAccessRuleResponse, error) {
	rsp, err := c.AdminGetAccessRule(ctx, ruleId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminGetAccessRuleResponse(rsp)
}

// AdminUpdateAccessRuleWithBodyWithResponse request with arbitrary body returning *AdminUpdateAccessRuleResponse
func (c *ClientWithResponses) AdminUpdateAccessRuleWithBodyWithResponse(ctx context.Context, ruleId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminUpdateAccessRuleResponse, error) {
	rsp, err := c.AdminUpdateAccessRuleWithBody(ctx, ruleId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminUpdateAccessRuleResponse(rsp)
}

func (c *ClientWithResponses) AdminUpdateAccessRuleWithResponse(ctx context.Context, ruleId string, body AdminUpdateAccessRuleJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminUpdateAccessRuleResponse, error) {
	rsp, err := c.AdminUpdateAccessRule(ctx, ruleId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminUpdateAccessRuleResponse(rsp)
}

// AdminGetDeploymentVersionWithResponse request returning *AdminGetDeploymentVersionResponse
func (c *ClientWithResponses) AdminGetDeploymentVersionWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AdminGetDeploymentVersionResponse, error) {
	rsp, err := c.AdminGetDeploymentVersion(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminGetDeploymentVersionResponse(rsp)
}

// AdminListGroupsWithResponse request returning *AdminListGroupsResponse
func (c *ClientWithResponses) AdminListGroupsWithResponse(ctx context.Context, params *AdminListGroupsParams, reqEditors ...RequestEditorFn) (*AdminListGroupsResponse, error) {
	rsp, err := c.AdminListGroups(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminListGroupsResponse(rsp)
}

// AdminCreateGroupWithBodyWithResponse request with arbitrary body returning *AdminCreateGroupResponse
func (c *ClientWithResponses) AdminCreateGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminCreateGroupResponse, error) {
	rsp, err := c.AdminCreateGroupWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminCreateGroupResponse(rsp)
}

func (c *ClientWithResponses) AdminCreateGroupWithResponse(ctx context.Context, body AdminCreateGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminCreateGroupResponse, error) {
	rsp, err := c.AdminCreateGroup(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminCreateGroupResponse(rsp)
}

// AdminDeleteGroupWithResponse request returning *AdminDeleteGroupResponse
func (c *ClientWithResponses) AdminDeleteGroupWithResponse(ctx context.Context, groupId string, reqEditors ...RequestEditorFn) (*AdminDeleteGroupResponse, error) {
	rsp, err := c.AdminDeleteGroup(ctx, groupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminDeleteGroupResponse(rsp)
}

// AdminGetGroupWithResponse request returning *AdminGetGroupResponse
func (c *ClientWithResponses) AdminGetGroupWithResponse(ctx context.Context, groupId string, reqEditors ...RequestEditorFn) (*AdminGetGroupResponse, error) {
	rsp, err := c.AdminGetGroup(ctx, groupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminGetGroupResponse(rsp)
}

// AdminUpdateGroupWithBodyWithResponse request with arbitrary body returning *AdminUpdateGroupResponse
func (c *ClientWithResponses) AdminUpdateGroupWithBodyWithResponse(ctx context.Context, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminUpdateGroupResponse, error) {
	rsp, err := c.AdminUpdateGroupWithBody(ctx, groupId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminUpdateGroupResponse(rsp)
}

func (c *ClientWithResponses) AdminUpdateGroupWithResponse(ctx context.Context, groupId string, body AdminUpdateGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminUpdateGroupResponse, error) {
	rsp, err := c.AdminUpdateGroup(ctx, groupId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminUpdateGroupResponse(rsp)
}

// AdminListHandlersWithResponse request returning *AdminListHandlersResponse
func (c *ClientWithResponses) AdminListHandlersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AdminListHandlersResponse, error) {
	rsp, err := c.AdminListHandlers(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminListHandlersResponse(rsp)
}

// AdminRegisterHandlerWithBodyWithResponse request with arbitrary body returning *AdminRegisterHandlerResponse
func (c *ClientWithResponses) AdminRegisterHandlerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminRegisterHandlerResponse, error) {
	rsp, err := c.AdminRegisterHandlerWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminRegisterHandlerResponse(rsp)
}

func (c *ClientWithResponses) AdminRegisterHandlerWithResponse(ctx context.Context, body AdminRegisterHandlerJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminRegisterHandlerResponse, error) {
	rsp, err := c.AdminRegisterHandler(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminRegisterHandlerResponse(rsp)
}

// AdminDeleteHandlerWithResponse request returning *AdminDeleteHandlerResponse
func (c *ClientWithResponses) AdminDeleteHandlerWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*AdminDeleteHandlerResponse, error) {
	rsp, err := c.AdminDeleteHandler(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminDeleteHandlerResponse(rsp)
}

// AdminGetHandlerWithResponse request returning *AdminGetHandlerResponse
func (c *ClientWithResponses) AdminGetHandlerWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*AdminGetHandlerResponse, error) {
	rsp, err := c.AdminGetHandler(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminGetHandlerResponse(rsp)
}

// AdminHealthcheckHandlersWithResponse request returning *AdminHealthcheckHandlersResponse
func (c *ClientWithResponses) AdminHealthcheckHandlersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AdminHealthcheckHandlersResponse, error) {
	rsp, err := c.AdminHealthcheckHandlers(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminHealthcheckHandlersResponse(rsp)
}

// AdminGetIdentityConfigurationWithResponse request returning *AdminGetIdentityConfigurationResponse
func (c *ClientWithResponses) AdminGetIdentityConfigurationWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AdminGetIdentityConfigurationResponse, error) {
	rsp, err := c.AdminGetIdentityConfiguration(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminGetIdentityConfigurationResponse(rsp)
}

// AdminSyncIdentityWithResponse request returning *AdminSyncIdentityResponse
func (c *ClientWithResponses) AdminSyncIdentityWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AdminSyncIdentityResponse, error) {
	rsp, err := c.AdminSyncIdentity(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminSyncIdentityResponse(rsp)
}

// AdminListRequestsWithResponse request returning *AdminListRequestsResponse
func (c *ClientWithResponses) AdminListRequestsWithResponse(ctx context.Context, params *AdminListRequestsParams, reqEditors ...RequestEditorFn) (*AdminListRequestsResponse, error) {
	rsp, err := c.AdminListRequests(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminListRequestsResponse(rsp)
}

// AdminListTargetGroupsWithResponse request returning *AdminListTargetGroupsResponse
func (c *ClientWithResponses) AdminListTargetGroupsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AdminListTargetGroupsResponse, error) {
	rsp, err := c.AdminListTargetGroups(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminListTargetGroupsResponse(rsp)
}

// AdminCreateTargetGroupWithBodyWithResponse request with arbitrary body returning *AdminCreateTargetGroupResponse
func (c *ClientWithResponses) AdminCreateTargetGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminCreateTargetGroupResponse, error) {
	rsp, err := c.AdminCreateTargetGroupWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminCreateTargetGroupResponse(rsp)
}

func (c *ClientWithResponses) AdminCreateTargetGroupWithResponse(ctx context.Context, body AdminCreateTargetGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminCreateTargetGroupResponse, error) {
	rsp, err := c.AdminCreateTargetGroup(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminCreateTargetGroupResponse(rsp)
}

// AdminDeleteTargetGroupWithResponse request returning *AdminDeleteTargetGroupResponse
func (c *ClientWithResponses) AdminDeleteTargetGroupWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*AdminDeleteTargetGroupResponse, error) {
	rsp, err := c.AdminDeleteTargetGroup(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminDeleteTargetGroupResponse(rsp)
}

// AdminGetTargetGroupWithResponse request returning *AdminGetTargetGroupResponse
func (c *ClientWithResponses) AdminGetTargetGroupWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*AdminGetTargetGroupResponse, error) {
	rsp, err := c.AdminGetTargetGroup(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminGetTargetGroupResponse(rsp)
}

// AdminCreateTargetGroupLinkWithBodyWithResponse request with arbitrary body returning *AdminCreateTargetGroupLinkResponse
func (c *ClientWithResponses) AdminCreateTargetGroupLinkWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminCreateTargetGroupLinkResponse, error) {
	rsp, err := c.AdminCreateTargetGroupLinkWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminCreateTargetGroupLinkResponse(rsp)
}

func (c *ClientWithResponses) AdminCreateTargetGroupLinkWithResponse(ctx context.Context, id string, body AdminCreateTargetGroupLinkJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminCreateTargetGroupLinkResponse, error) {
	rsp, err := c.AdminCreateTargetGroupLink(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminCreateTargetGroupLinkResponse(rsp)
}

// AdminGetTargetGroupResourcesWithResponse request returning *AdminGetTargetGroupResourcesResponse
func (c *ClientWithResponses) AdminGetTargetGroupResourcesWithResponse(ctx context.Context, id string, resourceType string, reqEditors ...RequestEditorFn) (*AdminGetTargetGroupResourcesResponse, error) {
	rsp, err := c.AdminGetTargetGroupResources(ctx, id, resourceType, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminGetTargetGroupResourcesResponse(rsp)
}

// AdminFilterTargetGroupResourcesWithBodyWithResponse request with arbitrary body returning *AdminFilterTargetGroupResourcesResponse
func (c *ClientWithResponses) AdminFilterTargetGroupResourcesWithBodyWithResponse(ctx context.Context, id string, resourceType string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminFilterTargetGroupResourcesResponse, error) {
	rsp, err := c.AdminFilterTargetGroupResourcesWithBody(ctx, id, resourceType, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminFilterTargetGroupResourcesResponse(rsp)
}

func (c *ClientWithResponses) AdminFilterTargetGroupResourcesWithResponse(ctx context.Context, id string, resourceType string, body AdminFilterTargetGroupResourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminFilterTargetGroupResourcesResponse, error) {
	rsp, err := c.AdminFilterTargetGroupResources(ctx, id, resourceType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminFilterTargetGroupResourcesResponse(rsp)
}

// AdminListTargetRoutesWithResponse request returning *AdminListTargetRoutesResponse
func (c *ClientWithResponses) AdminListTargetRoutesWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*AdminListTargetRoutesResponse, error) {
	rsp, err := c.AdminListTargetRoutes(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminListTargetRoutesResponse(rsp)
}

// AdminRemoveTargetGroupLinkWithResponse request returning *AdminRemoveTargetGroupLinkResponse
func (c *ClientWithResponses) AdminRemoveTargetGroupLinkWithResponse(ctx context.Context, id string, params *AdminRemoveTargetGroupLinkParams, reqEditors ...RequestEditorFn) (*AdminRemoveTargetGroupLinkResponse, error) {
	rsp, err := c.AdminRemoveTargetGroupLink(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminRemoveTargetGroupLinkResponse(rsp)
}

// AdminListUsersWithResponse request returning *AdminListUsersResponse
func (c *ClientWithResponses) AdminListUsersWithResponse(ctx context.Context, params *AdminListUsersParams, reqEditors ...RequestEditorFn) (*AdminListUsersResponse, error) {
	rsp, err := c.AdminListUsers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminListUsersResponse(rsp)
}

// AdminCreateUserWithBodyWithResponse request with arbitrary body returning *AdminCreateUserResponse
func (c *ClientWithResponses) AdminCreateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminCreateUserResponse, error) {
	rsp, err := c.AdminCreateUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminCreateUserResponse(rsp)
}

func (c *ClientWithResponses) AdminCreateUserWithResponse(ctx context.Context, body AdminCreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminCreateUserResponse, error) {
	rsp, err := c.AdminCreateUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminCreateUserResponse(rsp)
}

// AdminUpdateUserWithBodyWithResponse request with arbitrary body returning *AdminUpdateUserResponse
func (c *ClientWithResponses) AdminUpdateUserWithBodyWithResponse(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminUpdateUserResponse, error) {
	rsp, err := c.AdminUpdateUserWithBody(ctx, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminUpdateUserResponse(rsp)
}

func (c *ClientWithResponses) AdminUpdateUserWithResponse(ctx context.Context, userId string, body AdminUpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*AdminUpdateUserResponse, error) {
	rsp, err := c.AdminUpdateUser(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminUpdateUserResponse(rsp)
}

// UserListEntitlementsWithResponse request returning *UserListEntitlementsResponse
func (c *ClientWithResponses) UserListEntitlementsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UserListEntitlementsResponse, error) {
	rsp, err := c.UserListEntitlements(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserListEntitlementsResponse(rsp)
}

// UserListEntitlementTargetsWithResponse request returning *UserListEntitlementTargetsResponse
func (c *ClientWithResponses) UserListEntitlementTargetsWithResponse(ctx context.Context, params *UserListEntitlementTargetsParams, reqEditors ...RequestEditorFn) (*UserListEntitlementTargetsResponse, error) {
	rsp, err := c.UserListEntitlementTargets(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserListEntitlementTargetsResponse(rsp)
}

// UserRequestPreflightWithBodyWithResponse request with arbitrary body returning *UserRequestPreflightResponse
func (c *ClientWithResponses) UserRequestPreflightWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UserRequestPreflightResponse, error) {
	rsp, err := c.UserRequestPreflightWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserRequestPreflightResponse(rsp)
}

func (c *ClientWithResponses) UserRequestPreflightWithResponse(ctx context.Context, body UserRequestPreflightJSONRequestBody, reqEditors ...RequestEditorFn) (*UserRequestPreflightResponse, error) {
	rsp, err := c.UserRequestPreflight(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserRequestPreflightResponse(rsp)
}

// UserListRequestsWithResponse request returning *UserListRequestsResponse
func (c *ClientWithResponses) UserListRequestsWithResponse(ctx context.Context, params *UserListRequestsParams, reqEditors ...RequestEditorFn) (*UserListRequestsResponse, error) {
	rsp, err := c.UserListRequests(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserListRequestsResponse(rsp)
}

// UserPostRequestsWithBodyWithResponse request with arbitrary body returning *UserPostRequestsResponse
func (c *ClientWithResponses) UserPostRequestsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UserPostRequestsResponse, error) {
	rsp, err := c.UserPostRequestsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserPostRequestsResponse(rsp)
}

func (c *ClientWithResponses) UserPostRequestsWithResponse(ctx context.Context, body UserPostRequestsJSONRequestBody, reqEditors ...RequestEditorFn) (*UserPostRequestsResponse, error) {
	rsp, err := c.UserPostRequests(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserPostRequestsResponse(rsp)
}

// UserGetRequestWithResponse request returning *UserGetRequestResponse
func (c *ClientWithResponses) UserGetRequestWithResponse(ctx context.Context, requestId string, reqEditors ...RequestEditorFn) (*UserGetRequestResponse, error) {
	rsp, err := c.UserGetRequest(ctx, requestId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserGetRequestResponse(rsp)
}

// UserReviewRequestWithBodyWithResponse request with arbitrary body returning *UserReviewRequestResponse
func (c *ClientWithResponses) UserReviewRequestWithBodyWithResponse(ctx context.Context, requestId string, groupId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UserReviewRequestResponse, error) {
	rsp, err := c.UserReviewRequestWithBody(ctx, requestId, groupId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserReviewRequestResponse(rsp)
}

func (c *ClientWithResponses) UserReviewRequestWithResponse(ctx context.Context, requestId string, groupId string, body UserReviewRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*UserReviewRequestResponse, error) {
	rsp, err := c.UserReviewRequest(ctx, requestId, groupId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserReviewRequestResponse(rsp)
}

// UserRevokeRequestWithResponse request returning *UserRevokeRequestResponse
func (c *ClientWithResponses) UserRevokeRequestWithResponse(ctx context.Context, requestid string, reqEditors ...RequestEditorFn) (*UserRevokeRequestResponse, error) {
	rsp, err := c.UserRevokeRequest(ctx, requestid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserRevokeRequestResponse(rsp)
}

// UserListReviewsWithResponse request returning *UserListReviewsResponse
func (c *ClientWithResponses) UserListReviewsWithResponse(ctx context.Context, params *UserListReviewsParams, reqEditors ...RequestEditorFn) (*UserListReviewsResponse, error) {
	rsp, err := c.UserListReviews(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserListReviewsResponse(rsp)
}

// UserGetMeWithResponse request returning *UserGetMeResponse
func (c *ClientWithResponses) UserGetMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*UserGetMeResponse, error) {
	rsp, err := c.UserGetMe(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserGetMeResponse(rsp)
}

// UserGetUserWithResponse request returning *UserGetUserResponse
func (c *ClientWithResponses) UserGetUserWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*UserGetUserResponse, error) {
	rsp, err := c.UserGetUser(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUserGetUserResponse(rsp)
}

// ParseAdminListAccessRulesResponse parses an HTTP response from a AdminListAccessRulesWithResponse call
func ParseAdminListAccessRulesResponse(rsp *http.Response) (*AdminListAccessRulesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminListAccessRulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AccessRules []AccessRule `json:"accessRules"`
			Next        *string      `json:"next"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAdminCreateAccessRuleResponse parses an HTTP response from a AdminCreateAccessRuleWithResponse call
func ParseAdminCreateAccessRuleResponse(rsp *http.Response) (*AdminCreateAccessRuleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminCreateAccessRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AccessRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAdminDeleteAccessRuleResponse parses an HTTP response from a AdminDeleteAccessRuleWithResponse call
func ParseAdminDeleteAccessRuleResponse(rsp *http.Response) (*AdminDeleteAccessRuleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminDeleteAccessRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAdminGetAccessRuleResponse parses an HTTP response from a AdminGetAccessRuleWithResponse call
func ParseAdminGetAccessRuleResponse(rsp *http.Response) (*AdminGetAccessRuleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminGetAccessRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccessRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAdminUpdateAccessRuleResponse parses an HTTP response from a AdminUpdateAccessRuleWithResponse call
func ParseAdminUpdateAccessRuleResponse(rsp *http.Response) (*AdminUpdateAccessRuleResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminUpdateAccessRuleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccessRule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAdminGetDeploymentVersionResponse parses an HTTP response from a AdminGetDeploymentVersionWithResponse call
func ParseAdminGetDeploymentVersionResponse(rsp *http.Response) (*AdminGetDeploymentVersionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminGetDeploymentVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// The deployment version. Will be a semver, such as "v0.9.0" for official releases, or "dev+GIT_HASH" for pre-release builds.
			Version string `json:"version"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAdminListGroupsResponse parses an HTTP response from a AdminListGroupsWithResponse call
func ParseAdminListGroupsResponse(rsp *http.Response) (*AdminListGroupsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminListGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Groups []Group `json:"groups"`
			Next   *string `json:"next"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAdminCreateGroupResponse parses an HTTP response from a AdminCreateGroupWithResponse call
func ParseAdminCreateGroupResponse(rsp *http.Response) (*AdminCreateGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminCreateGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Group
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAdminDeleteGroupResponse parses an HTTP response from a AdminDeleteGroupWithResponse call
func ParseAdminDeleteGroupResponse(rsp *http.Response) (*AdminDeleteGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminDeleteGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAdminGetGroupResponse parses an HTTP response from a AdminGetGroupWithResponse call
func ParseAdminGetGroupResponse(rsp *http.Response) (*AdminGetGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminGetGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Group
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAdminUpdateGroupResponse parses an HTTP response from a AdminUpdateGroupWithResponse call
func ParseAdminUpdateGroupResponse(rsp *http.Response) (*AdminUpdateGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminUpdateGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Group
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAdminListHandlersResponse parses an HTTP response from a AdminListHandlersWithResponse call
func ParseAdminListHandlersResponse(rsp *http.Response) (*AdminListHandlersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminListHandlersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Next string      `json:"next"`
			Res  []TGHandler `json:"res"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAdminRegisterHandlerResponse parses an HTTP response from a AdminRegisterHandlerWithResponse call
func ParseAdminRegisterHandlerResponse(rsp *http.Response) (*AdminRegisterHandlerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminRegisterHandlerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TGHandler
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAdminDeleteHandlerResponse parses an HTTP response from a AdminDeleteHandlerWithResponse call
func ParseAdminDeleteHandlerResponse(rsp *http.Response) (*AdminDeleteHandlerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminDeleteHandlerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAdminGetHandlerResponse parses an HTTP response from a AdminGetHandlerWithResponse call
func ParseAdminGetHandlerResponse(rsp *http.Response) (*AdminGetHandlerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminGetHandlerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TGHandler
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAdminHealthcheckHandlersResponse parses an HTTP response from a AdminHealthcheckHandlersWithResponse call
func ParseAdminHealthcheckHandlersResponse(rsp *http.Response) (*AdminHealthcheckHandlersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminHealthcheckHandlersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAdminGetIdentityConfigurationResponse parses an HTTP response from a AdminGetIdentityConfigurationWithResponse call
func ParseAdminGetIdentityConfigurationResponse(rsp *http.Response) (*AdminGetIdentityConfigurationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminGetIdentityConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AdministratorGroupId string `json:"administratorGroupId"`
			IdentityProvider     string `json:"identityProvider"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAdminSyncIdentityResponse parses an HTTP response from a AdminSyncIdentityWithResponse call
func ParseAdminSyncIdentityResponse(rsp *http.Response) (*AdminSyncIdentityResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminSyncIdentityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAdminListRequestsResponse parses an HTTP response from a AdminListRequestsWithResponse call
func ParseAdminListRequestsResponse(rsp *http.Response) (*AdminListRequestsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminListRequestsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Next     *string   `json:"next"`
			Requests []Request `json:"requests"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAdminListTargetGroupsResponse parses an HTTP response from a AdminListTargetGroupsWithResponse call
func ParseAdminListTargetGroupsResponse(rsp *http.Response) (*AdminListTargetGroupsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminListTargetGroupsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			TargetGroups []TargetGroup `json:"targetGroups"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAdminCreateTargetGroupResponse parses an HTTP response from a AdminCreateTargetGroupWithResponse call
func ParseAdminCreateTargetGroupResponse(rsp *http.Response) (*AdminCreateTargetGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminCreateTargetGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest TargetGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAdminDeleteTargetGroupResponse parses an HTTP response from a AdminDeleteTargetGroupWithResponse call
func ParseAdminDeleteTargetGroupResponse(rsp *http.Response) (*AdminDeleteTargetGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminDeleteTargetGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAdminGetTargetGroupResponse parses an HTTP response from a AdminGetTargetGroupWithResponse call
func ParseAdminGetTargetGroupResponse(rsp *http.Response) (*AdminGetTargetGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminGetTargetGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TargetGroup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAdminCreateTargetGroupLinkResponse parses an HTTP response from a AdminCreateTargetGroupLinkWithResponse call
func ParseAdminCreateTargetGroupLinkResponse(rsp *http.Response) (*AdminCreateTargetGroupLinkResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminCreateTargetGroupLinkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TargetRoute
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAdminGetTargetGroupResourcesResponse parses an HTTP response from a AdminGetTargetGroupResourcesWithResponse call
func ParseAdminGetTargetGroupResourcesResponse(rsp *http.Response) (*AdminGetTargetGroupResourcesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminGetTargetGroupResourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TargetGroupResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAdminFilterTargetGroupResourcesResponse parses an HTTP response from a AdminFilterTargetGroupResourcesWithResponse call
func ParseAdminFilterTargetGroupResourcesResponse(rsp *http.Response) (*AdminFilterTargetGroupResourcesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminFilterTargetGroupResourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TargetGroupResource
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAdminListTargetRoutesResponse parses an HTTP response from a AdminListTargetRoutesWithResponse call
func ParseAdminListTargetRoutesResponse(rsp *http.Response) (*AdminListTargetRoutesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminListTargetRoutesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Next   *string       `json:"next,omitempty"`
			Routes []TargetRoute `json:"routes"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAdminRemoveTargetGroupLinkResponse parses an HTTP response from a AdminRemoveTargetGroupLinkWithResponse call
func ParseAdminRemoveTargetGroupLinkResponse(rsp *http.Response) (*AdminRemoveTargetGroupLinkResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminRemoveTargetGroupLinkResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAdminListUsersResponse parses an HTTP response from a AdminListUsersWithResponse call
func ParseAdminListUsersResponse(rsp *http.Response) (*AdminListUsersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminListUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Next  *string `json:"next"`
			Users []User  `json:"users"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAdminCreateUserResponse parses an HTTP response from a AdminCreateUserWithResponse call
func ParseAdminCreateUserResponse(rsp *http.Response) (*AdminCreateUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminCreateUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAdminUpdateUserResponse parses an HTTP response from a AdminUpdateUserWithResponse call
func ParseAdminUpdateUserResponse(rsp *http.Response) (*AdminUpdateUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminUpdateUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUserListEntitlementsResponse parses an HTTP response from a UserListEntitlementsWithResponse call
func ParseUserListEntitlementsResponse(rsp *http.Response) (*UserListEntitlementsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserListEntitlementsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Entitlements []TargetKind `json:"entitlements"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUserListEntitlementTargetsResponse parses an HTTP response from a UserListEntitlementTargetsWithResponse call
func ParseUserListEntitlementTargetsResponse(rsp *http.Response) (*UserListEntitlementTargetsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserListEntitlementTargetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Next    *string  `json:"next,omitempty"`
			Targets []Target `json:"targets"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUserRequestPreflightResponse parses an HTTP response from a UserRequestPreflightWithResponse call
func ParseUserRequestPreflightResponse(rsp *http.Response) (*UserRequestPreflightResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserRequestPreflightResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Preflight
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUserListRequestsResponse parses an HTTP response from a UserListRequestsWithResponse call
func ParseUserListRequestsResponse(rsp *http.Response) (*UserListRequestsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserListRequestsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Next     *string   `json:"next"`
			Requests []Request `json:"requests"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUserPostRequestsResponse parses an HTTP response from a UserPostRequestsWithResponse call
func ParseUserPostRequestsResponse(rsp *http.Response) (*UserPostRequestsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserPostRequestsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Request
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUserGetRequestResponse parses an HTTP response from a UserGetRequestWithResponse call
func ParseUserGetRequestResponse(rsp *http.Response) (*UserGetRequestResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserGetRequestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Request
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUserReviewRequestResponse parses an HTTP response from a UserReviewRequestWithResponse call
func ParseUserReviewRequestResponse(rsp *http.Response) (*UserReviewRequestResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserReviewRequestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// A request to access something made by an end user in Common Fate.
			Request *Request `json:"request,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUserRevokeRequestResponse parses an HTTP response from a UserRevokeRequestWithResponse call
func ParseUserRevokeRequestResponse(rsp *http.Response) (*UserRevokeRequestResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserRevokeRequestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUserListReviewsResponse parses an HTTP response from a UserListReviewsWithResponse call
func ParseUserListReviewsResponse(rsp *http.Response) (*UserListReviewsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserListReviewsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Next     *string   `json:"next"`
			Requests []Request `json:"requests"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUserGetMeResponse parses an HTTP response from a UserGetMeWithResponse call
func ParseUserGetMeResponse(rsp *http.Response) (*UserGetMeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserGetMeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Whether the user is an administrator of Common Fate.
			IsAdmin bool `json:"isAdmin"`
			User    User `json:"user"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUserGetUserResponse parses an HTTP response from a UserGetUserWithResponse call
func ParseUserGetUserResponse(rsp *http.Response) (*UserGetUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UserGetUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List Access Rules
	// (GET /api/v1/admin/access-rules)
	AdminListAccessRules(w http.ResponseWriter, r *http.Request, params AdminListAccessRulesParams)
	// Create Access Rule
	// (POST /api/v1/admin/access-rules)
	AdminCreateAccessRule(w http.ResponseWriter, r *http.Request)
	// Delete Access Rule
	// (DELETE /api/v1/admin/access-rules/{ruleId})
	AdminDeleteAccessRule(w http.ResponseWriter, r *http.Request, ruleId string)
	// Get Access Rule
	// (GET /api/v1/admin/access-rules/{ruleId})
	AdminGetAccessRule(w http.ResponseWriter, r *http.Request, ruleId string)
	// Update Access Rule
	// (PUT /api/v1/admin/access-rules/{ruleId})
	AdminUpdateAccessRule(w http.ResponseWriter, r *http.Request, ruleId string)
	// Get deployment version details
	// (GET /api/v1/admin/deployment/version)
	AdminGetDeploymentVersion(w http.ResponseWriter, r *http.Request)
	// List groups
	// (GET /api/v1/admin/groups)
	AdminListGroups(w http.ResponseWriter, r *http.Request, params AdminListGroupsParams)
	// Create Group
	// (POST /api/v1/admin/groups)
	AdminCreateGroup(w http.ResponseWriter, r *http.Request)
	// Delete Group
	// (DELETE /api/v1/admin/groups/{groupId})
	AdminDeleteGroup(w http.ResponseWriter, r *http.Request, groupId string)
	// Get Group Details
	// (GET /api/v1/admin/groups/{groupId})
	AdminGetGroup(w http.ResponseWriter, r *http.Request, groupId string)
	// Update Group
	// (PUT /api/v1/admin/groups/{groupId})
	AdminUpdateGroup(w http.ResponseWriter, r *http.Request, groupId string)
	// Get handlers
	// (GET /api/v1/admin/handlers)
	AdminListHandlers(w http.ResponseWriter, r *http.Request)
	// Register a handler
	// (POST /api/v1/admin/handlers)
	AdminRegisterHandler(w http.ResponseWriter, r *http.Request)

	// (DELETE /api/v1/admin/handlers/{id})
	AdminDeleteHandler(w http.ResponseWriter, r *http.Request, id string)
	// Get handler
	// (GET /api/v1/admin/handlers/{id})
	AdminGetHandler(w http.ResponseWriter, r *http.Request, id string)
	// Healthcheck Handlers
	// (POST /api/v1/admin/healthcheck-handlers)
	AdminHealthcheckHandlers(w http.ResponseWriter, r *http.Request)
	// Get identity configuration
	// (GET /api/v1/admin/identity)
	AdminGetIdentityConfiguration(w http.ResponseWriter, r *http.Request)
	// Sync Identity
	// (POST /api/v1/admin/identity/sync)
	AdminSyncIdentity(w http.ResponseWriter, r *http.Request)
	// Your GET endpoint
	// (GET /api/v1/admin/requests)
	AdminListRequests(w http.ResponseWriter, r *http.Request, params AdminListRequestsParams)
	// Get target groups
	// (GET /api/v1/admin/target-groups)
	AdminListTargetGroups(w http.ResponseWriter, r *http.Request)
	// Create target group
	// (POST /api/v1/admin/target-groups)
	AdminCreateTargetGroup(w http.ResponseWriter, r *http.Request)
	// delete target group
	// (DELETE /api/v1/admin/target-groups/{id})
	AdminDeleteTargetGroup(w http.ResponseWriter, r *http.Request, id string)
	// Get target group (detailed)
	// (GET /api/v1/admin/target-groups/{id})
	AdminGetTargetGroup(w http.ResponseWriter, r *http.Request, id string)
	// Link a target group deployment to its target group
	// (POST /api/v1/admin/target-groups/{id}/link)
	AdminCreateTargetGroupLink(w http.ResponseWriter, r *http.Request, id string)
	// List Target Group Resources
	// (GET /api/v1/admin/target-groups/{id}/resources/{resourceType})
	AdminGetTargetGroupResources(w http.ResponseWriter, r *http.Request, id string, resourceType string)
	// Filter TargetGroup Resources
	// (POST /api/v1/admin/target-groups/{id}/resources/{resourceType}/filters)
	AdminFilterTargetGroupResources(w http.ResponseWriter, r *http.Request, id string, resourceType string)

	// (GET /api/v1/admin/target-groups/{id}/routes)
	AdminListTargetRoutes(w http.ResponseWriter, r *http.Request, id string)
	// Unlink a target group deployment from its target group
	// (POST /api/v1/admin/target-groups/{id}/unlink)
	AdminRemoveTargetGroupLink(w http.ResponseWriter, r *http.Request, id string, params AdminRemoveTargetGroupLinkParams)
	// Returns a list of users
	// (GET /api/v1/admin/users)
	AdminListUsers(w http.ResponseWriter, r *http.Request, params AdminListUsersParams)
	// Create User
	// (POST /api/v1/admin/users)
	AdminCreateUser(w http.ResponseWriter, r *http.Request)
	// Update User
	// (POST /api/v1/admin/users/{userId})
	AdminUpdateUser(w http.ResponseWriter, r *http.Request, userId string)
	// List Entitlements
	// (GET /api/v1/entitlements)
	UserListEntitlements(w http.ResponseWriter, r *http.Request)
	// List Entitlement Resources
	// (GET /api/v1/entitlements/targets)
	UserListEntitlementTargets(w http.ResponseWriter, r *http.Request, params UserListEntitlementTargetsParams)
	// Submit Preflight
	// (POST /api/v1/preflight)
	UserRequestPreflight(w http.ResponseWriter, r *http.Request)
	// List Requests
	// (GET /api/v1/requests)
	UserListRequests(w http.ResponseWriter, r *http.Request, params UserListRequestsParams)

	// (POST /api/v1/requests)
	UserPostRequests(w http.ResponseWriter, r *http.Request)
	// Get Request
	// (GET /api/v1/requests/{requestId})
	UserGetRequest(w http.ResponseWriter, r *http.Request, requestId string)
	// Review a request
	// (POST /api/v1/requests/{requestId}/review/{groupId})
	UserReviewRequest(w http.ResponseWriter, r *http.Request, requestId string, groupId string)
	// Revoke an active request
	// (POST /api/v1/requests/{requestid}/revoke)
	UserRevokeRequest(w http.ResponseWriter, r *http.Request, requestid string)
	// List Reviews
	// (GET /api/v1/reviews)
	UserListReviews(w http.ResponseWriter, r *http.Request, params UserListReviewsParams)
	// Get details for the current user
	// (GET /api/v1/users/me)
	UserGetMe(w http.ResponseWriter, r *http.Request)
	// Get a user
	// (GET /api/v1/users/{userId})
	UserGetUser(w http.ResponseWriter, r *http.Request, userId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// AdminListAccessRules operation middleware
func (siw *ServerInterfaceWrapper) AdminListAccessRules(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AdminListAccessRulesParams

	// ------------- Optional query parameter "nextToken" -------------
	if paramValue := r.URL.Query().Get("nextToken"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "nextToken", r.URL.Query(), &params.NextToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nextToken", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminListAccessRules(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminCreateAccessRule operation middleware
func (siw *ServerInterfaceWrapper) AdminCreateAccessRule(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminCreateAccessRule(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminDeleteAccessRule operation middleware
func (siw *ServerInterfaceWrapper) AdminDeleteAccessRule(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ruleId" -------------
	var ruleId string

	err = runtime.BindStyledParameter("simple", false, "ruleId", chi.URLParam(r, "ruleId"), &ruleId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ruleId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminDeleteAccessRule(w, r, ruleId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminGetAccessRule operation middleware
func (siw *ServerInterfaceWrapper) AdminGetAccessRule(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ruleId" -------------
	var ruleId string

	err = runtime.BindStyledParameter("simple", false, "ruleId", chi.URLParam(r, "ruleId"), &ruleId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ruleId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminGetAccessRule(w, r, ruleId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminUpdateAccessRule operation middleware
func (siw *ServerInterfaceWrapper) AdminUpdateAccessRule(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ruleId" -------------
	var ruleId string

	err = runtime.BindStyledParameter("simple", false, "ruleId", chi.URLParam(r, "ruleId"), &ruleId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ruleId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminUpdateAccessRule(w, r, ruleId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminGetDeploymentVersion operation middleware
func (siw *ServerInterfaceWrapper) AdminGetDeploymentVersion(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminGetDeploymentVersion(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminListGroups operation middleware
func (siw *ServerInterfaceWrapper) AdminListGroups(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AdminListGroupsParams

	// ------------- Optional query parameter "nextToken" -------------
	if paramValue := r.URL.Query().Get("nextToken"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "nextToken", r.URL.Query(), &params.NextToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nextToken", Err: err})
		return
	}

	// ------------- Optional query parameter "source" -------------
	if paramValue := r.URL.Query().Get("source"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "source", r.URL.Query(), &params.Source)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "source", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminListGroups(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminCreateGroup operation middleware
func (siw *ServerInterfaceWrapper) AdminCreateGroup(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminCreateGroup(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminDeleteGroup operation middleware
func (siw *ServerInterfaceWrapper) AdminDeleteGroup(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "groupId" -------------
	var groupId string

	err = runtime.BindStyledParameter("simple", false, "groupId", chi.URLParam(r, "groupId"), &groupId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminDeleteGroup(w, r, groupId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminGetGroup operation middleware
func (siw *ServerInterfaceWrapper) AdminGetGroup(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "groupId" -------------
	var groupId string

	err = runtime.BindStyledParameter("simple", false, "groupId", chi.URLParam(r, "groupId"), &groupId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminGetGroup(w, r, groupId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminUpdateGroup operation middleware
func (siw *ServerInterfaceWrapper) AdminUpdateGroup(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "groupId" -------------
	var groupId string

	err = runtime.BindStyledParameter("simple", false, "groupId", chi.URLParam(r, "groupId"), &groupId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminUpdateGroup(w, r, groupId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminListHandlers operation middleware
func (siw *ServerInterfaceWrapper) AdminListHandlers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminListHandlers(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminRegisterHandler operation middleware
func (siw *ServerInterfaceWrapper) AdminRegisterHandler(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminRegisterHandler(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminDeleteHandler operation middleware
func (siw *ServerInterfaceWrapper) AdminDeleteHandler(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminDeleteHandler(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminGetHandler operation middleware
func (siw *ServerInterfaceWrapper) AdminGetHandler(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminGetHandler(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminHealthcheckHandlers operation middleware
func (siw *ServerInterfaceWrapper) AdminHealthcheckHandlers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminHealthcheckHandlers(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminGetIdentityConfiguration operation middleware
func (siw *ServerInterfaceWrapper) AdminGetIdentityConfiguration(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminGetIdentityConfiguration(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminSyncIdentity operation middleware
func (siw *ServerInterfaceWrapper) AdminSyncIdentity(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminSyncIdentity(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminListRequests operation middleware
func (siw *ServerInterfaceWrapper) AdminListRequests(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AdminListRequestsParams

	// ------------- Optional query parameter "status" -------------
	if paramValue := r.URL.Query().Get("status"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	// ------------- Optional query parameter "nextToken" -------------
	if paramValue := r.URL.Query().Get("nextToken"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "nextToken", r.URL.Query(), &params.NextToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nextToken", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminListRequests(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminListTargetGroups operation middleware
func (siw *ServerInterfaceWrapper) AdminListTargetGroups(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminListTargetGroups(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminCreateTargetGroup operation middleware
func (siw *ServerInterfaceWrapper) AdminCreateTargetGroup(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminCreateTargetGroup(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminDeleteTargetGroup operation middleware
func (siw *ServerInterfaceWrapper) AdminDeleteTargetGroup(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminDeleteTargetGroup(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminGetTargetGroup operation middleware
func (siw *ServerInterfaceWrapper) AdminGetTargetGroup(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminGetTargetGroup(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminCreateTargetGroupLink operation middleware
func (siw *ServerInterfaceWrapper) AdminCreateTargetGroupLink(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminCreateTargetGroupLink(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminGetTargetGroupResources operation middleware
func (siw *ServerInterfaceWrapper) AdminGetTargetGroupResources(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// ------------- Path parameter "resourceType" -------------
	var resourceType string

	err = runtime.BindStyledParameter("simple", false, "resourceType", chi.URLParam(r, "resourceType"), &resourceType)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "resourceType", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminGetTargetGroupResources(w, r, id, resourceType)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminFilterTargetGroupResources operation middleware
func (siw *ServerInterfaceWrapper) AdminFilterTargetGroupResources(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// ------------- Path parameter "resourceType" -------------
	var resourceType string

	err = runtime.BindStyledParameter("simple", false, "resourceType", chi.URLParam(r, "resourceType"), &resourceType)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "resourceType", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminFilterTargetGroupResources(w, r, id, resourceType)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminListTargetRoutes operation middleware
func (siw *ServerInterfaceWrapper) AdminListTargetRoutes(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminListTargetRoutes(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminRemoveTargetGroupLink operation middleware
func (siw *ServerInterfaceWrapper) AdminRemoveTargetGroupLink(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params AdminRemoveTargetGroupLinkParams

	// ------------- Required query parameter "deploymentId" -------------
	if paramValue := r.URL.Query().Get("deploymentId"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "deploymentId"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "deploymentId", r.URL.Query(), &params.DeploymentId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "deploymentId", Err: err})
		return
	}

	// ------------- Required query parameter "kind" -------------
	if paramValue := r.URL.Query().Get("kind"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "kind"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "kind", r.URL.Query(), &params.Kind)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "kind", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminRemoveTargetGroupLink(w, r, id, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminListUsers operation middleware
func (siw *ServerInterfaceWrapper) AdminListUsers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AdminListUsersParams

	// ------------- Optional query parameter "nextToken" -------------
	if paramValue := r.URL.Query().Get("nextToken"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "nextToken", r.URL.Query(), &params.NextToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nextToken", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminListUsers(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminCreateUser operation middleware
func (siw *ServerInterfaceWrapper) AdminCreateUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminCreateUser(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminUpdateUser operation middleware
func (siw *ServerInterfaceWrapper) AdminUpdateUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameter("simple", false, "userId", chi.URLParam(r, "userId"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminUpdateUser(w, r, userId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UserListEntitlements operation middleware
func (siw *ServerInterfaceWrapper) UserListEntitlements(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserListEntitlements(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UserListEntitlementTargets operation middleware
func (siw *ServerInterfaceWrapper) UserListEntitlementTargets(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params UserListEntitlementTargetsParams

	// ------------- Optional query parameter "nextToken" -------------
	if paramValue := r.URL.Query().Get("nextToken"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "nextToken", r.URL.Query(), &params.NextToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nextToken", Err: err})
		return
	}

	// ------------- Optional query parameter "kind" -------------
	if paramValue := r.URL.Query().Get("kind"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "kind", r.URL.Query(), &params.Kind)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "kind", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserListEntitlementTargets(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UserRequestPreflight operation middleware
func (siw *ServerInterfaceWrapper) UserRequestPreflight(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserRequestPreflight(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UserListRequests operation middleware
func (siw *ServerInterfaceWrapper) UserListRequests(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params UserListRequestsParams

	// ------------- Optional query parameter "nextToken" -------------
	if paramValue := r.URL.Query().Get("nextToken"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "nextToken", r.URL.Query(), &params.NextToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nextToken", Err: err})
		return
	}

	// ------------- Optional query parameter "filter" -------------
	if paramValue := r.URL.Query().Get("filter"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "filter", r.URL.Query(), &params.Filter)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "filter", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserListRequests(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UserPostRequests operation middleware
func (siw *ServerInterfaceWrapper) UserPostRequests(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserPostRequests(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UserGetRequest operation middleware
func (siw *ServerInterfaceWrapper) UserGetRequest(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "requestId" -------------
	var requestId string

	err = runtime.BindStyledParameter("simple", false, "requestId", chi.URLParam(r, "requestId"), &requestId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserGetRequest(w, r, requestId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UserReviewRequest operation middleware
func (siw *ServerInterfaceWrapper) UserReviewRequest(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "requestId" -------------
	var requestId string

	err = runtime.BindStyledParameter("simple", false, "requestId", chi.URLParam(r, "requestId"), &requestId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestId", Err: err})
		return
	}

	// ------------- Path parameter "groupId" -------------
	var groupId string

	err = runtime.BindStyledParameter("simple", false, "groupId", chi.URLParam(r, "groupId"), &groupId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserReviewRequest(w, r, requestId, groupId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UserRevokeRequest operation middleware
func (siw *ServerInterfaceWrapper) UserRevokeRequest(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "requestid" -------------
	var requestid string

	err = runtime.BindStyledParameter("simple", false, "requestid", chi.URLParam(r, "requestid"), &requestid)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestid", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserRevokeRequest(w, r, requestid)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UserListReviews operation middleware
func (siw *ServerInterfaceWrapper) UserListReviews(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params UserListReviewsParams

	// ------------- Optional query parameter "status" -------------
	if paramValue := r.URL.Query().Get("status"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	// ------------- Optional query parameter "nextToken" -------------
	if paramValue := r.URL.Query().Get("nextToken"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "nextToken", r.URL.Query(), &params.NextToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nextToken", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserListReviews(w, r, params)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UserGetMe operation middleware
func (siw *ServerInterfaceWrapper) UserGetMe(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserGetMe(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UserGetUser operation middleware
func (siw *ServerInterfaceWrapper) UserGetUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameter("simple", false, "userId", chi.URLParam(r, "userId"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserGetUser(w, r, userId)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/access-rules", wrapper.AdminListAccessRules)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/admin/access-rules", wrapper.AdminCreateAccessRule)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/admin/access-rules/{ruleId}", wrapper.AdminDeleteAccessRule)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/access-rules/{ruleId}", wrapper.AdminGetAccessRule)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/admin/access-rules/{ruleId}", wrapper.AdminUpdateAccessRule)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/deployment/version", wrapper.AdminGetDeploymentVersion)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/groups", wrapper.AdminListGroups)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/admin/groups", wrapper.AdminCreateGroup)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/admin/groups/{groupId}", wrapper.AdminDeleteGroup)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/groups/{groupId}", wrapper.AdminGetGroup)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/admin/groups/{groupId}", wrapper.AdminUpdateGroup)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/handlers", wrapper.AdminListHandlers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/admin/handlers", wrapper.AdminRegisterHandler)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/admin/handlers/{id}", wrapper.AdminDeleteHandler)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/handlers/{id}", wrapper.AdminGetHandler)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/admin/healthcheck-handlers", wrapper.AdminHealthcheckHandlers)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/identity", wrapper.AdminGetIdentityConfiguration)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/admin/identity/sync", wrapper.AdminSyncIdentity)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/requests", wrapper.AdminListRequests)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/target-groups", wrapper.AdminListTargetGroups)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/admin/target-groups", wrapper.AdminCreateTargetGroup)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/admin/target-groups/{id}", wrapper.AdminDeleteTargetGroup)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/target-groups/{id}", wrapper.AdminGetTargetGroup)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/admin/target-groups/{id}/link", wrapper.AdminCreateTargetGroupLink)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/target-groups/{id}/resources/{resourceType}", wrapper.AdminGetTargetGroupResources)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/admin/target-groups/{id}/resources/{resourceType}/filters", wrapper.AdminFilterTargetGroupResources)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/target-groups/{id}/routes", wrapper.AdminListTargetRoutes)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/admin/target-groups/{id}/unlink", wrapper.AdminRemoveTargetGroupLink)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/users", wrapper.AdminListUsers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/admin/users", wrapper.AdminCreateUser)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/admin/users/{userId}", wrapper.AdminUpdateUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/entitlements", wrapper.UserListEntitlements)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/entitlements/targets", wrapper.UserListEntitlementTargets)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/preflight", wrapper.UserRequestPreflight)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/requests", wrapper.UserListRequests)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/requests", wrapper.UserPostRequests)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/requests/{requestId}", wrapper.UserGetRequest)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/requests/{requestId}/review/{groupId}", wrapper.UserReviewRequest)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/requests/{requestid}/revoke", wrapper.UserRevokeRequest)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/reviews", wrapper.UserListReviews)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/users/me", wrapper.UserGetMe)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/users/{userId}", wrapper.UserGetUser)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AQfwhATdAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
