// Package types provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package types

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	externalRef0 "github.com/common-fate/common-fate/accesshandler/pkg/types"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// Defines values for AccessRuleStatus.
const (
	AccessRuleStatusACTIVE   AccessRuleStatus = "ACTIVE"
	AccessRuleStatusARCHIVED AccessRuleStatus = "ARCHIVED"
)

// Defines values for AccessRuleTargetDetailArgumentsFormElement.
const (
	AccessRuleTargetDetailArgumentsFormElementINPUT       AccessRuleTargetDetailArgumentsFormElement = "INPUT"
	AccessRuleTargetDetailArgumentsFormElementMULTISELECT AccessRuleTargetDetailArgumentsFormElement = "MULTISELECT"
)

// Defines values for ApprovalMethod.
const (
	AUTOMATIC ApprovalMethod = "AUTOMATIC"
	REVIEWED  ApprovalMethod = "REVIEWED"
)

// Defines values for ArgumentRequestFormElement.
const (
	ArgumentRequestFormElementSELECT ArgumentRequestFormElement = "SELECT"
)

// Defines values for ArgumentRuleFormElement.
const (
	ArgumentRuleFormElementINPUT       ArgumentRuleFormElement = "INPUT"
	ArgumentRuleFormElementMULTISELECT ArgumentRuleFormElement = "MULTISELECT"
	ArgumentRuleFormElementSELECT      ArgumentRuleFormElement = "SELECT"
)

// Defines values for GrantStatus.
const (
	GrantStatusACTIVE  GrantStatus = "ACTIVE"
	GrantStatusERROR   GrantStatus = "ERROR"
	GrantStatusEXPIRED GrantStatus = "EXPIRED"
	GrantStatusPENDING GrantStatus = "PENDING"
	GrantStatusREVOKED GrantStatus = "REVOKED"
)

// Defines values for IdpStatus.
const (
	IdpStatusACTIVE   IdpStatus = "ACTIVE"
	IdpStatusARCHIVED IdpStatus = "ARCHIVED"
)

// Defines values for RequestArgumentFormElement.
const (
	RequestArgumentFormElementSELECT RequestArgumentFormElement = "SELECT"
)

// Defines values for RequestEventFromGrantStatus.
const (
	RequestEventFromGrantStatusACTIVE  RequestEventFromGrantStatus = "ACTIVE"
	RequestEventFromGrantStatusERROR   RequestEventFromGrantStatus = "ERROR"
	RequestEventFromGrantStatusEXPIRED RequestEventFromGrantStatus = "EXPIRED"
	RequestEventFromGrantStatusPENDING RequestEventFromGrantStatus = "PENDING"
	RequestEventFromGrantStatusREVOKED RequestEventFromGrantStatus = "REVOKED"
)

// Defines values for RequestEventToGrantStatus.
const (
	RequestEventToGrantStatusACTIVE  RequestEventToGrantStatus = "ACTIVE"
	RequestEventToGrantStatusERROR   RequestEventToGrantStatus = "ERROR"
	RequestEventToGrantStatusEXPIRED RequestEventToGrantStatus = "EXPIRED"
	RequestEventToGrantStatusPENDING RequestEventToGrantStatus = "PENDING"
	RequestEventToGrantStatusREVOKED RequestEventToGrantStatus = "REVOKED"
)

// Defines values for RequestStatus.
const (
	RequestStatusAPPROVED  RequestStatus = "APPROVED"
	RequestStatusCANCELLED RequestStatus = "CANCELLED"
	RequestStatusDECLINED  RequestStatus = "DECLINED"
	RequestStatusPENDING   RequestStatus = "PENDING"
)

// Defines values for ReviewDecision.
const (
	ReviewDecisionAPPROVED ReviewDecision = "APPROVED"
	ReviewDecisionDECLINED ReviewDecision = "DECLINED"
)

// Defines values for UserLookupAccessRuleParamsType.
const (
	CommonfateawsSso UserLookupAccessRuleParamsType = "commonfate/aws-sso"
)

// Defines values for AdminListAccessRulesParamsStatus.
const (
	ACTIVE   AdminListAccessRulesParamsStatus = "ACTIVE"
	ARCHIVED AdminListAccessRulesParamsStatus = "ARCHIVED"
)

// Defines values for AdminListGroupsParamsSource.
const (
	EXTERNAL AdminListGroupsParamsSource = "EXTERNAL"
	INTERNAL AdminListGroupsParamsSource = "INTERNAL"
)

// Defines values for AdminListRequestsParamsStatus.
const (
	AdminListRequestsParamsStatusAPPROVED  AdminListRequestsParamsStatus = "APPROVED"
	AdminListRequestsParamsStatusCANCELLED AdminListRequestsParamsStatus = "CANCELLED"
	AdminListRequestsParamsStatusDECLINED  AdminListRequestsParamsStatus = "DECLINED"
	AdminListRequestsParamsStatusPENDING   AdminListRequestsParamsStatus = "PENDING"
)

// Defines values for UserListRequestsParamsStatus.
const (
	APPROVED  UserListRequestsParamsStatus = "APPROVED"
	CANCELLED UserListRequestsParamsStatus = "CANCELLED"
	DECLINED  UserListRequestsParamsStatus = "DECLINED"
	PENDING   UserListRequestsParamsStatus = "PENDING"
)

// AccessRule Access Rule contains information for an end user to make a request for access.
type AccessRule struct {
	Description string `json:"description"`
	ID          string `json:"id"`
	IsCurrent   bool   `json:"isCurrent"`
	Name        string `json:"name"`

	// Target A target for an access rule
	Target AccessRuleTarget `json:"target"`

	// TimeConstraints Time configuration for an Access Rule.
	TimeConstraints TimeConstraints `json:"timeConstraints"`

	// Version A unique version identifier for the Access Rule. Updating a rule creates a new version.
	// When a rule is updated, it's ID remains consistent.
	Version string `json:"version"`
}

// AccessRuleDetail AccessRuleDetail contains detailed information about a rule and is used in administrative apis.
type AccessRuleDetail struct {
	// Approval Approver config for access rules
	Approval    ApproverConfig `json:"approval"`
	Description string         `json:"description"`

	// Groups The group IDs that the access rule applies to.
	Groups    []string           `json:"groups"`
	ID        string             `json:"id"`
	IsCurrent bool               `json:"isCurrent"`
	Metadata  AccessRuleMetadata `json:"metadata"`
	Name      string             `json:"name"`

	// Status The status of an Access Rule.
	Status AccessRuleStatus `json:"status"`

	// Target A detailed target for an access rule
	Target AccessRuleTargetDetail `json:"target"`

	// TimeConstraints Time configuration for an Access Rule.
	TimeConstraints TimeConstraints `json:"timeConstraints"`

	// Version A unique version identifier for the Access Rule. Updating a rule creates a new version.
	// When a rule is updated, it's ID remains consistent.
	Version string `json:"version"`
}

// AccessRuleMetadata defines model for AccessRuleMetadata.
type AccessRuleMetadata struct {
	CreatedAt     time.Time `json:"createdAt"`
	CreatedBy     string    `json:"createdBy"`
	UpdateMessage *string   `json:"updateMessage,omitempty"`
	UpdatedAt     time.Time `json:"updatedAt"`
	UpdatedBy     string    `json:"updatedBy"`
}

// AccessRuleStatus The status of an Access Rule.
type AccessRuleStatus string

// AccessRuleTarget A target for an access rule
type AccessRuleTarget struct {
	// Provider Provider
	Provider Provider `json:"provider"`
}

// AccessRuleTargetDetail A detailed target for an access rule
type AccessRuleTargetDetail struct {
	// Provider Provider
	Provider Provider                                   `json:"provider"`
	With     map[string]AccessRuleTargetDetailArguments `json:"with"`
}

// AccessRuleTargetDetailArguments defines model for AccessRuleTargetDetailArguments.
type AccessRuleTargetDetailArguments struct {
	FormElement AccessRuleTargetDetailArgumentsFormElement `json:"formElement"`
	Groupings   map[string][]string                        `json:"groupings"`
	Values      []string                                   `json:"values"`
}

// AccessRuleTargetDetailArgumentsFormElement defines model for AccessRuleTargetDetailArguments.FormElement.
type AccessRuleTargetDetailArgumentsFormElement string

// ApprovalMethod Describes whether a request has been approved automatically or from a review
type ApprovalMethod string

// ApproverConfig Approver config for access rules
type ApproverConfig struct {
	Groups []string `json:"groups"`

	// Users The user IDs of the approvers for the request.
	Users []string `json:"users"`
}

// ArgSchema defines model for ArgSchema.
type ArgSchema map[string]Argument

// Argument defines model for Argument.
type Argument struct {
	Description *string                   `json:"description,omitempty"`
	Groups      *map[string]ProviderGroup `json:"groups,omitempty"`
	Id          string                    `json:"id"`

	// RequestFormElement Optional form element for the request form, if not provided, defaults to multiselect
	RequestFormElement *ArgumentRequestFormElement `json:"requestFormElement,omitempty"`
	RuleFormElement    ArgumentRuleFormElement     `json:"ruleFormElement"`
	Title              string                      `json:"title"`
}

// ArgumentRequestFormElement Optional form element for the request form, if not provided, defaults to multiselect
type ArgumentRequestFormElement string

// ArgumentRuleFormElement defines model for Argument.RuleFormElement.
type ArgumentRuleFormElement string

// CreateAccessRuleTarget a request body for creating a Access Rule Target
type CreateAccessRuleTarget struct {
	ProviderId string                                           `json:"providerId"`
	With       map[string]CreateAccessRuleTargetDetailArguments `json:"with"`
}

// CreateAccessRuleTargetDetailArguments defines model for CreateAccessRuleTargetDetailArguments.
type CreateAccessRuleTargetDetailArguments struct {
	Groupings map[string][]string `json:"groupings"`
	Values    []string            `json:"values"`
}

// CreateRequestWith defines model for CreateRequestWith.
type CreateRequestWith map[string][]string

// CreateRequestWithSubRequest defines model for CreateRequestWithSubRequest.
type CreateRequestWithSubRequest = []CreateRequestWith

// Favorite defines model for Favorite.
type Favorite struct {
	Id     string `json:"id"`
	Name   string `json:"name"`
	RuleId string `json:"ruleId"`
}

// FavoriteDetail Detailed object for a Favorite.
type FavoriteDetail struct {
	Id     string                      `json:"id"`
	Name   string                      `json:"name"`
	Reason *string                     `json:"reason,omitempty"`
	Timing RequestTiming               `json:"timing"`
	With   CreateRequestWithSubRequest `json:"with"`
}

// Grant A temporary assignment of a user to a principal.
type Grant struct {
	// End The end time of the grant.
	End time.Time `json:"end"`

	// Provider The ID of the provider to grant access to.
	Provider string `json:"provider"`

	// Start The start time of the grant.
	Start time.Time `json:"start"`

	// Status The current state of the grant.
	Status GrantStatus `json:"status"`

	// Subject The email address of the user to grant access to.
	Subject openapi_types.Email `json:"subject"`
}

// GrantStatus The current state of the grant.
type GrantStatus string

// Group defines model for Group.
type Group struct {
	Description string   `json:"description"`
	Id          string   `json:"id"`
	MemberCount int      `json:"memberCount"`
	Members     []string `json:"members"`
	Name        string   `json:"name"`
	Source      string   `json:"source"`
}

// GroupOption defines model for GroupOption.
type GroupOption struct {
	Children    []string `json:"children"`
	Description *string  `json:"description,omitempty"`
	Label       string   `json:"label"`

	// LabelPrefix A label prefix allows additional context to be prefixed to the label when displayed in a form
	LabelPrefix *string `json:"labelPrefix,omitempty"`
	Value       string  `json:"value"`
}

// Groups defines model for Groups.
type Groups map[string][]GroupOption

// IdpStatus defines model for IdpStatus.
type IdpStatus string

// KeyValue defines model for KeyValue.
type KeyValue struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// LookupAccessRule A matched access rule with option values if they are required for the access rule request
type LookupAccessRule struct {
	// AccessRule Access Rule contains information for an end user to make a request for access.
	AccessRule AccessRule `json:"accessRule"`

	// SelectableWithOptionValues If the matched access rule has selectable fields, this array will contain the matched values to be used to prefill the form when requesting
	SelectableWithOptionValues *[]KeyValue `json:"selectableWithOptionValues,omitempty"`
}

// Provider Provider
type Provider struct {
	Id      string     `json:"id"`
	Name    string     `json:"name"`
	Schema  *ArgSchema `json:"schema,omitempty"`
	Type    string     `json:"type"`
	Url     string     `json:"url"`
	Version string     `json:"version"`
}

// ProviderGroup defines model for ProviderGroup.
type ProviderGroup struct {
	Description *string `json:"description,omitempty"`
	Id          string  `json:"id"`
	Title       string  `json:"title"`
}

// Request A request to access something made by an end user in Common Fate.
type Request struct {
	AccessRuleId      string `json:"accessRuleId"`
	AccessRuleVersion string `json:"accessRuleVersion"`

	// ApprovalMethod Describes whether a request has been approved automatically or from a review
	ApprovalMethod *ApprovalMethod `json:"approvalMethod,omitempty"`

	// Grant A temporary assignment of a user to a principal.
	Grant       *Grant    `json:"grant,omitempty"`
	ID          string    `json:"id"`
	Reason      *string   `json:"reason,omitempty"`
	RequestedAt time.Time `json:"requestedAt"`
	Requestor   string    `json:"requestor"`

	// Status The status of an Access Request.
	Status    RequestStatus `json:"status"`
	Timing    RequestTiming `json:"timing"`
	UpdatedAt time.Time     `json:"updatedAt"`
}

// RequestAccessRule Access Rule contains information for an end user to make a request for access.
type RequestAccessRule struct {
	CanRequest  bool   `json:"canRequest"`
	Description string `json:"description"`
	ID          string `json:"id"`
	IsCurrent   bool   `json:"isCurrent"`
	Name        string `json:"name"`

	// Target A detailed target for an access rule request
	Target RequestAccessRuleTarget `json:"target"`

	// TimeConstraints Time configuration for an Access Rule.
	TimeConstraints TimeConstraints `json:"timeConstraints"`

	// Version A unique version identifier for the Access Rule. Updating a rule creates a new version.
	// When a rule is updated, it's ID remains consistent.
	Version string `json:"version"`
}

// RequestAccessRuleTarget A detailed target for an access rule request
type RequestAccessRuleTarget struct {
	Arguments map[string]RequestArgument `json:"arguments"`

	// Provider Provider
	Provider Provider `json:"provider"`
}

// RequestArgument defines model for RequestArgument.
type RequestArgument struct {
	Description *string                     `json:"description,omitempty"`
	FormElement *RequestArgumentFormElement `json:"formElement,omitempty"`
	Options     []WithOption                `json:"options"`

	// RequiresSelection This will be true if a selection is require when creating a request
	RequiresSelection bool   `json:"requiresSelection"`
	Title             string `json:"title"`
}

// RequestArgumentFormElement defines model for RequestArgument.FormElement.
type RequestArgumentFormElement string

// RequestDetail A request to access something made by an end user in Common Fate.
type RequestDetail struct {
	// AccessRule Access Rule contains information for an end user to make a request for access.
	AccessRule AccessRule `json:"accessRule"`

	// ApprovalMethod Describes whether a request has been approved automatically or from a review
	ApprovalMethod *ApprovalMethod `json:"approvalMethod,omitempty"`
	Arguments      map[string]With `json:"arguments"`

	// CanReview true if the requesting user is a reviewer of this request.
	CanReview bool `json:"canReview"`

	// Grant A temporary assignment of a user to a principal.
	Grant       *Grant    `json:"grant,omitempty"`
	ID          string    `json:"id"`
	Reason      *string   `json:"reason,omitempty"`
	RequestedAt time.Time `json:"requestedAt"`
	Requestor   string    `json:"requestor"`

	// Status The status of an Access Request.
	Status    RequestStatus `json:"status"`
	Timing    RequestTiming `json:"timing"`
	UpdatedAt time.Time     `json:"updatedAt"`
}

// RequestEvent defines model for RequestEvent.
type RequestEvent struct {
	Actor     *string   `json:"actor,omitempty"`
	CreatedAt time.Time `json:"createdAt"`

	// FromGrantStatus The current state of the grant.
	FromGrantStatus *RequestEventFromGrantStatus `json:"fromGrantStatus,omitempty"`

	// FromStatus The status of an Access Request.
	FromStatus         *RequestStatus `json:"fromStatus,omitempty"`
	FromTiming         *RequestTiming `json:"fromTiming,omitempty"`
	GrantCreated       *bool          `json:"grantCreated,omitempty"`
	GrantFailureReason *string        `json:"grantFailureReason,omitempty"`
	Id                 string         `json:"id"`

	// RecordedEvent An event which was recorded relating to the grant.
	RecordedEvent  *map[string]string `json:"recordedEvent,omitempty"`
	RequestCreated *bool              `json:"requestCreated,omitempty"`
	RequestId      string             `json:"requestId"`

	// ToGrantStatus The current state of the grant.
	ToGrantStatus *RequestEventToGrantStatus `json:"toGrantStatus,omitempty"`

	// ToStatus The status of an Access Request.
	ToStatus *RequestStatus `json:"toStatus,omitempty"`
	ToTiming *RequestTiming `json:"toTiming,omitempty"`
}

// RequestEventFromGrantStatus The current state of the grant.
type RequestEventFromGrantStatus string

// RequestEventToGrantStatus The current state of the grant.
type RequestEventToGrantStatus string

// RequestStatus The status of an Access Request.
type RequestStatus string

// RequestTiming defines model for RequestTiming.
type RequestTiming struct {
	DurationSeconds int `json:"durationSeconds"`

	// StartTime iso8601 timestamp in UTC timezone
	StartTime *time.Time `json:"startTime,omitempty"`
}

// ReviewDecision A decision made on an Access Request.
type ReviewDecision string

// TimeConstraints Time configuration for an Access Rule.
type TimeConstraints struct {
	// MaxDurationSeconds The maximum duration in seconds the access is allowed for.
	MaxDurationSeconds int `json:"maxDurationSeconds"`
}

// User defines model for User.
type User struct {
	Email     string    `json:"email"`
	FirstName string    `json:"firstName"`
	Groups    []string  `json:"groups"`
	Id        string    `json:"id"`
	LastName  string    `json:"lastName"`
	Picture   string    `json:"picture"`
	Status    IdpStatus `json:"status"`
	UpdatedAt time.Time `json:"updatedAt"`
}

// With defines model for With.
type With struct {
	FieldDescription  *string `json:"fieldDescription,omitempty"`
	Label             string  `json:"label"`
	OptionDescription *string `json:"optionDescription,omitempty"`
	Title             string  `json:"title"`
	Value             string  `json:"value"`
}

// WithOption defines model for WithOption.
type WithOption struct {
	Description *string `json:"description,omitempty"`
	Label       string  `json:"label"`
	Valid       bool    `json:"valid"`
	Value       string  `json:"value"`
}

// AccessTokenResponse defines model for AccessTokenResponse.
type AccessTokenResponse struct {
	HasToken bool    `json:"hasToken"`
	Token    *string `json:"token,omitempty"`
}

// AuthUserResponse defines model for AuthUserResponse.
type AuthUserResponse struct {
	// IsAdmin Whether the user is an administrator of Common Fate.
	IsAdmin bool `json:"isAdmin"`
	User    User `json:"user"`
}

// DeploymentVersionResponse defines model for DeploymentVersionResponse.
type DeploymentVersionResponse struct {
	// Version The deployment version. Will be a semver, such as "v0.9.0" for official releases, or "dev+GIT_HASH" for pre-release builds.
	Version string `json:"version"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error string `json:"error"`
}

// IdentityConfigurationResponse defines model for IdentityConfigurationResponse.
type IdentityConfigurationResponse struct {
	AdministratorGroupId string `json:"administratorGroupId"`
	IdentityProvider     string `json:"identityProvider"`
}

// ListAccessRuleApproversResponse defines model for ListAccessRuleApproversResponse.
type ListAccessRuleApproversResponse struct {
	Next  *string  `json:"next"`
	Users []string `json:"users"`
}

// ListAccessRulesDetailResponse defines model for ListAccessRulesDetailResponse.
type ListAccessRulesDetailResponse struct {
	AccessRules []AccessRuleDetail `json:"accessRules"`
	Next        *string            `json:"next"`
}

// ListAccessRulesResponse defines model for ListAccessRulesResponse.
type ListAccessRulesResponse struct {
	AccessRules []AccessRule `json:"accessRules"`
	Next        *string      `json:"next"`
}

// ListFavoritesResponse defines model for ListFavoritesResponse.
type ListFavoritesResponse struct {
	Favorites []Favorite `json:"favorites"`
	Next      *string    `json:"next"`
}

// ListGroupsResponse defines model for ListGroupsResponse.
type ListGroupsResponse struct {
	Groups []Group `json:"groups"`
	Next   *string `json:"next"`
}

// ListRequestEventsResponse defines model for ListRequestEventsResponse.
type ListRequestEventsResponse struct {
	Events []RequestEvent `json:"events"`
	Next   *string        `json:"next"`
}

// ListRequestsResponse defines model for ListRequestsResponse.
type ListRequestsResponse struct {
	Next     *string   `json:"next"`
	Requests []Request `json:"requests"`
}

// ListUserResponse defines model for ListUserResponse.
type ListUserResponse struct {
	Next  *string `json:"next"`
	Users []User  `json:"users"`
}

// ReviewResponse defines model for ReviewResponse.
type ReviewResponse struct {
	// Request A request to access something made by an end user in Common Fate.
	Request *Request `json:"request,omitempty"`
}

// CreateAccessRuleRequest defines model for CreateAccessRuleRequest.
type CreateAccessRuleRequest struct {
	// Approval Approver config for access rules
	Approval    ApproverConfig `json:"approval"`
	Description string         `json:"description"`

	// Groups The group IDs that the access rule applies to.
	Groups []string `json:"groups"`
	Name   string   `json:"name"`

	// Target a request body for creating a Access Rule Target
	Target CreateAccessRuleTarget `json:"target"`

	// TimeConstraints Time configuration for an Access Rule.
	TimeConstraints TimeConstraints `json:"timeConstraints"`
}

// CreateFavoriteRequest defines model for CreateFavoriteRequest.
type CreateFavoriteRequest struct {
	AccessRuleId string                       `json:"accessRuleId"`
	Name         string                       `json:"name"`
	Reason       *string                      `json:"reason,omitempty"`
	Timing       RequestTiming                `json:"timing"`
	With         *CreateRequestWithSubRequest `json:"with,omitempty"`
}

// CreateGroupRequest defines model for CreateGroupRequest.
type CreateGroupRequest struct {
	Description *string  `json:"description,omitempty"`
	Members     []string `json:"members"`
	Name        string   `json:"name"`
}

// CreateRequestRequest defines model for CreateRequestRequest.
type CreateRequestRequest struct {
	AccessRuleId string                       `json:"accessRuleId"`
	Reason       *string                      `json:"reason,omitempty"`
	Timing       RequestTiming                `json:"timing"`
	With         *CreateRequestWithSubRequest `json:"with,omitempty"`
}

// CreateUserRequest defines model for CreateUserRequest.
type CreateUserRequest struct {
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"firstName"`
	IsAdmin   bool                `json:"isAdmin"`
	LastName  string              `json:"lastName"`
}

// ReviewRequest defines model for ReviewRequest.
type ReviewRequest struct {
	Comment *string `json:"comment,omitempty"`

	// Decision A decision made on an Access Request.
	Decision       ReviewDecision `json:"decision"`
	OverrideTiming *RequestTiming `json:"overrideTiming,omitempty"`
}

// UserLookupAccessRuleParams defines parameters for UserLookupAccessRule.
type UserLookupAccessRuleParams struct {
	// Type the provider type i.e. commonfate/aws-sso. type should be encoded i.e.  backslash -> %2
	Type *UserLookupAccessRuleParamsType `form:"type,omitempty" json:"type,omitempty"`

	// PermissionSetArnLabel the permissionSetArn label, typically resembles a role name i.e. AdminstratorAccess
	PermissionSetArnLabel *string `form:"permissionSetArn.label,omitempty" json:"permissionSetArn.label,omitempty"`

	// AccountId the aws account id
	AccountId *string `form:"accountId,omitempty" json:"accountId,omitempty"`
}

// UserLookupAccessRuleParamsType defines parameters for UserLookupAccessRule.
type UserLookupAccessRuleParamsType string

// AdminListAccessRulesParams defines parameters for AdminListAccessRules.
type AdminListAccessRulesParams struct {
	// Status Filter Access Rules by a particular status.
	Status *AdminListAccessRulesParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// NextToken encrypted token containing pagination info
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`
}

// AdminListAccessRulesParamsStatus defines parameters for AdminListAccessRules.
type AdminListAccessRulesParamsStatus string

// AdminCreateAccessRuleJSONBody defines parameters for AdminCreateAccessRule.
type AdminCreateAccessRuleJSONBody struct {
	// Approval Approver config for access rules
	Approval    ApproverConfig `json:"approval"`
	Description string         `json:"description"`

	// Groups The group IDs that the access rule applies to.
	Groups []string `json:"groups"`
	Name   string   `json:"name"`

	// Target a request body for creating a Access Rule Target
	Target CreateAccessRuleTarget `json:"target"`

	// TimeConstraints Time configuration for an Access Rule.
	TimeConstraints TimeConstraints `json:"timeConstraints"`
}

// AdminUpdateAccessRuleJSONBody defines parameters for AdminUpdateAccessRule.
type AdminUpdateAccessRuleJSONBody struct {
	// Approval Approver config for access rules
	Approval    ApproverConfig `json:"approval"`
	Description string         `json:"description"`

	// Groups The group IDs that the access rule applies to.
	Groups []string `json:"groups"`
	Name   string   `json:"name"`

	// Target a request body for creating a Access Rule Target
	Target CreateAccessRuleTarget `json:"target"`

	// TimeConstraints Time configuration for an Access Rule.
	TimeConstraints TimeConstraints `json:"timeConstraints"`
}

// AdminListGroupsParams defines parameters for AdminListGroups.
type AdminListGroupsParams struct {
	// NextToken encrypted token containing pagination info
	NextToken *string                      `form:"nextToken,omitempty" json:"nextToken,omitempty"`
	Source    *AdminListGroupsParamsSource `form:"source,omitempty" json:"source,omitempty"`
}

// AdminListGroupsParamsSource defines parameters for AdminListGroups.
type AdminListGroupsParamsSource string

// AdminCreateGroupJSONBody defines parameters for AdminCreateGroup.
type AdminCreateGroupJSONBody struct {
	Description *string  `json:"description,omitempty"`
	Members     []string `json:"members"`
	Name        string   `json:"name"`
}

// AdminUpdateGroupJSONBody defines parameters for AdminUpdateGroup.
type AdminUpdateGroupJSONBody struct {
	Description *string  `json:"description,omitempty"`
	Members     []string `json:"members"`
	Name        string   `json:"name"`
}

// AdminListProviderArgOptionsParams defines parameters for AdminListProviderArgOptions.
type AdminListProviderArgOptionsParams struct {
	// Refresh invalidate the cache and refresh the provider's options.
	Refresh *bool `form:"refresh,omitempty" json:"refresh,omitempty"`
}

// AdminListRequestsParams defines parameters for AdminListRequests.
type AdminListRequestsParams struct {
	// Status omit this param to view all results
	Status *AdminListRequestsParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// NextToken encrypted token containing pagination info
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`
}

// AdminListRequestsParamsStatus defines parameters for AdminListRequests.
type AdminListRequestsParamsStatus string

// AdminListUsersParams defines parameters for AdminListUsers.
type AdminListUsersParams struct {
	// NextToken encrypted token containing pagination info
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`
}

// AdminCreateUserJSONBody defines parameters for AdminCreateUser.
type AdminCreateUserJSONBody struct {
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"firstName"`
	IsAdmin   bool                `json:"isAdmin"`
	LastName  string              `json:"lastName"`
}

// AdminUpdateUserJSONBody defines parameters for AdminUpdateUser.
type AdminUpdateUserJSONBody struct {
	Groups []string `json:"groups"`
}

// UserCreateFavoriteJSONBody defines parameters for UserCreateFavorite.
type UserCreateFavoriteJSONBody struct {
	AccessRuleId string                       `json:"accessRuleId"`
	Name         string                       `json:"name"`
	Reason       *string                      `json:"reason,omitempty"`
	Timing       RequestTiming                `json:"timing"`
	With         *CreateRequestWithSubRequest `json:"with,omitempty"`
}

// UserUpdateFavoriteJSONBody defines parameters for UserUpdateFavorite.
type UserUpdateFavoriteJSONBody struct {
	AccessRuleId string                       `json:"accessRuleId"`
	Name         string                       `json:"name"`
	Reason       *string                      `json:"reason,omitempty"`
	Timing       RequestTiming                `json:"timing"`
	With         *CreateRequestWithSubRequest `json:"with,omitempty"`
}

// UserListRequestsParams defines parameters for UserListRequests.
type UserListRequestsParams struct {
	// Status omit this param to view all results
	Status *UserListRequestsParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// Reviewer show requests that the user is a reviewer for, rather than requests that the user has made themselves
	Reviewer *bool `form:"reviewer,omitempty" json:"reviewer,omitempty"`

	// NextToken encrypted token containing pagination info
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`
}

// UserListRequestsParamsStatus defines parameters for UserListRequests.
type UserListRequestsParamsStatus string

// UserCreateRequestJSONBody defines parameters for UserCreateRequest.
type UserCreateRequestJSONBody struct {
	AccessRuleId string                       `json:"accessRuleId"`
	Reason       *string                      `json:"reason,omitempty"`
	Timing       RequestTiming                `json:"timing"`
	With         *CreateRequestWithSubRequest `json:"with,omitempty"`
}

// UserListRequestsPastParams defines parameters for UserListRequestsPast.
type UserListRequestsPastParams struct {
	// NextToken encrypted token containing pagination info
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`
}

// UserListRequestsUpcomingParams defines parameters for UserListRequestsUpcoming.
type UserListRequestsUpcomingParams struct {
	// NextToken encrypted token containing pagination info
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`
}

// UserReviewRequestJSONBody defines parameters for UserReviewRequest.
type UserReviewRequestJSONBody struct {
	Comment *string `json:"comment,omitempty"`

	// Decision A decision made on an Access Request.
	Decision       ReviewDecision `json:"decision"`
	OverrideTiming *RequestTiming `json:"overrideTiming,omitempty"`
}

// AdminCreateAccessRuleJSONRequestBody defines body for AdminCreateAccessRule for application/json ContentType.
type AdminCreateAccessRuleJSONRequestBody AdminCreateAccessRuleJSONBody

// AdminUpdateAccessRuleJSONRequestBody defines body for AdminUpdateAccessRule for application/json ContentType.
type AdminUpdateAccessRuleJSONRequestBody AdminUpdateAccessRuleJSONBody

// AdminCreateGroupJSONRequestBody defines body for AdminCreateGroup for application/json ContentType.
type AdminCreateGroupJSONRequestBody AdminCreateGroupJSONBody

// AdminUpdateGroupJSONRequestBody defines body for AdminUpdateGroup for application/json ContentType.
type AdminUpdateGroupJSONRequestBody AdminUpdateGroupJSONBody

// AdminCreateUserJSONRequestBody defines body for AdminCreateUser for application/json ContentType.
type AdminCreateUserJSONRequestBody AdminCreateUserJSONBody

// AdminUpdateUserJSONRequestBody defines body for AdminUpdateUser for application/json ContentType.
type AdminUpdateUserJSONRequestBody AdminUpdateUserJSONBody

// UserCreateFavoriteJSONRequestBody defines body for UserCreateFavorite for application/json ContentType.
type UserCreateFavoriteJSONRequestBody UserCreateFavoriteJSONBody

// UserUpdateFavoriteJSONRequestBody defines body for UserUpdateFavorite for application/json ContentType.
type UserUpdateFavoriteJSONRequestBody UserUpdateFavoriteJSONBody

// UserCreateRequestJSONRequestBody defines body for UserCreateRequest for application/json ContentType.
type UserCreateRequestJSONRequestBody UserCreateRequestJSONBody

// UserReviewRequestJSONRequestBody defines body for UserReviewRequest for application/json ContentType.
type UserReviewRequestJSONRequestBody UserReviewRequestJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List Access Rules
	// (GET /api/v1/access-rules)
	UserListAccessRules(w http.ResponseWriter, r *http.Request)
	// Lookup an access rule based on the target
	// (GET /api/v1/access-rules/lookup)
	UserLookupAccessRule(w http.ResponseWriter, r *http.Request, params UserLookupAccessRuleParams)
	// Get Access Rule
	// (GET /api/v1/access-rules/{ruleId})
	UserGetAccessRule(w http.ResponseWriter, r *http.Request, ruleId string)
	// List Access Rule approvers
	// (GET /api/v1/access-rules/{ruleId}/approvers)
	UserGetAccessRuleApprovers(w http.ResponseWriter, r *http.Request, ruleId string)
	// List Access Rules
	// (GET /api/v1/admin/access-rules)
	AdminListAccessRules(w http.ResponseWriter, r *http.Request, params AdminListAccessRulesParams)
	// Create Access Rule
	// (POST /api/v1/admin/access-rules)
	AdminCreateAccessRule(w http.ResponseWriter, r *http.Request)
	// Get Access Rule
	// (GET /api/v1/admin/access-rules/{ruleId})
	AdminGetAccessRule(w http.ResponseWriter, r *http.Request, ruleId string)
	// Update Access Rule
	// (PUT /api/v1/admin/access-rules/{ruleId})
	AdminUpdateAccessRule(w http.ResponseWriter, r *http.Request, ruleId string)
	// Archive Access Rule
	// (POST /api/v1/admin/access-rules/{ruleId}/archive)
	AdminArchiveAccessRule(w http.ResponseWriter, r *http.Request, ruleId string)
	// Get Access Rule version history
	// (GET /api/v1/admin/access-rules/{ruleId}/versions)
	AdminGetAccessRuleVersions(w http.ResponseWriter, r *http.Request, ruleId string)
	// Get Access Rule Version
	// (GET /api/v1/admin/access-rules/{ruleId}/versions/{version})
	AdminGetAccessRuleVersion(w http.ResponseWriter, r *http.Request, ruleId string, version string)
	// Get deployment version details
	// (GET /api/v1/admin/deployment/version)
	AdminGetDeploymentVersion(w http.ResponseWriter, r *http.Request)
	// List groups
	// (GET /api/v1/admin/groups)
	AdminListGroups(w http.ResponseWriter, r *http.Request, params AdminListGroupsParams)
	// Create Group
	// (POST /api/v1/admin/groups)
	AdminCreateGroup(w http.ResponseWriter, r *http.Request)
	// Delete Group
	// (DELETE /api/v1/admin/groups/{groupId})
	AdminDeleteGroup(w http.ResponseWriter, r *http.Request, groupId string)
	// Get Group Details
	// (GET /api/v1/admin/groups/{groupId})
	AdminGetGroup(w http.ResponseWriter, r *http.Request, groupId string)
	// Update Group
	// (PUT /api/v1/admin/groups/{groupId})
	AdminUpdateGroup(w http.ResponseWriter, r *http.Request, groupId string)
	// Get identity configuration
	// (GET /api/v1/admin/identity)
	AdminGetIdentityConfiguration(w http.ResponseWriter, r *http.Request)
	// Sync Identity
	// (POST /api/v1/admin/identity/sync)
	AdminSyncIdentity(w http.ResponseWriter, r *http.Request)
	// List providers
	// (GET /api/v1/admin/providers)
	AdminListProviders(w http.ResponseWriter, r *http.Request)
	// List providers
	// (GET /api/v1/admin/providers/{providerId})
	AdminGetProvider(w http.ResponseWriter, r *http.Request, providerId string)
	// List provider arg options
	// (GET /api/v1/admin/providers/{providerId}/args/{argId}/options)
	AdminListProviderArgOptions(w http.ResponseWriter, r *http.Request, providerId string, argId string, params AdminListProviderArgOptionsParams)
	// Your GET endpoint
	// (GET /api/v1/admin/requests)
	AdminListRequests(w http.ResponseWriter, r *http.Request, params AdminListRequestsParams)
	// Get a request
	// (GET /api/v1/admin/requests/{requestId})
	AdminGetRequest(w http.ResponseWriter, r *http.Request, requestId string)
	// Returns a list of users
	// (GET /api/v1/admin/users)
	AdminListUsers(w http.ResponseWriter, r *http.Request, params AdminListUsersParams)
	// Create User
	// (POST /api/v1/admin/users)
	AdminCreateUser(w http.ResponseWriter, r *http.Request)
	// Update User
	// (POST /api/v1/admin/users/{userId})
	AdminUpdateUser(w http.ResponseWriter, r *http.Request, userId string)
	// ListFavorites
	// (GET /api/v1/favorites)
	UserListFavorites(w http.ResponseWriter, r *http.Request)
	// Create Favorite
	// (POST /api/v1/favorites)
	UserCreateFavorite(w http.ResponseWriter, r *http.Request)

	// (DELETE /api/v1/favorites/{id})
	UserDeleteFavorite(w http.ResponseWriter, r *http.Request, id string)
	// Get Favorite
	// (GET /api/v1/favorites/{id})
	UserGetFavorite(w http.ResponseWriter, r *http.Request, id string)

	// (PUT /api/v1/favorites/{id})
	UserUpdateFavorite(w http.ResponseWriter, r *http.Request, id string)
	// List my requests
	// (GET /api/v1/requests)
	UserListRequests(w http.ResponseWriter, r *http.Request, params UserListRequestsParams)
	// Create a request
	// (POST /api/v1/requests)
	UserCreateRequest(w http.ResponseWriter, r *http.Request)
	// Your GET endpoint
	// (GET /api/v1/requests/past)
	UserListRequestsPast(w http.ResponseWriter, r *http.Request, params UserListRequestsPastParams)
	// Your GET endpoint
	// (GET /api/v1/requests/upcoming)
	UserListRequestsUpcoming(w http.ResponseWriter, r *http.Request, params UserListRequestsUpcomingParams)
	// Get a request
	// (GET /api/v1/requests/{requestId})
	UserGetRequest(w http.ResponseWriter, r *http.Request, requestId string)
	// Get Access Instructions
	// (GET /api/v1/requests/{requestId}/access-instructions)
	UserGetAccessInstructions(w http.ResponseWriter, r *http.Request, requestId string)
	// Get Access Token
	// (GET /api/v1/requests/{requestId}/access-token)
	UserGetAccessToken(w http.ResponseWriter, r *http.Request, requestId string)
	// Cancel a request
	// (POST /api/v1/requests/{requestId}/cancel)
	UserCancelRequest(w http.ResponseWriter, r *http.Request, requestId string)
	// List request events
	// (GET /api/v1/requests/{requestId}/events)
	UserListRequestEvents(w http.ResponseWriter, r *http.Request, requestId string)
	// Review a request
	// (POST /api/v1/requests/{requestId}/review)
	UserReviewRequest(w http.ResponseWriter, r *http.Request, requestId string)
	// Revoke an active request
	// (POST /api/v1/requests/{requestid}/revoke)
	UserRevokeRequest(w http.ResponseWriter, r *http.Request, requestid string)
	// Get details for the current user
	// (GET /api/v1/users/me)
	UserGetMe(w http.ResponseWriter, r *http.Request)
	// Get a user
	// (GET /api/v1/users/{userId})
	UserGetUser(w http.ResponseWriter, r *http.Request, userId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// UserListAccessRules operation middleware
func (siw *ServerInterfaceWrapper) UserListAccessRules(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserListAccessRules(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserLookupAccessRule operation middleware
func (siw *ServerInterfaceWrapper) UserLookupAccessRule(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params UserLookupAccessRuleParams

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", r.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	// ------------- Optional query parameter "permissionSetArn.label" -------------

	err = runtime.BindQueryParameter("form", true, false, "permissionSetArn.label", r.URL.Query(), &params.PermissionSetArnLabel)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "permissionSetArn.label", Err: err})
		return
	}

	// ------------- Optional query parameter "accountId" -------------

	err = runtime.BindQueryParameter("form", true, false, "accountId", r.URL.Query(), &params.AccountId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "accountId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserLookupAccessRule(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserGetAccessRule operation middleware
func (siw *ServerInterfaceWrapper) UserGetAccessRule(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ruleId" -------------
	var ruleId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ruleId", runtime.ParamLocationPath, chi.URLParam(r, "ruleId"), &ruleId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ruleId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserGetAccessRule(w, r, ruleId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserGetAccessRuleApprovers operation middleware
func (siw *ServerInterfaceWrapper) UserGetAccessRuleApprovers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ruleId" -------------
	var ruleId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ruleId", runtime.ParamLocationPath, chi.URLParam(r, "ruleId"), &ruleId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ruleId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserGetAccessRuleApprovers(w, r, ruleId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminListAccessRules operation middleware
func (siw *ServerInterfaceWrapper) AdminListAccessRules(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AdminListAccessRulesParams

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	// ------------- Optional query parameter "nextToken" -------------

	err = runtime.BindQueryParameter("form", true, false, "nextToken", r.URL.Query(), &params.NextToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nextToken", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminListAccessRules(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminCreateAccessRule operation middleware
func (siw *ServerInterfaceWrapper) AdminCreateAccessRule(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminCreateAccessRule(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminGetAccessRule operation middleware
func (siw *ServerInterfaceWrapper) AdminGetAccessRule(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ruleId" -------------
	var ruleId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ruleId", runtime.ParamLocationPath, chi.URLParam(r, "ruleId"), &ruleId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ruleId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminGetAccessRule(w, r, ruleId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminUpdateAccessRule operation middleware
func (siw *ServerInterfaceWrapper) AdminUpdateAccessRule(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ruleId" -------------
	var ruleId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ruleId", runtime.ParamLocationPath, chi.URLParam(r, "ruleId"), &ruleId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ruleId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminUpdateAccessRule(w, r, ruleId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminArchiveAccessRule operation middleware
func (siw *ServerInterfaceWrapper) AdminArchiveAccessRule(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ruleId" -------------
	var ruleId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ruleId", runtime.ParamLocationPath, chi.URLParam(r, "ruleId"), &ruleId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ruleId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminArchiveAccessRule(w, r, ruleId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminGetAccessRuleVersions operation middleware
func (siw *ServerInterfaceWrapper) AdminGetAccessRuleVersions(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ruleId" -------------
	var ruleId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ruleId", runtime.ParamLocationPath, chi.URLParam(r, "ruleId"), &ruleId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ruleId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminGetAccessRuleVersions(w, r, ruleId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminGetAccessRuleVersion operation middleware
func (siw *ServerInterfaceWrapper) AdminGetAccessRuleVersion(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ruleId" -------------
	var ruleId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ruleId", runtime.ParamLocationPath, chi.URLParam(r, "ruleId"), &ruleId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ruleId", Err: err})
		return
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithLocation("simple", false, "version", runtime.ParamLocationPath, chi.URLParam(r, "version"), &version)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "version", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminGetAccessRuleVersion(w, r, ruleId, version)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminGetDeploymentVersion operation middleware
func (siw *ServerInterfaceWrapper) AdminGetDeploymentVersion(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminGetDeploymentVersion(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminListGroups operation middleware
func (siw *ServerInterfaceWrapper) AdminListGroups(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AdminListGroupsParams

	// ------------- Optional query parameter "nextToken" -------------

	err = runtime.BindQueryParameter("form", true, false, "nextToken", r.URL.Query(), &params.NextToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nextToken", Err: err})
		return
	}

	// ------------- Optional query parameter "source" -------------

	err = runtime.BindQueryParameter("form", true, false, "source", r.URL.Query(), &params.Source)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "source", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminListGroups(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminCreateGroup operation middleware
func (siw *ServerInterfaceWrapper) AdminCreateGroup(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminCreateGroup(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminDeleteGroup operation middleware
func (siw *ServerInterfaceWrapper) AdminDeleteGroup(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "groupId" -------------
	var groupId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "groupId", runtime.ParamLocationPath, chi.URLParam(r, "groupId"), &groupId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminDeleteGroup(w, r, groupId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminGetGroup operation middleware
func (siw *ServerInterfaceWrapper) AdminGetGroup(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "groupId" -------------
	var groupId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "groupId", runtime.ParamLocationPath, chi.URLParam(r, "groupId"), &groupId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminGetGroup(w, r, groupId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminUpdateGroup operation middleware
func (siw *ServerInterfaceWrapper) AdminUpdateGroup(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "groupId" -------------
	var groupId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "groupId", runtime.ParamLocationPath, chi.URLParam(r, "groupId"), &groupId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminUpdateGroup(w, r, groupId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminGetIdentityConfiguration operation middleware
func (siw *ServerInterfaceWrapper) AdminGetIdentityConfiguration(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminGetIdentityConfiguration(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminSyncIdentity operation middleware
func (siw *ServerInterfaceWrapper) AdminSyncIdentity(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminSyncIdentity(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminListProviders operation middleware
func (siw *ServerInterfaceWrapper) AdminListProviders(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminListProviders(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminGetProvider operation middleware
func (siw *ServerInterfaceWrapper) AdminGetProvider(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "providerId" -------------
	var providerId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "providerId", runtime.ParamLocationPath, chi.URLParam(r, "providerId"), &providerId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "providerId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminGetProvider(w, r, providerId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminListProviderArgOptions operation middleware
func (siw *ServerInterfaceWrapper) AdminListProviderArgOptions(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "providerId" -------------
	var providerId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "providerId", runtime.ParamLocationPath, chi.URLParam(r, "providerId"), &providerId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "providerId", Err: err})
		return
	}

	// ------------- Path parameter "argId" -------------
	var argId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "argId", runtime.ParamLocationPath, chi.URLParam(r, "argId"), &argId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "argId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params AdminListProviderArgOptionsParams

	// ------------- Optional query parameter "refresh" -------------

	err = runtime.BindQueryParameter("form", true, false, "refresh", r.URL.Query(), &params.Refresh)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "refresh", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminListProviderArgOptions(w, r, providerId, argId, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminListRequests operation middleware
func (siw *ServerInterfaceWrapper) AdminListRequests(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AdminListRequestsParams

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	// ------------- Optional query parameter "nextToken" -------------

	err = runtime.BindQueryParameter("form", true, false, "nextToken", r.URL.Query(), &params.NextToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nextToken", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminListRequests(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminGetRequest operation middleware
func (siw *ServerInterfaceWrapper) AdminGetRequest(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "requestId" -------------
	var requestId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "requestId", runtime.ParamLocationPath, chi.URLParam(r, "requestId"), &requestId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminGetRequest(w, r, requestId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminListUsers operation middleware
func (siw *ServerInterfaceWrapper) AdminListUsers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AdminListUsersParams

	// ------------- Optional query parameter "nextToken" -------------

	err = runtime.BindQueryParameter("form", true, false, "nextToken", r.URL.Query(), &params.NextToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nextToken", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminListUsers(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminCreateUser operation middleware
func (siw *ServerInterfaceWrapper) AdminCreateUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminCreateUser(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminUpdateUser operation middleware
func (siw *ServerInterfaceWrapper) AdminUpdateUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, chi.URLParam(r, "userId"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminUpdateUser(w, r, userId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserListFavorites operation middleware
func (siw *ServerInterfaceWrapper) UserListFavorites(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserListFavorites(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserCreateFavorite operation middleware
func (siw *ServerInterfaceWrapper) UserCreateFavorite(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserCreateFavorite(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserDeleteFavorite operation middleware
func (siw *ServerInterfaceWrapper) UserDeleteFavorite(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserDeleteFavorite(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserGetFavorite operation middleware
func (siw *ServerInterfaceWrapper) UserGetFavorite(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserGetFavorite(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserUpdateFavorite operation middleware
func (siw *ServerInterfaceWrapper) UserUpdateFavorite(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserUpdateFavorite(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserListRequests operation middleware
func (siw *ServerInterfaceWrapper) UserListRequests(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params UserListRequestsParams

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	// ------------- Optional query parameter "reviewer" -------------

	err = runtime.BindQueryParameter("form", true, false, "reviewer", r.URL.Query(), &params.Reviewer)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "reviewer", Err: err})
		return
	}

	// ------------- Optional query parameter "nextToken" -------------

	err = runtime.BindQueryParameter("form", true, false, "nextToken", r.URL.Query(), &params.NextToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nextToken", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserListRequests(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserCreateRequest operation middleware
func (siw *ServerInterfaceWrapper) UserCreateRequest(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserCreateRequest(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserListRequestsPast operation middleware
func (siw *ServerInterfaceWrapper) UserListRequestsPast(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params UserListRequestsPastParams

	// ------------- Optional query parameter "nextToken" -------------

	err = runtime.BindQueryParameter("form", true, false, "nextToken", r.URL.Query(), &params.NextToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nextToken", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserListRequestsPast(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserListRequestsUpcoming operation middleware
func (siw *ServerInterfaceWrapper) UserListRequestsUpcoming(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params UserListRequestsUpcomingParams

	// ------------- Optional query parameter "nextToken" -------------

	err = runtime.BindQueryParameter("form", true, false, "nextToken", r.URL.Query(), &params.NextToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nextToken", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserListRequestsUpcoming(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserGetRequest operation middleware
func (siw *ServerInterfaceWrapper) UserGetRequest(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "requestId" -------------
	var requestId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "requestId", runtime.ParamLocationPath, chi.URLParam(r, "requestId"), &requestId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserGetRequest(w, r, requestId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserGetAccessInstructions operation middleware
func (siw *ServerInterfaceWrapper) UserGetAccessInstructions(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "requestId" -------------
	var requestId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "requestId", runtime.ParamLocationPath, chi.URLParam(r, "requestId"), &requestId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserGetAccessInstructions(w, r, requestId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserGetAccessToken operation middleware
func (siw *ServerInterfaceWrapper) UserGetAccessToken(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "requestId" -------------
	var requestId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "requestId", runtime.ParamLocationPath, chi.URLParam(r, "requestId"), &requestId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserGetAccessToken(w, r, requestId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserCancelRequest operation middleware
func (siw *ServerInterfaceWrapper) UserCancelRequest(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "requestId" -------------
	var requestId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "requestId", runtime.ParamLocationPath, chi.URLParam(r, "requestId"), &requestId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserCancelRequest(w, r, requestId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserListRequestEvents operation middleware
func (siw *ServerInterfaceWrapper) UserListRequestEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "requestId" -------------
	var requestId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "requestId", runtime.ParamLocationPath, chi.URLParam(r, "requestId"), &requestId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserListRequestEvents(w, r, requestId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserReviewRequest operation middleware
func (siw *ServerInterfaceWrapper) UserReviewRequest(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "requestId" -------------
	var requestId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "requestId", runtime.ParamLocationPath, chi.URLParam(r, "requestId"), &requestId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserReviewRequest(w, r, requestId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserRevokeRequest operation middleware
func (siw *ServerInterfaceWrapper) UserRevokeRequest(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "requestid" -------------
	var requestid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "requestid", runtime.ParamLocationPath, chi.URLParam(r, "requestid"), &requestid)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestid", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserRevokeRequest(w, r, requestid)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserGetMe operation middleware
func (siw *ServerInterfaceWrapper) UserGetMe(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserGetMe(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserGetUser operation middleware
func (siw *ServerInterfaceWrapper) UserGetUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, chi.URLParam(r, "userId"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserGetUser(w, r, userId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/access-rules", wrapper.UserListAccessRules)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/access-rules/lookup", wrapper.UserLookupAccessRule)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/access-rules/{ruleId}", wrapper.UserGetAccessRule)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/access-rules/{ruleId}/approvers", wrapper.UserGetAccessRuleApprovers)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/access-rules", wrapper.AdminListAccessRules)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/admin/access-rules", wrapper.AdminCreateAccessRule)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/access-rules/{ruleId}", wrapper.AdminGetAccessRule)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/admin/access-rules/{ruleId}", wrapper.AdminUpdateAccessRule)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/admin/access-rules/{ruleId}/archive", wrapper.AdminArchiveAccessRule)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/access-rules/{ruleId}/versions", wrapper.AdminGetAccessRuleVersions)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/access-rules/{ruleId}/versions/{version}", wrapper.AdminGetAccessRuleVersion)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/deployment/version", wrapper.AdminGetDeploymentVersion)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/groups", wrapper.AdminListGroups)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/admin/groups", wrapper.AdminCreateGroup)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/admin/groups/{groupId}", wrapper.AdminDeleteGroup)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/groups/{groupId}", wrapper.AdminGetGroup)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/admin/groups/{groupId}", wrapper.AdminUpdateGroup)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/identity", wrapper.AdminGetIdentityConfiguration)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/admin/identity/sync", wrapper.AdminSyncIdentity)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/providers", wrapper.AdminListProviders)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/providers/{providerId}", wrapper.AdminGetProvider)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/providers/{providerId}/args/{argId}/options", wrapper.AdminListProviderArgOptions)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/requests", wrapper.AdminListRequests)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/requests/{requestId}", wrapper.AdminGetRequest)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/users", wrapper.AdminListUsers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/admin/users", wrapper.AdminCreateUser)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/admin/users/{userId}", wrapper.AdminUpdateUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/favorites", wrapper.UserListFavorites)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/favorites", wrapper.UserCreateFavorite)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/favorites/{id}", wrapper.UserDeleteFavorite)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/favorites/{id}", wrapper.UserGetFavorite)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/favorites/{id}", wrapper.UserUpdateFavorite)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/requests", wrapper.UserListRequests)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/requests", wrapper.UserCreateRequest)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/requests/past", wrapper.UserListRequestsPast)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/requests/upcoming", wrapper.UserListRequestsUpcoming)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/requests/{requestId}", wrapper.UserGetRequest)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/requests/{requestId}/access-instructions", wrapper.UserGetAccessInstructions)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/requests/{requestId}/access-token", wrapper.UserGetAccessToken)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/requests/{requestId}/cancel", wrapper.UserCancelRequest)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/requests/{requestId}/events", wrapper.UserListRequestEvents)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/requests/{requestId}/review", wrapper.UserReviewRequest)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/requests/{requestid}/revoke", wrapper.UserRevokeRequest)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/users/me", wrapper.UserGetMe)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/users/{userId}", wrapper.UserGetUser)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./accesshandler/openapi.yml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
