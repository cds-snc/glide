// Package types provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package types

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	externalRef0 "github.com/common-fate/common-fate/accesshandler/pkg/types"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// Defines values for AccessRuleStatus.
const (
	AccessRuleStatusACTIVE   AccessRuleStatus = "ACTIVE"
	AccessRuleStatusARCHIVED AccessRuleStatus = "ARCHIVED"
)

// Defines values for AccessRuleTargetDetailArgumentsFormElement.
const (
	AccessRuleTargetDetailArgumentsFormElementINPUT       AccessRuleTargetDetailArgumentsFormElement = "INPUT"
	AccessRuleTargetDetailArgumentsFormElementMULTISELECT AccessRuleTargetDetailArgumentsFormElement = "MULTISELECT"
)

// Defines values for ApprovalMethod.
const (
	AUTOMATIC ApprovalMethod = "AUTOMATIC"
	REVIEWED  ApprovalMethod = "REVIEWED"
)

// Defines values for ArgumentRequestFormElement.
const (
	ArgumentRequestFormElementSELECT ArgumentRequestFormElement = "SELECT"
)

// Defines values for ArgumentRuleFormElement.
const (
	ArgumentRuleFormElementINPUT       ArgumentRuleFormElement = "INPUT"
	ArgumentRuleFormElementMULTISELECT ArgumentRuleFormElement = "MULTISELECT"
	ArgumentRuleFormElementSELECT      ArgumentRuleFormElement = "SELECT"
)

// Defines values for GrantStatus.
const (
	GrantStatusACTIVE  GrantStatus = "ACTIVE"
	GrantStatusERROR   GrantStatus = "ERROR"
	GrantStatusEXPIRED GrantStatus = "EXPIRED"
	GrantStatusPENDING GrantStatus = "PENDING"
	GrantStatusREVOKED GrantStatus = "REVOKED"
)

// Defines values for IdpStatus.
const (
	IdpStatusACTIVE   IdpStatus = "ACTIVE"
	IdpStatusARCHIVED IdpStatus = "ARCHIVED"
)

// Defines values for ProviderSetupStatus.
const (
	COMPLETE                       ProviderSetupStatus = "COMPLETE"
	INITIALCONFIGURATIONINPROGRESS ProviderSetupStatus = "INITIAL_CONFIGURATION_IN_PROGRESS"
	VALIDATING                     ProviderSetupStatus = "VALIDATING"
	VALIDATIONFAILED               ProviderSetupStatus = "VALIDATION_FAILED"
	VALIDATIONSUCEEDED             ProviderSetupStatus = "VALIDATION_SUCEEDED"
)

// Defines values for ProviderSetupDiagnosticLogLevel.
const (
	ProviderSetupDiagnosticLogLevelERROR   ProviderSetupDiagnosticLogLevel = "ERROR"
	ProviderSetupDiagnosticLogLevelINFO    ProviderSetupDiagnosticLogLevel = "INFO"
	ProviderSetupDiagnosticLogLevelWARNING ProviderSetupDiagnosticLogLevel = "WARNING"
)

// Defines values for ProviderSetupValidationStatus.
const (
	ProviderSetupValidationStatusERROR      ProviderSetupValidationStatus = "ERROR"
	ProviderSetupValidationStatusINPROGRESS ProviderSetupValidationStatus = "IN_PROGRESS"
	ProviderSetupValidationStatusPENDING    ProviderSetupValidationStatus = "PENDING"
	ProviderSetupValidationStatusSUCCESS    ProviderSetupValidationStatus = "SUCCESS"
)

// Defines values for RequestArgumentFormElement.
const (
	RequestArgumentFormElementSELECT RequestArgumentFormElement = "SELECT"
)

// Defines values for RequestEventFromGrantStatus.
const (
	RequestEventFromGrantStatusACTIVE  RequestEventFromGrantStatus = "ACTIVE"
	RequestEventFromGrantStatusERROR   RequestEventFromGrantStatus = "ERROR"
	RequestEventFromGrantStatusEXPIRED RequestEventFromGrantStatus = "EXPIRED"
	RequestEventFromGrantStatusPENDING RequestEventFromGrantStatus = "PENDING"
	RequestEventFromGrantStatusREVOKED RequestEventFromGrantStatus = "REVOKED"
)

// Defines values for RequestEventToGrantStatus.
const (
	RequestEventToGrantStatusACTIVE  RequestEventToGrantStatus = "ACTIVE"
	RequestEventToGrantStatusERROR   RequestEventToGrantStatus = "ERROR"
	RequestEventToGrantStatusEXPIRED RequestEventToGrantStatus = "EXPIRED"
	RequestEventToGrantStatusPENDING RequestEventToGrantStatus = "PENDING"
	RequestEventToGrantStatusREVOKED RequestEventToGrantStatus = "REVOKED"
)

// Defines values for RequestStatus.
const (
	RequestStatusAPPROVED  RequestStatus = "APPROVED"
	RequestStatusCANCELLED RequestStatus = "CANCELLED"
	RequestStatusDECLINED  RequestStatus = "DECLINED"
	RequestStatusPENDING   RequestStatus = "PENDING"
)

// Defines values for ReviewDecision.
const (
	ReviewDecisionAPPROVED ReviewDecision = "APPROVED"
	ReviewDecisionDECLINED ReviewDecision = "DECLINED"
)

// Defines values for UserLookupAccessRuleParamsType.
const (
	CommonfateawsSso UserLookupAccessRuleParamsType = "commonfate/aws-sso"
)

// Defines values for AdminListAccessRulesParamsStatus.
const (
	ACTIVE   AdminListAccessRulesParamsStatus = "ACTIVE"
	ARCHIVED AdminListAccessRulesParamsStatus = "ARCHIVED"
)

// Defines values for AdminListGroupsParamsSource.
const (
	EXTERNAL AdminListGroupsParamsSource = "EXTERNAL"
	INTERNAL AdminListGroupsParamsSource = "INTERNAL"
)

// Defines values for AdminListRequestsParamsStatus.
const (
	AdminListRequestsParamsStatusAPPROVED  AdminListRequestsParamsStatus = "APPROVED"
	AdminListRequestsParamsStatusCANCELLED AdminListRequestsParamsStatus = "CANCELLED"
	AdminListRequestsParamsStatusDECLINED  AdminListRequestsParamsStatus = "DECLINED"
	AdminListRequestsParamsStatusPENDING   AdminListRequestsParamsStatus = "PENDING"
)

// Defines values for UserListRequestsParamsStatus.
const (
	APPROVED  UserListRequestsParamsStatus = "APPROVED"
	CANCELLED UserListRequestsParamsStatus = "CANCELLED"
	DECLINED  UserListRequestsParamsStatus = "DECLINED"
	PENDING   UserListRequestsParamsStatus = "PENDING"
)

// AccessRule Access Rule contains information for an end user to make a request for access.
type AccessRule struct {
	Description string `json:"description"`
	ID          string `json:"id"`
	IsCurrent   bool   `json:"isCurrent"`
	Name        string `json:"name"`

	// Target A target for an access rule
	Target AccessRuleTarget `json:"target"`

	// TimeConstraints Time configuration for an Access Rule.
	TimeConstraints TimeConstraints `json:"timeConstraints"`

	// Version A unique version identifier for the Access Rule. Updating a rule creates a new version.
	// When a rule is updated, it's ID remains consistent.
	Version string `json:"version"`
}

// AccessRuleDetail AccessRuleDetail contains detailed information about a rule and is used in administrative apis.
type AccessRuleDetail struct {
	// Approval Approver config for access rules
	Approval    ApproverConfig `json:"approval"`
	Description string         `json:"description"`

	// Groups The group IDs that the access rule applies to.
	Groups    []string           `json:"groups"`
	ID        string             `json:"id"`
	IsCurrent bool               `json:"isCurrent"`
	Metadata  AccessRuleMetadata `json:"metadata"`
	Name      string             `json:"name"`

	// Status The status of an Access Rule.
	Status AccessRuleStatus `json:"status"`

	// Target A detailed target for an access rule
	Target AccessRuleTargetDetail `json:"target"`

	// TimeConstraints Time configuration for an Access Rule.
	TimeConstraints TimeConstraints `json:"timeConstraints"`

	// Version A unique version identifier for the Access Rule. Updating a rule creates a new version.
	// When a rule is updated, it's ID remains consistent.
	Version string `json:"version"`
}

// AccessRuleMetadata defines model for AccessRuleMetadata.
type AccessRuleMetadata struct {
	CreatedAt     time.Time `json:"createdAt"`
	CreatedBy     string    `json:"createdBy"`
	UpdateMessage *string   `json:"updateMessage,omitempty"`
	UpdatedAt     time.Time `json:"updatedAt"`
	UpdatedBy     string    `json:"updatedBy"`
}

// AccessRuleStatus The status of an Access Rule.
type AccessRuleStatus string

// AccessRuleTarget A target for an access rule
type AccessRuleTarget struct {
	// Provider Provider
	Provider Provider `json:"provider"`
}

// AccessRuleTargetDetail A detailed target for an access rule
type AccessRuleTargetDetail struct {
	// Provider Provider
	Provider Provider                                   `json:"provider"`
	With     map[string]AccessRuleTargetDetailArguments `json:"with"`
}

// AccessRuleTargetDetailArguments defines model for AccessRuleTargetDetailArguments.
type AccessRuleTargetDetailArguments struct {
	FormElement AccessRuleTargetDetailArgumentsFormElement `json:"formElement"`
	Groupings   map[string][]string                        `json:"groupings"`
	Values      []string                                   `json:"values"`
}

// AccessRuleTargetDetailArgumentsFormElement defines model for AccessRuleTargetDetailArguments.FormElement.
type AccessRuleTargetDetailArgumentsFormElement string

// ApprovalMethod Describes whether a request has been approved automatically or from a review
type ApprovalMethod string

// ApproverConfig Approver config for access rules
type ApproverConfig struct {
	Groups []string `json:"groups"`

	// Users The user IDs of the approvers for the request.
	Users []string `json:"users"`
}

// ArgSchema defines model for ArgSchema.
type ArgSchema map[string]Argument

// Argument defines model for Argument.
type Argument struct {
	Description *string           `json:"description,omitempty"`
	Groups      *map[string]Group `json:"groups,omitempty"`
	Id          string            `json:"id"`

	// RequestFormElement Optional form element for the request form, if not provided, defaults to multiselect
	RequestFormElement *ArgumentRequestFormElement `json:"requestFormElement,omitempty"`
	RuleFormElement    ArgumentRuleFormElement     `json:"ruleFormElement"`
	Title              string                      `json:"title"`
}

// ArgumentRequestFormElement Optional form element for the request form, if not provided, defaults to multiselect
type ArgumentRequestFormElement string

// ArgumentRuleFormElement defines model for Argument.RuleFormElement.
type ArgumentRuleFormElement string

// CreateAccessRuleTarget a request body for creating a Access Rule Target
type CreateAccessRuleTarget struct {
	ProviderId string                                           `json:"providerId"`
	With       map[string]CreateAccessRuleTargetDetailArguments `json:"with"`
}

// CreateAccessRuleTargetDetailArguments defines model for CreateAccessRuleTargetDetailArguments.
type CreateAccessRuleTargetDetailArguments struct {
	Groupings map[string][]string `json:"groupings"`
	Values    []string            `json:"values"`
}

// CreateRequestWith defines model for CreateRequestWith.
type CreateRequestWith map[string][]string

// CreateRequestWithSubRequest defines model for CreateRequestWithSubRequest.
type CreateRequestWithSubRequest = []CreateRequestWith

// Favorite defines model for Favorite.
type Favorite struct {
	Id     string `json:"id"`
	Name   string `json:"name"`
	RuleId string `json:"ruleId"`
}

// FavoriteDetail Detailed object for a Favorite.
type FavoriteDetail struct {
	Id     string                      `json:"id"`
	Name   string                      `json:"name"`
	Reason *string                     `json:"reason,omitempty"`
	Timing RequestTiming               `json:"timing"`
	With   CreateRequestWithSubRequest `json:"with"`
}

// Grant A temporary assignment of a user to a principal.
type Grant struct {
	// End The end time of the grant.
	End time.Time `json:"end"`

	// Provider The ID of the provider to grant access to.
	Provider string `json:"provider"`

	// Start The start time of the grant.
	Start time.Time `json:"start"`

	// Status The current state of the grant.
	Status GrantStatus `json:"status"`

	// Subject The email address of the user to grant access to.
	Subject openapi_types.Email `json:"subject"`
}

// GrantStatus The current state of the grant.
type GrantStatus string

// Group defines model for Group.
type Group struct {
	Description string   `json:"description"`
	Id          string   `json:"id"`
	MemberCount int      `json:"memberCount"`
	Members     []string `json:"members"`
	Name        string   `json:"name"`
	Source      string   `json:"source"`
}

// GroupOption defines model for GroupOption.
type GroupOption struct {
	Children    []string `json:"children"`
	Description *string  `json:"description,omitempty"`
	Label       string   `json:"label"`

	// LabelPrefix A label prefix allows additional context to be prefixed to the label when displayed in a form
	LabelPrefix *string `json:"labelPrefix,omitempty"`
	Value       string  `json:"value"`
}

// Groups defines model for Groups.
type Groups map[string][]GroupOption

// IdpStatus defines model for IdpStatus.
type IdpStatus string

// KeyValue defines model for KeyValue.
type KeyValue struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// LookupAccessRule A matched access rule with option values if they are required for the access rule request
type LookupAccessRule struct {
	// AccessRule Access Rule contains information for an end user to make a request for access.
	AccessRule AccessRule `json:"accessRule"`

	// SelectableWithOptionValues If the matched access rule has selectable fields, this array will contain the matched values to be used to prefill the form when requesting
	SelectableWithOptionValues *[]KeyValue `json:"selectableWithOptionValues,omitempty"`
}

// Provider Provider
type Provider struct {
	Id     string    `json:"id"`
	Schema ArgSchema `json:"schema"`
	Type   string    `json:"type"`
}

// ProviderConfigField defines model for ProviderConfigField.
type ProviderConfigField struct {
	Description string `json:"description"`
	Id          string `json:"id"`

	// IsOptional Whether the config value is optional.
	IsOptional bool `json:"isOptional"`

	// IsSecret Whether or not the config field is a secret (like an API key or a password)
	IsSecret bool   `json:"isSecret"`
	Name     string `json:"name"`

	// SecretPath the path to where the secret will be stored, in a secrets manager like AWS SSM Parameter Store.
	SecretPath *string `json:"secretPath,omitempty"`
}

// ProviderConfigValue defines model for ProviderConfigValue.
type ProviderConfigValue struct {
	// Id The ID of the config field.
	Id string `json:"id"`

	// Value The value entered by the user.
	Value string `json:"value"`
}

// ProviderSetup A provider in the process of being set up through the guided setup workflow in Common Fate. These providers are **not** yet active.
type ProviderSetup struct {
	ConfigValidation []externalRef0.ProviderConfigValidation `json:"configValidation"`

	// ConfigValues The current configuration values.
	ConfigValues map[string]string `json:"configValues"`

	// Id A unique ID for the provider setup. This is a random KSUID to avoid potential conflicts with user-specified provider IDs in the `deployment.yml` file.
	Id string `json:"id"`

	// Status The status of the setup process.
	Status ProviderSetupStatus `json:"status"`

	// Steps An overview of the steps indicating whether they are complete.
	Steps []ProviderSetupStepOverview `json:"steps"`

	// Type The type of the Access Provider being set up.
	Type string `json:"type"`

	// Version The version of the provider.
	Version string `json:"version"`
}

// ProviderSetupStatus The status of the setup process.
type ProviderSetupStatus string

// ProviderSetupDiagnosticLog A log entry related to a provider setup validation.
type ProviderSetupDiagnosticLog struct {
	// Level The log level.
	Level ProviderSetupDiagnosticLogLevel `json:"level"`

	// Msg The log message.
	Msg string `json:"msg"`
}

// ProviderSetupDiagnosticLogLevel The log level.
type ProviderSetupDiagnosticLogLevel string

// ProviderSetupInstructions defines model for ProviderSetupInstructions.
type ProviderSetupInstructions struct {
	StepDetails []ProviderSetupStepDetails `json:"stepDetails"`
}

// ProviderSetupStepDetails defines model for ProviderSetupStepDetails.
type ProviderSetupStepDetails struct {
	ConfigFields []ProviderConfigField `json:"configFields"`
	Instructions string                `json:"instructions"`
	Title        string                `json:"title"`
}

// ProviderSetupStepOverview Indicates whether a setup step is complete or not.
type ProviderSetupStepOverview struct {
	// Complete Whether the step has been completed.
	Complete bool `json:"complete"`
}

// ProviderSetupValidation A validation against the configuration values of the Access Provider.
type ProviderSetupValidation struct {
	// FieldsValidated The particular config fields validated, if any.
	FieldsValidated []interface{} `json:"fieldsValidated"`

	// Id The ID of the validation, such as `list-sso-users`.
	Id   string                        `json:"id"`
	Logs *[]ProviderSetupDiagnosticLog `json:"logs,omitempty"`

	// Status The status of the validation.
	Status ProviderSetupValidationStatus `json:"status"`
}

// ProviderSetupValidationStatus The status of the validation.
type ProviderSetupValidationStatus string

// Request A request to access something made by an end user in Common Fate.
type Request struct {
	AccessRuleId      string `json:"accessRuleId"`
	AccessRuleVersion string `json:"accessRuleVersion"`

	// ApprovalMethod Describes whether a request has been approved automatically or from a review
	ApprovalMethod *ApprovalMethod `json:"approvalMethod,omitempty"`

	// Grant A temporary assignment of a user to a principal.
	Grant       *Grant    `json:"grant,omitempty"`
	ID          string    `json:"id"`
	Reason      *string   `json:"reason,omitempty"`
	RequestedAt time.Time `json:"requestedAt"`
	Requestor   string    `json:"requestor"`

	// Status The status of an Access Request.
	Status    RequestStatus `json:"status"`
	Timing    RequestTiming `json:"timing"`
	UpdatedAt time.Time     `json:"updatedAt"`
}

// RequestAccessRule Access Rule contains information for an end user to make a request for access.
type RequestAccessRule struct {
	CanRequest  bool   `json:"canRequest"`
	Description string `json:"description"`
	ID          string `json:"id"`
	IsCurrent   bool   `json:"isCurrent"`
	Name        string `json:"name"`

	// Target A detailed target for an access rule request
	Target RequestAccessRuleTarget `json:"target"`

	// TimeConstraints Time configuration for an Access Rule.
	TimeConstraints TimeConstraints `json:"timeConstraints"`

	// Version A unique version identifier for the Access Rule. Updating a rule creates a new version.
	// When a rule is updated, it's ID remains consistent.
	Version string `json:"version"`
}

// RequestAccessRuleTarget A detailed target for an access rule request
type RequestAccessRuleTarget struct {
	Arguments map[string]RequestArgument `json:"arguments"`

	// Provider Provider
	Provider Provider `json:"provider"`
}

// RequestArgument defines model for RequestArgument.
type RequestArgument struct {
	Description *string                     `json:"description,omitempty"`
	FormElement *RequestArgumentFormElement `json:"formElement,omitempty"`
	Options     []WithOption                `json:"options"`

	// RequiresSelection This will be true if a selection is require when creating a request
	RequiresSelection bool   `json:"requiresSelection"`
	Title             string `json:"title"`
}

// RequestArgumentFormElement defines model for RequestArgument.FormElement.
type RequestArgumentFormElement string

// RequestDetail A request to access something made by an end user in Common Fate.
type RequestDetail struct {
	// AccessRule Access Rule contains information for an end user to make a request for access.
	AccessRule AccessRule `json:"accessRule"`

	// ApprovalMethod Describes whether a request has been approved automatically or from a review
	ApprovalMethod *ApprovalMethod `json:"approvalMethod,omitempty"`
	Arguments      map[string]With `json:"arguments"`

	// CanReview true if the requesting user is a reviewer of this request.
	CanReview bool `json:"canReview"`

	// Grant A temporary assignment of a user to a principal.
	Grant       *Grant    `json:"grant,omitempty"`
	ID          string    `json:"id"`
	Reason      *string   `json:"reason,omitempty"`
	RequestedAt time.Time `json:"requestedAt"`
	Requestor   string    `json:"requestor"`

	// Status The status of an Access Request.
	Status    RequestStatus `json:"status"`
	Timing    RequestTiming `json:"timing"`
	UpdatedAt time.Time     `json:"updatedAt"`
}

// RequestEvent defines model for RequestEvent.
type RequestEvent struct {
	Actor     *string   `json:"actor,omitempty"`
	CreatedAt time.Time `json:"createdAt"`

	// FromGrantStatus The current state of the grant.
	FromGrantStatus *RequestEventFromGrantStatus `json:"fromGrantStatus,omitempty"`

	// FromStatus The status of an Access Request.
	FromStatus         *RequestStatus `json:"fromStatus,omitempty"`
	FromTiming         *RequestTiming `json:"fromTiming,omitempty"`
	GrantCreated       *bool          `json:"grantCreated,omitempty"`
	GrantFailureReason *string        `json:"grantFailureReason,omitempty"`
	Id                 string         `json:"id"`

	// RecordedEvent An event which was recorded relating to the grant.
	RecordedEvent  *map[string]string `json:"recordedEvent,omitempty"`
	RequestCreated *bool              `json:"requestCreated,omitempty"`
	RequestId      string             `json:"requestId"`

	// ToGrantStatus The current state of the grant.
	ToGrantStatus *RequestEventToGrantStatus `json:"toGrantStatus,omitempty"`

	// ToStatus The status of an Access Request.
	ToStatus *RequestStatus `json:"toStatus,omitempty"`
	ToTiming *RequestTiming `json:"toTiming,omitempty"`
}

// RequestEventFromGrantStatus The current state of the grant.
type RequestEventFromGrantStatus string

// RequestEventToGrantStatus The current state of the grant.
type RequestEventToGrantStatus string

// RequestStatus The status of an Access Request.
type RequestStatus string

// RequestTiming defines model for RequestTiming.
type RequestTiming struct {
	DurationSeconds int `json:"durationSeconds"`

	// StartTime iso8601 timestamp in UTC timezone
	StartTime *time.Time `json:"startTime,omitempty"`
}

// ReviewDecision A decision made on an Access Request.
type ReviewDecision string

// TimeConstraints Time configuration for an Access Rule.
type TimeConstraints struct {
	// MaxDurationSeconds The maximum duration in seconds the access is allowed for.
	MaxDurationSeconds int `json:"maxDurationSeconds"`
}

// User defines model for User.
type User struct {
	Email     string    `json:"email"`
	FirstName string    `json:"firstName"`
	Groups    []string  `json:"groups"`
	Id        string    `json:"id"`
	LastName  string    `json:"lastName"`
	Picture   string    `json:"picture"`
	Status    IdpStatus `json:"status"`
	UpdatedAt time.Time `json:"updatedAt"`
}

// With defines model for With.
type With struct {
	FieldDescription  *string `json:"fieldDescription,omitempty"`
	Label             string  `json:"label"`
	OptionDescription *string `json:"optionDescription,omitempty"`
	Title             string  `json:"title"`
	Value             string  `json:"value"`
}

// WithOption defines model for WithOption.
type WithOption struct {
	Description *string `json:"description,omitempty"`
	Label       string  `json:"label"`
	Valid       bool    `json:"valid"`
	Value       string  `json:"value"`
}

// AccessTokenResponse defines model for AccessTokenResponse.
type AccessTokenResponse struct {
	HasToken bool    `json:"hasToken"`
	Token    *string `json:"token,omitempty"`
}

// AuthUserResponse defines model for AuthUserResponse.
type AuthUserResponse struct {
	// IsAdmin Whether the user is an administrator of Common Fate.
	IsAdmin bool `json:"isAdmin"`
	User    User `json:"user"`
}

// CompleteProviderSetupResponse defines model for CompleteProviderSetupResponse.
type CompleteProviderSetupResponse struct {
	// DeploymentConfigUpdateRequired Whether a manual update is required to the Common Fate deployment configuration (`deployment.yml`) to activate the provider.
	DeploymentConfigUpdateRequired bool `json:"deploymentConfigUpdateRequired"`
}

// DeploymentVersionResponse defines model for DeploymentVersionResponse.
type DeploymentVersionResponse struct {
	// Version The deployment version. Will be a semver, such as "v0.9.0" for official releases, or "dev+GIT_HASH" for pre-release builds.
	Version string `json:"version"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error string `json:"error"`
}

// IdentityConfigurationResponse defines model for IdentityConfigurationResponse.
type IdentityConfigurationResponse struct {
	AdministratorGroupId string `json:"administratorGroupId"`
	IdentityProvider     string `json:"identityProvider"`
}

// ListAccessRuleApproversResponse defines model for ListAccessRuleApproversResponse.
type ListAccessRuleApproversResponse struct {
	Next  *string  `json:"next"`
	Users []string `json:"users"`
}

// ListAccessRulesDetailResponse defines model for ListAccessRulesDetailResponse.
type ListAccessRulesDetailResponse struct {
	AccessRules []AccessRuleDetail `json:"accessRules"`
	Next        *string            `json:"next"`
}

// ListAccessRulesResponse defines model for ListAccessRulesResponse.
type ListAccessRulesResponse struct {
	AccessRules []AccessRule `json:"accessRules"`
	Next        *string      `json:"next"`
}

// ListFavoritesResponse defines model for ListFavoritesResponse.
type ListFavoritesResponse struct {
	Favorites []Favorite `json:"favorites"`
	Next      *string    `json:"next"`
}

// ListGroupsResponse defines model for ListGroupsResponse.
type ListGroupsResponse struct {
	Groups []Group `json:"groups"`
	Next   *string `json:"next"`
}

// ListProviderSetupsResponse defines model for ListProviderSetupsResponse.
type ListProviderSetupsResponse struct {
	ProviderSetups []ProviderSetup `json:"providerSetups"`
}

// ListRequestEventsResponse defines model for ListRequestEventsResponse.
type ListRequestEventsResponse struct {
	Events []RequestEvent `json:"events"`
	Next   *string        `json:"next"`
}

// ListRequestsResponse defines model for ListRequestsResponse.
type ListRequestsResponse struct {
	Next     *string   `json:"next"`
	Requests []Request `json:"requests"`
}

// ListUserResponse defines model for ListUserResponse.
type ListUserResponse struct {
	Next  *string `json:"next"`
	Users []User  `json:"users"`
}

// ProviderSetupResponse A provider in the process of being set up through the guided setup workflow in Common Fate. These providers are **not** yet active.
type ProviderSetupResponse = ProviderSetup

// ReviewResponse defines model for ReviewResponse.
type ReviewResponse struct {
	// Request A request to access something made by an end user in Common Fate.
	Request *Request `json:"request,omitempty"`
}

// CreateAccessRuleRequest defines model for CreateAccessRuleRequest.
type CreateAccessRuleRequest struct {
	// Approval Approver config for access rules
	Approval    ApproverConfig `json:"approval"`
	Description string         `json:"description"`

	// Groups The group IDs that the access rule applies to.
	Groups []string `json:"groups"`
	Name   string   `json:"name"`

	// Target a request body for creating a Access Rule Target
	Target CreateAccessRuleTarget `json:"target"`

	// TimeConstraints Time configuration for an Access Rule.
	TimeConstraints TimeConstraints `json:"timeConstraints"`
}

// CreateFavoriteRequest defines model for CreateFavoriteRequest.
type CreateFavoriteRequest struct {
	AccessRuleId string                       `json:"accessRuleId"`
	Name         string                       `json:"name"`
	Reason       *string                      `json:"reason,omitempty"`
	Timing       RequestTiming                `json:"timing"`
	With         *CreateRequestWithSubRequest `json:"with,omitempty"`
}

// CreateGroupRequest defines model for CreateGroupRequest.
type CreateGroupRequest struct {
	Description *string  `json:"description,omitempty"`
	Members     []string `json:"members"`
	Name        string   `json:"name"`
}

// CreateProviderSetupRequest defines model for CreateProviderSetupRequest.
type CreateProviderSetupRequest struct {
	// ProviderType The type of the provider to set up.
	ProviderType string `json:"providerType"`
}

// CreateRequestRequest defines model for CreateRequestRequest.
type CreateRequestRequest struct {
	AccessRuleId string                       `json:"accessRuleId"`
	Reason       *string                      `json:"reason,omitempty"`
	Timing       RequestTiming                `json:"timing"`
	With         *CreateRequestWithSubRequest `json:"with,omitempty"`
}

// CreateUserRequest defines model for CreateUserRequest.
type CreateUserRequest struct {
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"firstName"`
	IsAdmin   bool                `json:"isAdmin"`
	LastName  string              `json:"lastName"`
}

// ProviderSetupStepCompleteRequest defines model for ProviderSetupStepCompleteRequest.
type ProviderSetupStepCompleteRequest struct {
	// Complete Whether the step is complete or not.
	Complete bool `json:"complete"`

	// ConfigValues The config values entered by the user which correspond to the setup step.
	ConfigValues map[string]string `json:"configValues"`
}

// ReviewRequest defines model for ReviewRequest.
type ReviewRequest struct {
	Comment *string `json:"comment,omitempty"`

	// Decision A decision made on an Access Request.
	Decision       ReviewDecision `json:"decision"`
	OverrideTiming *RequestTiming `json:"overrideTiming,omitempty"`
}

// UserLookupAccessRuleParams defines parameters for UserLookupAccessRule.
type UserLookupAccessRuleParams struct {
	// Type the provider type i.e. commonfate/aws-sso. type should be encoded i.e.  backslash -> %2
	Type *UserLookupAccessRuleParamsType `form:"type,omitempty" json:"type,omitempty"`

	// PermissionSetArnLabel the permissionSetArn label, typically resembles a role name i.e. AdminstratorAccess
	PermissionSetArnLabel *string `form:"permissionSetArn.label,omitempty" json:"permissionSetArn.label,omitempty"`

	// AccountId the aws account id
	AccountId *string `form:"accountId,omitempty" json:"accountId,omitempty"`
}

// UserLookupAccessRuleParamsType defines parameters for UserLookupAccessRule.
type UserLookupAccessRuleParamsType string

// AdminListAccessRulesParams defines parameters for AdminListAccessRules.
type AdminListAccessRulesParams struct {
	// Status Filter Access Rules by a particular status.
	Status *AdminListAccessRulesParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// NextToken encrypted token containing pagination info
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`
}

// AdminListAccessRulesParamsStatus defines parameters for AdminListAccessRules.
type AdminListAccessRulesParamsStatus string

// AdminCreateAccessRuleJSONBody defines parameters for AdminCreateAccessRule.
type AdminCreateAccessRuleJSONBody struct {
	// Approval Approver config for access rules
	Approval    ApproverConfig `json:"approval"`
	Description string         `json:"description"`

	// Groups The group IDs that the access rule applies to.
	Groups []string `json:"groups"`
	Name   string   `json:"name"`

	// Target a request body for creating a Access Rule Target
	Target CreateAccessRuleTarget `json:"target"`

	// TimeConstraints Time configuration for an Access Rule.
	TimeConstraints TimeConstraints `json:"timeConstraints"`
}

// AdminUpdateAccessRuleJSONBody defines parameters for AdminUpdateAccessRule.
type AdminUpdateAccessRuleJSONBody struct {
	// Approval Approver config for access rules
	Approval    ApproverConfig `json:"approval"`
	Description string         `json:"description"`

	// Groups The group IDs that the access rule applies to.
	Groups []string `json:"groups"`
	Name   string   `json:"name"`

	// Target a request body for creating a Access Rule Target
	Target CreateAccessRuleTarget `json:"target"`

	// TimeConstraints Time configuration for an Access Rule.
	TimeConstraints TimeConstraints `json:"timeConstraints"`
}

// AdminListGroupsParams defines parameters for AdminListGroups.
type AdminListGroupsParams struct {
	// NextToken encrypted token containing pagination info
	NextToken *string                      `form:"nextToken,omitempty" json:"nextToken,omitempty"`
	Source    *AdminListGroupsParamsSource `form:"source,omitempty" json:"source,omitempty"`
}

// AdminListGroupsParamsSource defines parameters for AdminListGroups.
type AdminListGroupsParamsSource string

// AdminCreateGroupJSONBody defines parameters for AdminCreateGroup.
type AdminCreateGroupJSONBody struct {
	Description *string  `json:"description,omitempty"`
	Members     []string `json:"members"`
	Name        string   `json:"name"`
}

// AdminUpdateGroupJSONBody defines parameters for AdminUpdateGroup.
type AdminUpdateGroupJSONBody struct {
	Description *string  `json:"description,omitempty"`
	Members     []string `json:"members"`
	Name        string   `json:"name"`
}

// AdminListProviderArgOptionsParams defines parameters for AdminListProviderArgOptions.
type AdminListProviderArgOptionsParams struct {
	// Refresh invalidate the cache and refresh the provider's options.
	Refresh *bool `form:"refresh,omitempty" json:"refresh,omitempty"`
}

// AdminCreateProvidersetupJSONBody defines parameters for AdminCreateProvidersetup.
type AdminCreateProvidersetupJSONBody struct {
	// ProviderType The type of the provider to set up.
	ProviderType string `json:"providerType"`
}

// AdminSubmitProvidersetupStepJSONBody defines parameters for AdminSubmitProvidersetupStep.
type AdminSubmitProvidersetupStepJSONBody struct {
	// Complete Whether the step is complete or not.
	Complete bool `json:"complete"`

	// ConfigValues The config values entered by the user which correspond to the setup step.
	ConfigValues map[string]string `json:"configValues"`
}

// AdminListRequestsParams defines parameters for AdminListRequests.
type AdminListRequestsParams struct {
	// Status omit this param to view all results
	Status *AdminListRequestsParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// NextToken encrypted token containing pagination info
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`
}

// AdminListRequestsParamsStatus defines parameters for AdminListRequests.
type AdminListRequestsParamsStatus string

// AdminListUsersParams defines parameters for AdminListUsers.
type AdminListUsersParams struct {
	// NextToken encrypted token containing pagination info
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`
}

// AdminCreateUserJSONBody defines parameters for AdminCreateUser.
type AdminCreateUserJSONBody struct {
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"firstName"`
	IsAdmin   bool                `json:"isAdmin"`
	LastName  string              `json:"lastName"`
}

// AdminUpdateUserJSONBody defines parameters for AdminUpdateUser.
type AdminUpdateUserJSONBody struct {
	Groups []string `json:"groups"`
}

// UserCreateFavoriteJSONBody defines parameters for UserCreateFavorite.
type UserCreateFavoriteJSONBody struct {
	AccessRuleId string                       `json:"accessRuleId"`
	Name         string                       `json:"name"`
	Reason       *string                      `json:"reason,omitempty"`
	Timing       RequestTiming                `json:"timing"`
	With         *CreateRequestWithSubRequest `json:"with,omitempty"`
}

// UserUpdateFavoriteJSONBody defines parameters for UserUpdateFavorite.
type UserUpdateFavoriteJSONBody struct {
	AccessRuleId string                       `json:"accessRuleId"`
	Name         string                       `json:"name"`
	Reason       *string                      `json:"reason,omitempty"`
	Timing       RequestTiming                `json:"timing"`
	With         *CreateRequestWithSubRequest `json:"with,omitempty"`
}

// UserListRequestsParams defines parameters for UserListRequests.
type UserListRequestsParams struct {
	// Status omit this param to view all results
	Status *UserListRequestsParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// Reviewer show requests that the user is a reviewer for, rather than requests that the user has made themselves
	Reviewer *bool `form:"reviewer,omitempty" json:"reviewer,omitempty"`

	// NextToken encrypted token containing pagination info
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`
}

// UserListRequestsParamsStatus defines parameters for UserListRequests.
type UserListRequestsParamsStatus string

// UserCreateRequestJSONBody defines parameters for UserCreateRequest.
type UserCreateRequestJSONBody struct {
	AccessRuleId string                       `json:"accessRuleId"`
	Reason       *string                      `json:"reason,omitempty"`
	Timing       RequestTiming                `json:"timing"`
	With         *CreateRequestWithSubRequest `json:"with,omitempty"`
}

// UserListRequestsPastParams defines parameters for UserListRequestsPast.
type UserListRequestsPastParams struct {
	// NextToken encrypted token containing pagination info
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`
}

// UserListRequestsUpcomingParams defines parameters for UserListRequestsUpcoming.
type UserListRequestsUpcomingParams struct {
	// NextToken encrypted token containing pagination info
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`
}

// UserReviewRequestJSONBody defines parameters for UserReviewRequest.
type UserReviewRequestJSONBody struct {
	Comment *string `json:"comment,omitempty"`

	// Decision A decision made on an Access Request.
	Decision       ReviewDecision `json:"decision"`
	OverrideTiming *RequestTiming `json:"overrideTiming,omitempty"`
}

// AdminCreateAccessRuleJSONRequestBody defines body for AdminCreateAccessRule for application/json ContentType.
type AdminCreateAccessRuleJSONRequestBody AdminCreateAccessRuleJSONBody

// AdminUpdateAccessRuleJSONRequestBody defines body for AdminUpdateAccessRule for application/json ContentType.
type AdminUpdateAccessRuleJSONRequestBody AdminUpdateAccessRuleJSONBody

// AdminCreateGroupJSONRequestBody defines body for AdminCreateGroup for application/json ContentType.
type AdminCreateGroupJSONRequestBody AdminCreateGroupJSONBody

// AdminUpdateGroupJSONRequestBody defines body for AdminUpdateGroup for application/json ContentType.
type AdminUpdateGroupJSONRequestBody AdminUpdateGroupJSONBody

// AdminCreateProvidersetupJSONRequestBody defines body for AdminCreateProvidersetup for application/json ContentType.
type AdminCreateProvidersetupJSONRequestBody AdminCreateProvidersetupJSONBody

// AdminSubmitProvidersetupStepJSONRequestBody defines body for AdminSubmitProvidersetupStep for application/json ContentType.
type AdminSubmitProvidersetupStepJSONRequestBody AdminSubmitProvidersetupStepJSONBody

// AdminCreateUserJSONRequestBody defines body for AdminCreateUser for application/json ContentType.
type AdminCreateUserJSONRequestBody AdminCreateUserJSONBody

// AdminUpdateUserJSONRequestBody defines body for AdminUpdateUser for application/json ContentType.
type AdminUpdateUserJSONRequestBody AdminUpdateUserJSONBody

// UserCreateFavoriteJSONRequestBody defines body for UserCreateFavorite for application/json ContentType.
type UserCreateFavoriteJSONRequestBody UserCreateFavoriteJSONBody

// UserUpdateFavoriteJSONRequestBody defines body for UserUpdateFavorite for application/json ContentType.
type UserUpdateFavoriteJSONRequestBody UserUpdateFavoriteJSONBody

// UserCreateRequestJSONRequestBody defines body for UserCreateRequest for application/json ContentType.
type UserCreateRequestJSONRequestBody UserCreateRequestJSONBody

// UserReviewRequestJSONRequestBody defines body for UserReviewRequest for application/json ContentType.
type UserReviewRequestJSONRequestBody UserReviewRequestJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List Access Rules
	// (GET /api/v1/access-rules)
	UserListAccessRules(w http.ResponseWriter, r *http.Request)
	// Lookup an access rule based on the target
	// (GET /api/v1/access-rules/lookup)
	UserLookupAccessRule(w http.ResponseWriter, r *http.Request, params UserLookupAccessRuleParams)
	// Get Access Rule
	// (GET /api/v1/access-rules/{ruleId})
	UserGetAccessRule(w http.ResponseWriter, r *http.Request, ruleId string)
	// List Access Rule approvers
	// (GET /api/v1/access-rules/{ruleId}/approvers)
	UserGetAccessRuleApprovers(w http.ResponseWriter, r *http.Request, ruleId string)
	// List Access Rules
	// (GET /api/v1/admin/access-rules)
	AdminListAccessRules(w http.ResponseWriter, r *http.Request, params AdminListAccessRulesParams)
	// Create Access Rule
	// (POST /api/v1/admin/access-rules)
	AdminCreateAccessRule(w http.ResponseWriter, r *http.Request)
	// Get Access Rule
	// (GET /api/v1/admin/access-rules/{ruleId})
	AdminGetAccessRule(w http.ResponseWriter, r *http.Request, ruleId string)
	// Update Access Rule
	// (PUT /api/v1/admin/access-rules/{ruleId})
	AdminUpdateAccessRule(w http.ResponseWriter, r *http.Request, ruleId string)
	// Archive Access Rule
	// (POST /api/v1/admin/access-rules/{ruleId}/archive)
	AdminArchiveAccessRule(w http.ResponseWriter, r *http.Request, ruleId string)
	// Get Access Rule version history
	// (GET /api/v1/admin/access-rules/{ruleId}/versions)
	AdminGetAccessRuleVersions(w http.ResponseWriter, r *http.Request, ruleId string)
	// Get Access Rule Version
	// (GET /api/v1/admin/access-rules/{ruleId}/versions/{version})
	AdminGetAccessRuleVersion(w http.ResponseWriter, r *http.Request, ruleId string, version string)
	// Get deployment version details
	// (GET /api/v1/admin/deployment/version)
	AdminGetDeploymentVersion(w http.ResponseWriter, r *http.Request)
	// List groups
	// (GET /api/v1/admin/groups)
	AdminListGroups(w http.ResponseWriter, r *http.Request, params AdminListGroupsParams)
	// Create Group
	// (POST /api/v1/admin/groups)
	AdminCreateGroup(w http.ResponseWriter, r *http.Request)
	// Delete Group
	// (DELETE /api/v1/admin/groups/{groupId})
	AdminDeleteGroup(w http.ResponseWriter, r *http.Request, groupId string)
	// Get Group Details
	// (GET /api/v1/admin/groups/{groupId})
	AdminGetGroup(w http.ResponseWriter, r *http.Request, groupId string)
	// Update Group
	// (PUT /api/v1/admin/groups/{groupId})
	AdminUpdateGroup(w http.ResponseWriter, r *http.Request, groupId string)
	// Get identity configuration
	// (GET /api/v1/admin/identity)
	AdminGetIdentityConfiguration(w http.ResponseWriter, r *http.Request)
	// Sync Identity
	// (POST /api/v1/admin/identity/sync)
	AdminSyncIdentity(w http.ResponseWriter, r *http.Request)
	// List providers
	// (GET /api/v1/admin/providers)
	AdminListProviders(w http.ResponseWriter, r *http.Request)
	// List providers
	// (GET /api/v1/admin/providers/{providerId})
	AdminGetProvider(w http.ResponseWriter, r *http.Request, providerId string)
	// List provider arg options
	// (GET /api/v1/admin/providers/{providerId}/args/{argId}/options)
	AdminListProviderArgOptions(w http.ResponseWriter, r *http.Request, providerId string, argId string, params AdminListProviderArgOptionsParams)
	// List the provider setups in progress
	// (GET /api/v1/admin/providersetups)
	AdminListProvidersetups(w http.ResponseWriter, r *http.Request)
	// Begin the setup process for a new Access Provider
	// (POST /api/v1/admin/providersetups)
	AdminCreateProvidersetup(w http.ResponseWriter, r *http.Request)
	// Delete an in-progress provider setup
	// (DELETE /api/v1/admin/providersetups/{providersetupId})
	AdminDeleteProvidersetup(w http.ResponseWriter, r *http.Request, providersetupId string)
	// Get an in-progress provider setup
	// (GET /api/v1/admin/providersetups/{providersetupId})
	AdminGetProvidersetup(w http.ResponseWriter, r *http.Request, providersetupId string)
	// Complete a ProviderSetup
	// (POST /api/v1/admin/providersetups/{providersetupId}/complete)
	AdminCompleteProvidersetup(w http.ResponseWriter, r *http.Request, providersetupId string)
	// Get the setup instructions for an Access Provider
	// (GET /api/v1/admin/providersetups/{providersetupId}/instructions)
	AdminGetProvidersetupInstructions(w http.ResponseWriter, r *http.Request, providersetupId string)
	// Update the completion status for a Provider setup step
	// (PUT /api/v1/admin/providersetups/{providersetupId}/steps/{stepIndex}/complete)
	AdminSubmitProvidersetupStep(w http.ResponseWriter, r *http.Request, providersetupId string, stepIndex int)
	// Validate the configuration for a Provider Setup
	// (POST /api/v1/admin/providersetups/{providersetupId}/validate)
	AdminValidateProvidersetup(w http.ResponseWriter, r *http.Request, providersetupId string)
	// Your GET endpoint
	// (GET /api/v1/admin/requests)
	AdminListRequests(w http.ResponseWriter, r *http.Request, params AdminListRequestsParams)
	// Get a request
	// (GET /api/v1/admin/requests/{requestId})
	AdminGetRequest(w http.ResponseWriter, r *http.Request, requestId string)
	// Returns a list of users
	// (GET /api/v1/admin/users)
	AdminListUsers(w http.ResponseWriter, r *http.Request, params AdminListUsersParams)
	// Create User
	// (POST /api/v1/admin/users)
	AdminCreateUser(w http.ResponseWriter, r *http.Request)
	// Update User
	// (POST /api/v1/admin/users/{userId})
	AdminUpdateUser(w http.ResponseWriter, r *http.Request, userId string)
	// ListFavorites
	// (GET /api/v1/favorites)
	UserListFavorites(w http.ResponseWriter, r *http.Request)
	// Create Favorite
	// (POST /api/v1/favorites)
	UserCreateFavorite(w http.ResponseWriter, r *http.Request)

	// (DELETE /api/v1/favorites/{id})
	UserDeleteFavorite(w http.ResponseWriter, r *http.Request, id string)
	// Get Favorite
	// (GET /api/v1/favorites/{id})
	UserGetFavorite(w http.ResponseWriter, r *http.Request, id string)

	// (PUT /api/v1/favorites/{id})
	UserUpdateFavorite(w http.ResponseWriter, r *http.Request, id string)
	// List my requests
	// (GET /api/v1/requests)
	UserListRequests(w http.ResponseWriter, r *http.Request, params UserListRequestsParams)
	// Create a request
	// (POST /api/v1/requests)
	UserCreateRequest(w http.ResponseWriter, r *http.Request)
	// Your GET endpoint
	// (GET /api/v1/requests/past)
	UserListRequestsPast(w http.ResponseWriter, r *http.Request, params UserListRequestsPastParams)
	// Your GET endpoint
	// (GET /api/v1/requests/upcoming)
	UserListRequestsUpcoming(w http.ResponseWriter, r *http.Request, params UserListRequestsUpcomingParams)
	// Get a request
	// (GET /api/v1/requests/{requestId})
	UserGetRequest(w http.ResponseWriter, r *http.Request, requestId string)
	// Get Access Instructions
	// (GET /api/v1/requests/{requestId}/access-instructions)
	UserGetAccessInstructions(w http.ResponseWriter, r *http.Request, requestId string)
	// Get Access Token
	// (GET /api/v1/requests/{requestId}/access-token)
	UserGetAccessToken(w http.ResponseWriter, r *http.Request, requestId string)
	// Cancel a request
	// (POST /api/v1/requests/{requestId}/cancel)
	UserCancelRequest(w http.ResponseWriter, r *http.Request, requestId string)
	// List request events
	// (GET /api/v1/requests/{requestId}/events)
	UserListRequestEvents(w http.ResponseWriter, r *http.Request, requestId string)
	// Review a request
	// (POST /api/v1/requests/{requestId}/review)
	UserReviewRequest(w http.ResponseWriter, r *http.Request, requestId string)
	// Revoke an active request
	// (POST /api/v1/requests/{requestid}/revoke)
	UserRevokeRequest(w http.ResponseWriter, r *http.Request, requestid string)
	// Get details for the current user
	// (GET /api/v1/users/me)
	UserGetMe(w http.ResponseWriter, r *http.Request)
	// Get a user
	// (GET /api/v1/users/{userId})
	UserGetUser(w http.ResponseWriter, r *http.Request, userId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// UserListAccessRules operation middleware
func (siw *ServerInterfaceWrapper) UserListAccessRules(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserListAccessRules(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserLookupAccessRule operation middleware
func (siw *ServerInterfaceWrapper) UserLookupAccessRule(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params UserLookupAccessRuleParams

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", r.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	// ------------- Optional query parameter "permissionSetArn.label" -------------

	err = runtime.BindQueryParameter("form", true, false, "permissionSetArn.label", r.URL.Query(), &params.PermissionSetArnLabel)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "permissionSetArn.label", Err: err})
		return
	}

	// ------------- Optional query parameter "accountId" -------------

	err = runtime.BindQueryParameter("form", true, false, "accountId", r.URL.Query(), &params.AccountId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "accountId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserLookupAccessRule(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserGetAccessRule operation middleware
func (siw *ServerInterfaceWrapper) UserGetAccessRule(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ruleId" -------------
	var ruleId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ruleId", runtime.ParamLocationPath, chi.URLParam(r, "ruleId"), &ruleId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ruleId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserGetAccessRule(w, r, ruleId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserGetAccessRuleApprovers operation middleware
func (siw *ServerInterfaceWrapper) UserGetAccessRuleApprovers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ruleId" -------------
	var ruleId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ruleId", runtime.ParamLocationPath, chi.URLParam(r, "ruleId"), &ruleId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ruleId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserGetAccessRuleApprovers(w, r, ruleId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminListAccessRules operation middleware
func (siw *ServerInterfaceWrapper) AdminListAccessRules(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AdminListAccessRulesParams

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	// ------------- Optional query parameter "nextToken" -------------

	err = runtime.BindQueryParameter("form", true, false, "nextToken", r.URL.Query(), &params.NextToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nextToken", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminListAccessRules(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminCreateAccessRule operation middleware
func (siw *ServerInterfaceWrapper) AdminCreateAccessRule(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminCreateAccessRule(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminGetAccessRule operation middleware
func (siw *ServerInterfaceWrapper) AdminGetAccessRule(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ruleId" -------------
	var ruleId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ruleId", runtime.ParamLocationPath, chi.URLParam(r, "ruleId"), &ruleId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ruleId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminGetAccessRule(w, r, ruleId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminUpdateAccessRule operation middleware
func (siw *ServerInterfaceWrapper) AdminUpdateAccessRule(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ruleId" -------------
	var ruleId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ruleId", runtime.ParamLocationPath, chi.URLParam(r, "ruleId"), &ruleId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ruleId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminUpdateAccessRule(w, r, ruleId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminArchiveAccessRule operation middleware
func (siw *ServerInterfaceWrapper) AdminArchiveAccessRule(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ruleId" -------------
	var ruleId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ruleId", runtime.ParamLocationPath, chi.URLParam(r, "ruleId"), &ruleId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ruleId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminArchiveAccessRule(w, r, ruleId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminGetAccessRuleVersions operation middleware
func (siw *ServerInterfaceWrapper) AdminGetAccessRuleVersions(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ruleId" -------------
	var ruleId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ruleId", runtime.ParamLocationPath, chi.URLParam(r, "ruleId"), &ruleId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ruleId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminGetAccessRuleVersions(w, r, ruleId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminGetAccessRuleVersion operation middleware
func (siw *ServerInterfaceWrapper) AdminGetAccessRuleVersion(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ruleId" -------------
	var ruleId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ruleId", runtime.ParamLocationPath, chi.URLParam(r, "ruleId"), &ruleId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ruleId", Err: err})
		return
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithLocation("simple", false, "version", runtime.ParamLocationPath, chi.URLParam(r, "version"), &version)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "version", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminGetAccessRuleVersion(w, r, ruleId, version)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminGetDeploymentVersion operation middleware
func (siw *ServerInterfaceWrapper) AdminGetDeploymentVersion(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminGetDeploymentVersion(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminListGroups operation middleware
func (siw *ServerInterfaceWrapper) AdminListGroups(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AdminListGroupsParams

	// ------------- Optional query parameter "nextToken" -------------

	err = runtime.BindQueryParameter("form", true, false, "nextToken", r.URL.Query(), &params.NextToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nextToken", Err: err})
		return
	}

	// ------------- Optional query parameter "source" -------------

	err = runtime.BindQueryParameter("form", true, false, "source", r.URL.Query(), &params.Source)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "source", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminListGroups(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminCreateGroup operation middleware
func (siw *ServerInterfaceWrapper) AdminCreateGroup(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminCreateGroup(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminDeleteGroup operation middleware
func (siw *ServerInterfaceWrapper) AdminDeleteGroup(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "groupId" -------------
	var groupId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "groupId", runtime.ParamLocationPath, chi.URLParam(r, "groupId"), &groupId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminDeleteGroup(w, r, groupId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminGetGroup operation middleware
func (siw *ServerInterfaceWrapper) AdminGetGroup(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "groupId" -------------
	var groupId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "groupId", runtime.ParamLocationPath, chi.URLParam(r, "groupId"), &groupId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminGetGroup(w, r, groupId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminUpdateGroup operation middleware
func (siw *ServerInterfaceWrapper) AdminUpdateGroup(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "groupId" -------------
	var groupId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "groupId", runtime.ParamLocationPath, chi.URLParam(r, "groupId"), &groupId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminUpdateGroup(w, r, groupId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminGetIdentityConfiguration operation middleware
func (siw *ServerInterfaceWrapper) AdminGetIdentityConfiguration(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminGetIdentityConfiguration(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminSyncIdentity operation middleware
func (siw *ServerInterfaceWrapper) AdminSyncIdentity(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminSyncIdentity(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminListProviders operation middleware
func (siw *ServerInterfaceWrapper) AdminListProviders(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminListProviders(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminGetProvider operation middleware
func (siw *ServerInterfaceWrapper) AdminGetProvider(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "providerId" -------------
	var providerId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "providerId", runtime.ParamLocationPath, chi.URLParam(r, "providerId"), &providerId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "providerId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminGetProvider(w, r, providerId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminListProviderArgOptions operation middleware
func (siw *ServerInterfaceWrapper) AdminListProviderArgOptions(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "providerId" -------------
	var providerId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "providerId", runtime.ParamLocationPath, chi.URLParam(r, "providerId"), &providerId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "providerId", Err: err})
		return
	}

	// ------------- Path parameter "argId" -------------
	var argId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "argId", runtime.ParamLocationPath, chi.URLParam(r, "argId"), &argId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "argId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params AdminListProviderArgOptionsParams

	// ------------- Optional query parameter "refresh" -------------

	err = runtime.BindQueryParameter("form", true, false, "refresh", r.URL.Query(), &params.Refresh)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "refresh", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminListProviderArgOptions(w, r, providerId, argId, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminListProvidersetups operation middleware
func (siw *ServerInterfaceWrapper) AdminListProvidersetups(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminListProvidersetups(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminCreateProvidersetup operation middleware
func (siw *ServerInterfaceWrapper) AdminCreateProvidersetup(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminCreateProvidersetup(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminDeleteProvidersetup operation middleware
func (siw *ServerInterfaceWrapper) AdminDeleteProvidersetup(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "providersetupId" -------------
	var providersetupId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "providersetupId", runtime.ParamLocationPath, chi.URLParam(r, "providersetupId"), &providersetupId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "providersetupId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminDeleteProvidersetup(w, r, providersetupId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminGetProvidersetup operation middleware
func (siw *ServerInterfaceWrapper) AdminGetProvidersetup(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "providersetupId" -------------
	var providersetupId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "providersetupId", runtime.ParamLocationPath, chi.URLParam(r, "providersetupId"), &providersetupId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "providersetupId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminGetProvidersetup(w, r, providersetupId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminCompleteProvidersetup operation middleware
func (siw *ServerInterfaceWrapper) AdminCompleteProvidersetup(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "providersetupId" -------------
	var providersetupId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "providersetupId", runtime.ParamLocationPath, chi.URLParam(r, "providersetupId"), &providersetupId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "providersetupId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminCompleteProvidersetup(w, r, providersetupId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminGetProvidersetupInstructions operation middleware
func (siw *ServerInterfaceWrapper) AdminGetProvidersetupInstructions(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "providersetupId" -------------
	var providersetupId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "providersetupId", runtime.ParamLocationPath, chi.URLParam(r, "providersetupId"), &providersetupId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "providersetupId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminGetProvidersetupInstructions(w, r, providersetupId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminSubmitProvidersetupStep operation middleware
func (siw *ServerInterfaceWrapper) AdminSubmitProvidersetupStep(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "providersetupId" -------------
	var providersetupId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "providersetupId", runtime.ParamLocationPath, chi.URLParam(r, "providersetupId"), &providersetupId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "providersetupId", Err: err})
		return
	}

	// ------------- Path parameter "stepIndex" -------------
	var stepIndex int

	err = runtime.BindStyledParameterWithLocation("simple", false, "stepIndex", runtime.ParamLocationPath, chi.URLParam(r, "stepIndex"), &stepIndex)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "stepIndex", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminSubmitProvidersetupStep(w, r, providersetupId, stepIndex)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminValidateProvidersetup operation middleware
func (siw *ServerInterfaceWrapper) AdminValidateProvidersetup(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "providersetupId" -------------
	var providersetupId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "providersetupId", runtime.ParamLocationPath, chi.URLParam(r, "providersetupId"), &providersetupId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "providersetupId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminValidateProvidersetup(w, r, providersetupId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminListRequests operation middleware
func (siw *ServerInterfaceWrapper) AdminListRequests(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AdminListRequestsParams

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	// ------------- Optional query parameter "nextToken" -------------

	err = runtime.BindQueryParameter("form", true, false, "nextToken", r.URL.Query(), &params.NextToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nextToken", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminListRequests(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminGetRequest operation middleware
func (siw *ServerInterfaceWrapper) AdminGetRequest(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "requestId" -------------
	var requestId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "requestId", runtime.ParamLocationPath, chi.URLParam(r, "requestId"), &requestId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminGetRequest(w, r, requestId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminListUsers operation middleware
func (siw *ServerInterfaceWrapper) AdminListUsers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AdminListUsersParams

	// ------------- Optional query parameter "nextToken" -------------

	err = runtime.BindQueryParameter("form", true, false, "nextToken", r.URL.Query(), &params.NextToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nextToken", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminListUsers(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminCreateUser operation middleware
func (siw *ServerInterfaceWrapper) AdminCreateUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminCreateUser(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminUpdateUser operation middleware
func (siw *ServerInterfaceWrapper) AdminUpdateUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, chi.URLParam(r, "userId"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminUpdateUser(w, r, userId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserListFavorites operation middleware
func (siw *ServerInterfaceWrapper) UserListFavorites(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserListFavorites(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserCreateFavorite operation middleware
func (siw *ServerInterfaceWrapper) UserCreateFavorite(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserCreateFavorite(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserDeleteFavorite operation middleware
func (siw *ServerInterfaceWrapper) UserDeleteFavorite(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserDeleteFavorite(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserGetFavorite operation middleware
func (siw *ServerInterfaceWrapper) UserGetFavorite(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserGetFavorite(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserUpdateFavorite operation middleware
func (siw *ServerInterfaceWrapper) UserUpdateFavorite(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserUpdateFavorite(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserListRequests operation middleware
func (siw *ServerInterfaceWrapper) UserListRequests(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params UserListRequestsParams

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	// ------------- Optional query parameter "reviewer" -------------

	err = runtime.BindQueryParameter("form", true, false, "reviewer", r.URL.Query(), &params.Reviewer)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "reviewer", Err: err})
		return
	}

	// ------------- Optional query parameter "nextToken" -------------

	err = runtime.BindQueryParameter("form", true, false, "nextToken", r.URL.Query(), &params.NextToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nextToken", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserListRequests(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserCreateRequest operation middleware
func (siw *ServerInterfaceWrapper) UserCreateRequest(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserCreateRequest(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserListRequestsPast operation middleware
func (siw *ServerInterfaceWrapper) UserListRequestsPast(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params UserListRequestsPastParams

	// ------------- Optional query parameter "nextToken" -------------

	err = runtime.BindQueryParameter("form", true, false, "nextToken", r.URL.Query(), &params.NextToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nextToken", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserListRequestsPast(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserListRequestsUpcoming operation middleware
func (siw *ServerInterfaceWrapper) UserListRequestsUpcoming(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params UserListRequestsUpcomingParams

	// ------------- Optional query parameter "nextToken" -------------

	err = runtime.BindQueryParameter("form", true, false, "nextToken", r.URL.Query(), &params.NextToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nextToken", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserListRequestsUpcoming(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserGetRequest operation middleware
func (siw *ServerInterfaceWrapper) UserGetRequest(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "requestId" -------------
	var requestId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "requestId", runtime.ParamLocationPath, chi.URLParam(r, "requestId"), &requestId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserGetRequest(w, r, requestId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserGetAccessInstructions operation middleware
func (siw *ServerInterfaceWrapper) UserGetAccessInstructions(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "requestId" -------------
	var requestId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "requestId", runtime.ParamLocationPath, chi.URLParam(r, "requestId"), &requestId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserGetAccessInstructions(w, r, requestId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserGetAccessToken operation middleware
func (siw *ServerInterfaceWrapper) UserGetAccessToken(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "requestId" -------------
	var requestId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "requestId", runtime.ParamLocationPath, chi.URLParam(r, "requestId"), &requestId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserGetAccessToken(w, r, requestId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserCancelRequest operation middleware
func (siw *ServerInterfaceWrapper) UserCancelRequest(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "requestId" -------------
	var requestId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "requestId", runtime.ParamLocationPath, chi.URLParam(r, "requestId"), &requestId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserCancelRequest(w, r, requestId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserListRequestEvents operation middleware
func (siw *ServerInterfaceWrapper) UserListRequestEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "requestId" -------------
	var requestId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "requestId", runtime.ParamLocationPath, chi.URLParam(r, "requestId"), &requestId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserListRequestEvents(w, r, requestId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserReviewRequest operation middleware
func (siw *ServerInterfaceWrapper) UserReviewRequest(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "requestId" -------------
	var requestId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "requestId", runtime.ParamLocationPath, chi.URLParam(r, "requestId"), &requestId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserReviewRequest(w, r, requestId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserRevokeRequest operation middleware
func (siw *ServerInterfaceWrapper) UserRevokeRequest(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "requestid" -------------
	var requestid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "requestid", runtime.ParamLocationPath, chi.URLParam(r, "requestid"), &requestid)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestid", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserRevokeRequest(w, r, requestid)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserGetMe operation middleware
func (siw *ServerInterfaceWrapper) UserGetMe(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserGetMe(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserGetUser operation middleware
func (siw *ServerInterfaceWrapper) UserGetUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, chi.URLParam(r, "userId"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserGetUser(w, r, userId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/access-rules", wrapper.UserListAccessRules)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/access-rules/lookup", wrapper.UserLookupAccessRule)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/access-rules/{ruleId}", wrapper.UserGetAccessRule)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/access-rules/{ruleId}/approvers", wrapper.UserGetAccessRuleApprovers)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/access-rules", wrapper.AdminListAccessRules)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/admin/access-rules", wrapper.AdminCreateAccessRule)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/access-rules/{ruleId}", wrapper.AdminGetAccessRule)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/admin/access-rules/{ruleId}", wrapper.AdminUpdateAccessRule)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/admin/access-rules/{ruleId}/archive", wrapper.AdminArchiveAccessRule)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/access-rules/{ruleId}/versions", wrapper.AdminGetAccessRuleVersions)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/access-rules/{ruleId}/versions/{version}", wrapper.AdminGetAccessRuleVersion)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/deployment/version", wrapper.AdminGetDeploymentVersion)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/groups", wrapper.AdminListGroups)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/admin/groups", wrapper.AdminCreateGroup)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/admin/groups/{groupId}", wrapper.AdminDeleteGroup)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/groups/{groupId}", wrapper.AdminGetGroup)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/admin/groups/{groupId}", wrapper.AdminUpdateGroup)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/identity", wrapper.AdminGetIdentityConfiguration)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/admin/identity/sync", wrapper.AdminSyncIdentity)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/providers", wrapper.AdminListProviders)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/providers/{providerId}", wrapper.AdminGetProvider)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/providers/{providerId}/args/{argId}/options", wrapper.AdminListProviderArgOptions)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/providersetups", wrapper.AdminListProvidersetups)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/admin/providersetups", wrapper.AdminCreateProvidersetup)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/admin/providersetups/{providersetupId}", wrapper.AdminDeleteProvidersetup)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/providersetups/{providersetupId}", wrapper.AdminGetProvidersetup)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/admin/providersetups/{providersetupId}/complete", wrapper.AdminCompleteProvidersetup)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/providersetups/{providersetupId}/instructions", wrapper.AdminGetProvidersetupInstructions)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/admin/providersetups/{providersetupId}/steps/{stepIndex}/complete", wrapper.AdminSubmitProvidersetupStep)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/admin/providersetups/{providersetupId}/validate", wrapper.AdminValidateProvidersetup)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/requests", wrapper.AdminListRequests)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/requests/{requestId}", wrapper.AdminGetRequest)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/users", wrapper.AdminListUsers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/admin/users", wrapper.AdminCreateUser)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/admin/users/{userId}", wrapper.AdminUpdateUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/favorites", wrapper.UserListFavorites)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/favorites", wrapper.UserCreateFavorite)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/favorites/{id}", wrapper.UserDeleteFavorite)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/favorites/{id}", wrapper.UserGetFavorite)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/favorites/{id}", wrapper.UserUpdateFavorite)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/requests", wrapper.UserListRequests)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/requests", wrapper.UserCreateRequest)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/requests/past", wrapper.UserListRequestsPast)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/requests/upcoming", wrapper.UserListRequestsUpcoming)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/requests/{requestId}", wrapper.UserGetRequest)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/requests/{requestId}/access-instructions", wrapper.UserGetAccessInstructions)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/requests/{requestId}/access-token", wrapper.UserGetAccessToken)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/requests/{requestId}/cancel", wrapper.UserCancelRequest)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/requests/{requestId}/events", wrapper.UserListRequestEvents)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/requests/{requestId}/review", wrapper.UserReviewRequest)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/requests/{requestid}/revoke", wrapper.UserRevokeRequest)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/users/me", wrapper.UserGetMe)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/users/{userId}", wrapper.UserGetUser)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./accesshandler/openapi.yml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
