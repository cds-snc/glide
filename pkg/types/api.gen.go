// Package types provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package types

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	externalRef0 "github.com/common-fate/common-fate/accesshandler/pkg/types"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// Defines values for AccessRuleStatus.
const (
	AccessRuleStatusACTIVE   AccessRuleStatus = "ACTIVE"
	AccessRuleStatusARCHIVED AccessRuleStatus = "ARCHIVED"
)

// Defines values for AccessRuleTargetDetailArgumentsFormElement.
const (
	AccessRuleTargetDetailArgumentsFormElementINPUT       AccessRuleTargetDetailArgumentsFormElement = "INPUT"
	AccessRuleTargetDetailArgumentsFormElementMULTISELECT AccessRuleTargetDetailArgumentsFormElement = "MULTISELECT"
)

// Defines values for ApprovalMethod.
const (
	AUTOMATIC ApprovalMethod = "AUTOMATIC"
	REVIEWED  ApprovalMethod = "REVIEWED"
)

// Defines values for ArgumentRequestFormElement.
const (
	ArgumentRequestFormElementSELECT ArgumentRequestFormElement = "SELECT"
)

// Defines values for ArgumentRuleFormElement.
const (
	ArgumentRuleFormElementINPUT       ArgumentRuleFormElement = "INPUT"
	ArgumentRuleFormElementMULTISELECT ArgumentRuleFormElement = "MULTISELECT"
	ArgumentRuleFormElementSELECT      ArgumentRuleFormElement = "SELECT"
)

// Defines values for GrantStatus.
const (
	GrantStatusACTIVE  GrantStatus = "ACTIVE"
	GrantStatusERROR   GrantStatus = "ERROR"
	GrantStatusEXPIRED GrantStatus = "EXPIRED"
	GrantStatusPENDING GrantStatus = "PENDING"
	GrantStatusREVOKED GrantStatus = "REVOKED"
)

// Defines values for IdpStatus.
const (
	IdpStatusACTIVE   IdpStatus = "ACTIVE"
	IdpStatusARCHIVED IdpStatus = "ARCHIVED"
)

// Defines values for RequestArgumentFormElement.
const (
	RequestArgumentFormElementSELECT RequestArgumentFormElement = "SELECT"
)

// Defines values for RequestEventFromGrantStatus.
const (
	RequestEventFromGrantStatusACTIVE  RequestEventFromGrantStatus = "ACTIVE"
	RequestEventFromGrantStatusERROR   RequestEventFromGrantStatus = "ERROR"
	RequestEventFromGrantStatusEXPIRED RequestEventFromGrantStatus = "EXPIRED"
	RequestEventFromGrantStatusPENDING RequestEventFromGrantStatus = "PENDING"
	RequestEventFromGrantStatusREVOKED RequestEventFromGrantStatus = "REVOKED"
)

// Defines values for RequestEventToGrantStatus.
const (
	RequestEventToGrantStatusACTIVE  RequestEventToGrantStatus = "ACTIVE"
	RequestEventToGrantStatusERROR   RequestEventToGrantStatus = "ERROR"
	RequestEventToGrantStatusEXPIRED RequestEventToGrantStatus = "EXPIRED"
	RequestEventToGrantStatusPENDING RequestEventToGrantStatus = "PENDING"
	RequestEventToGrantStatusREVOKED RequestEventToGrantStatus = "REVOKED"
)

// Defines values for RequestStatus.
const (
	RequestStatusAPPROVED  RequestStatus = "APPROVED"
	RequestStatusCANCELLED RequestStatus = "CANCELLED"
	RequestStatusDECLINED  RequestStatus = "DECLINED"
	RequestStatusPENDING   RequestStatus = "PENDING"
)

// Defines values for ReviewDecision.
const (
	ReviewDecisionAPPROVED ReviewDecision = "APPROVED"
	ReviewDecisionDECLINED ReviewDecision = "DECLINED"
)

// Defines values for UserLookupAccessRuleParamsType.
const (
	CommonfateawsSso UserLookupAccessRuleParamsType = "commonfate/aws-sso"
)

// Defines values for AdminListAccessRulesParamsStatus.
const (
	ACTIVE   AdminListAccessRulesParamsStatus = "ACTIVE"
	ARCHIVED AdminListAccessRulesParamsStatus = "ARCHIVED"
)

// Defines values for AdminListGroupsParamsSource.
const (
	EXTERNAL AdminListGroupsParamsSource = "EXTERNAL"
	INTERNAL AdminListGroupsParamsSource = "INTERNAL"
)

// Defines values for AdminListRequestsParamsStatus.
const (
	AdminListRequestsParamsStatusAPPROVED  AdminListRequestsParamsStatus = "APPROVED"
	AdminListRequestsParamsStatusCANCELLED AdminListRequestsParamsStatus = "CANCELLED"
	AdminListRequestsParamsStatusDECLINED  AdminListRequestsParamsStatus = "DECLINED"
	AdminListRequestsParamsStatusPENDING   AdminListRequestsParamsStatus = "PENDING"
)

// Defines values for UserListRequestsParamsStatus.
const (
	APPROVED  UserListRequestsParamsStatus = "APPROVED"
	CANCELLED UserListRequestsParamsStatus = "CANCELLED"
	DECLINED  UserListRequestsParamsStatus = "DECLINED"
	PENDING   UserListRequestsParamsStatus = "PENDING"
)

// AccessRule Access Rule contains information for an end user to make a request for access.
type AccessRule struct {
	Description string `json:"description"`
	ID          string `json:"id"`
	IsCurrent   bool   `json:"isCurrent"`
	Name        string `json:"name"`

	// Target A target for an access rule
	Target AccessRuleTarget `json:"target"`

	// TimeConstraints Time configuration for an Access Rule.
	TimeConstraints TimeConstraints `json:"timeConstraints"`

	// Version A unique version identifier for the Access Rule. Updating a rule creates a new version.
	// When a rule is updated, it's ID remains consistent.
	Version string `json:"version"`
}

// AccessRuleDetail AccessRuleDetail contains detailed information about a rule and is used in administrative apis.
type AccessRuleDetail struct {
	// Approval Approver config for access rules
	Approval    ApproverConfig `json:"approval"`
	Description string         `json:"description"`

	// Groups The group IDs that the access rule applies to.
	Groups    []string           `json:"groups"`
	ID        string             `json:"id"`
	IsCurrent bool               `json:"isCurrent"`
	Metadata  AccessRuleMetadata `json:"metadata"`
	Name      string             `json:"name"`

	// Status The status of an Access Rule.
	Status AccessRuleStatus `json:"status"`

	// Target A detailed target for an access rule
	Target AccessRuleTargetDetail `json:"target"`

	// TimeConstraints Time configuration for an Access Rule.
	TimeConstraints TimeConstraints `json:"timeConstraints"`

	// Version A unique version identifier for the Access Rule. Updating a rule creates a new version.
	// When a rule is updated, it's ID remains consistent.
	Version string `json:"version"`
}

// AccessRuleMetadata defines model for AccessRuleMetadata.
type AccessRuleMetadata struct {
	CreatedAt     time.Time `json:"createdAt"`
	CreatedBy     string    `json:"createdBy"`
	UpdateMessage *string   `json:"updateMessage,omitempty"`
	UpdatedAt     time.Time `json:"updatedAt"`
	UpdatedBy     string    `json:"updatedBy"`
}

// AccessRuleStatus The status of an Access Rule.
type AccessRuleStatus string

// AccessRuleTarget A target for an access rule
type AccessRuleTarget struct {
	// Provider Provider
	Provider Provider `json:"provider"`
}

// AccessRuleTargetDetail A detailed target for an access rule
type AccessRuleTargetDetail struct {
	// Provider Provider
	Provider Provider                                   `json:"provider"`
	With     map[string]AccessRuleTargetDetailArguments `json:"with"`
}

// AccessRuleTargetDetailArguments defines model for AccessRuleTargetDetailArguments.
type AccessRuleTargetDetailArguments struct {
	FormElement AccessRuleTargetDetailArgumentsFormElement `json:"formElement"`
	Groupings   map[string][]string                        `json:"groupings"`
	Values      []string                                   `json:"values"`
}

// AccessRuleTargetDetailArgumentsFormElement defines model for AccessRuleTargetDetailArguments.FormElement.
type AccessRuleTargetDetailArgumentsFormElement string

// ApprovalMethod Describes whether a request has been approved automatically or from a review
type ApprovalMethod string

// ApproverConfig Approver config for access rules
type ApproverConfig struct {
	Groups []string `json:"groups"`

	// Users The user IDs of the approvers for the request.
	Users []string `json:"users"`
}

// ArgSchema defines model for ArgSchema.
type ArgSchema map[string]Argument

// Argument defines model for Argument.
type Argument struct {
	Description *string                   `json:"description,omitempty"`
	Groups      *map[string]ProviderGroup `json:"groups,omitempty"`
	Id          string                    `json:"id"`

	// RequestFormElement Optional form element for the request form, if not provided, defaults to multiselect
	RequestFormElement *ArgumentRequestFormElement `json:"requestFormElement,omitempty"`
	RuleFormElement    ArgumentRuleFormElement     `json:"ruleFormElement"`
	Title              string                      `json:"title"`
}

// ArgumentRequestFormElement Optional form element for the request form, if not provided, defaults to multiselect
type ArgumentRequestFormElement string

// ArgumentRuleFormElement defines model for Argument.RuleFormElement.
type ArgumentRuleFormElement string

// CreateAccessRuleTarget a request body for creating a Access Rule Target
type CreateAccessRuleTarget struct {
	ProviderId string                                           `json:"providerId"`
	With       map[string]CreateAccessRuleTargetDetailArguments `json:"with"`
}

// CreateAccessRuleTargetDetailArguments defines model for CreateAccessRuleTargetDetailArguments.
type CreateAccessRuleTargetDetailArguments struct {
	Groupings map[string][]string `json:"groupings"`
	Values    []string            `json:"values"`
}

// CreateRequestWith defines model for CreateRequestWith.
type CreateRequestWith map[string][]string

// CreateRequestWithSubRequest defines model for CreateRequestWithSubRequest.
type CreateRequestWithSubRequest = []CreateRequestWith

// Favorite defines model for Favorite.
type Favorite struct {
	Id     string `json:"id"`
	Name   string `json:"name"`
	RuleId string `json:"ruleId"`
}

// FavoriteDetail Detailed object for a Favorite.
type FavoriteDetail struct {
	Id     string                      `json:"id"`
	Name   string                      `json:"name"`
	Reason *string                     `json:"reason,omitempty"`
	Timing RequestTiming               `json:"timing"`
	With   CreateRequestWithSubRequest `json:"with"`
}

// Grant A temporary assignment of a user to a principal.
type Grant struct {
	// End The end time of the grant.
	End time.Time `json:"end"`

	// Provider The ID of the provider to grant access to.
	Provider string `json:"provider"`

	// Start The start time of the grant.
	Start time.Time `json:"start"`

	// Status The current state of the grant.
	Status GrantStatus `json:"status"`

	// Subject The email address of the user to grant access to.
	Subject openapi_types.Email `json:"subject"`
}

// GrantStatus The current state of the grant.
type GrantStatus string

// Group defines model for Group.
type Group struct {
	Description string   `json:"description"`
	Id          string   `json:"id"`
	MemberCount int      `json:"memberCount"`
	Members     []string `json:"members"`
	Name        string   `json:"name"`
	Source      string   `json:"source"`
}

// GroupOption defines model for GroupOption.
type GroupOption struct {
	Children    []string `json:"children"`
	Description *string  `json:"description,omitempty"`
	Label       string   `json:"label"`

	// LabelPrefix A label prefix allows additional context to be prefixed to the label when displayed in a form
	LabelPrefix *string `json:"labelPrefix,omitempty"`
	Value       string  `json:"value"`
}

// Groups defines model for Groups.
type Groups map[string][]GroupOption

// IdpStatus defines model for IdpStatus.
type IdpStatus string

// KeyValue defines model for KeyValue.
type KeyValue struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// LookupAccessRule A matched access rule with option values if they are required for the access rule request
type LookupAccessRule struct {
	// AccessRule Access Rule contains information for an end user to make a request for access.
	AccessRule AccessRule `json:"accessRule"`

	// SelectableWithOptionValues If the matched access rule has selectable fields, this array will contain the matched values to be used to prefill the form when requesting
	SelectableWithOptionValues *[]KeyValue `json:"selectableWithOptionValues,omitempty"`
}

// Provider Provider
type Provider struct {
	Id     string    `json:"id"`
	Schema ArgSchema `json:"schema"`
	Type   string    `json:"type"`
}

// ProviderGroup defines model for ProviderGroup.
type ProviderGroup struct {
	Description *string `json:"description,omitempty"`
	Id          string  `json:"id"`
	Title       string  `json:"title"`
}

<<<<<<< HEAD
// The status of the validation.
type ProviderSetupValidationStatus string

// Provider
type ProviderV2 struct {
	Name    string  `json:"name"`
	Schema  *string `json:"schema,omitempty"`
	Url     string  `json:"url"`
	Version string  `json:"version"`
}

// A request to access something made by an end user in Common Fate.
=======
// Request A request to access something made by an end user in Common Fate.
>>>>>>> jordi/cf-349-connect-community-provider-to-common
type Request struct {
	AccessRuleId      string `json:"accessRuleId"`
	AccessRuleVersion string `json:"accessRuleVersion"`

	// ApprovalMethod Describes whether a request has been approved automatically or from a review
	ApprovalMethod *ApprovalMethod `json:"approvalMethod,omitempty"`

	// Grant A temporary assignment of a user to a principal.
	Grant       *Grant    `json:"grant,omitempty"`
	ID          string    `json:"id"`
	Reason      *string   `json:"reason,omitempty"`
	RequestedAt time.Time `json:"requestedAt"`
	Requestor   string    `json:"requestor"`

	// Status The status of an Access Request.
	Status    RequestStatus `json:"status"`
	Timing    RequestTiming `json:"timing"`
	UpdatedAt time.Time     `json:"updatedAt"`
}

// RequestAccessRule Access Rule contains information for an end user to make a request for access.
type RequestAccessRule struct {
	CanRequest  bool   `json:"canRequest"`
	Description string `json:"description"`
	ID          string `json:"id"`
	IsCurrent   bool   `json:"isCurrent"`
	Name        string `json:"name"`

	// Target A detailed target for an access rule request
	Target RequestAccessRuleTarget `json:"target"`

	// TimeConstraints Time configuration for an Access Rule.
	TimeConstraints TimeConstraints `json:"timeConstraints"`

	// Version A unique version identifier for the Access Rule. Updating a rule creates a new version.
	// When a rule is updated, it's ID remains consistent.
	Version string `json:"version"`
}

// RequestAccessRuleTarget A detailed target for an access rule request
type RequestAccessRuleTarget struct {
	Arguments map[string]RequestArgument `json:"arguments"`

	// Provider Provider
	Provider Provider `json:"provider"`
}

// RequestArgument defines model for RequestArgument.
type RequestArgument struct {
	Description *string                     `json:"description,omitempty"`
	FormElement *RequestArgumentFormElement `json:"formElement,omitempty"`
	Options     []WithOption                `json:"options"`

	// RequiresSelection This will be true if a selection is require when creating a request
	RequiresSelection bool   `json:"requiresSelection"`
	Title             string `json:"title"`
}

// RequestArgumentFormElement defines model for RequestArgument.FormElement.
type RequestArgumentFormElement string

// RequestDetail A request to access something made by an end user in Common Fate.
type RequestDetail struct {
	// AccessRule Access Rule contains information for an end user to make a request for access.
	AccessRule AccessRule `json:"accessRule"`

	// ApprovalMethod Describes whether a request has been approved automatically or from a review
	ApprovalMethod *ApprovalMethod `json:"approvalMethod,omitempty"`
	Arguments      map[string]With `json:"arguments"`

	// CanReview true if the requesting user is a reviewer of this request.
	CanReview bool `json:"canReview"`

	// Grant A temporary assignment of a user to a principal.
	Grant       *Grant    `json:"grant,omitempty"`
	ID          string    `json:"id"`
	Reason      *string   `json:"reason,omitempty"`
	RequestedAt time.Time `json:"requestedAt"`
	Requestor   string    `json:"requestor"`

	// Status The status of an Access Request.
	Status    RequestStatus `json:"status"`
	Timing    RequestTiming `json:"timing"`
	UpdatedAt time.Time     `json:"updatedAt"`
}

// RequestEvent defines model for RequestEvent.
type RequestEvent struct {
	Actor     *string   `json:"actor,omitempty"`
	CreatedAt time.Time `json:"createdAt"`

	// FromGrantStatus The current state of the grant.
	FromGrantStatus *RequestEventFromGrantStatus `json:"fromGrantStatus,omitempty"`

	// FromStatus The status of an Access Request.
	FromStatus         *RequestStatus `json:"fromStatus,omitempty"`
	FromTiming         *RequestTiming `json:"fromTiming,omitempty"`
	GrantCreated       *bool          `json:"grantCreated,omitempty"`
	GrantFailureReason *string        `json:"grantFailureReason,omitempty"`
	Id                 string         `json:"id"`

	// RecordedEvent An event which was recorded relating to the grant.
	RecordedEvent  *map[string]string `json:"recordedEvent,omitempty"`
	RequestCreated *bool              `json:"requestCreated,omitempty"`
	RequestId      string             `json:"requestId"`

	// ToGrantStatus The current state of the grant.
	ToGrantStatus *RequestEventToGrantStatus `json:"toGrantStatus,omitempty"`

	// ToStatus The status of an Access Request.
	ToStatus *RequestStatus `json:"toStatus,omitempty"`
	ToTiming *RequestTiming `json:"toTiming,omitempty"`
}

// RequestEventFromGrantStatus The current state of the grant.
type RequestEventFromGrantStatus string

// RequestEventToGrantStatus The current state of the grant.
type RequestEventToGrantStatus string

// RequestStatus The status of an Access Request.
type RequestStatus string

// RequestTiming defines model for RequestTiming.
type RequestTiming struct {
	DurationSeconds int `json:"durationSeconds"`

	// StartTime iso8601 timestamp in UTC timezone
	StartTime *time.Time `json:"startTime,omitempty"`
}

// ReviewDecision A decision made on an Access Request.
type ReviewDecision string

// TimeConstraints Time configuration for an Access Rule.
type TimeConstraints struct {
	// MaxDurationSeconds The maximum duration in seconds the access is allowed for.
	MaxDurationSeconds int `json:"maxDurationSeconds"`
}

// User defines model for User.
type User struct {
	Email     string    `json:"email"`
	FirstName string    `json:"firstName"`
	Groups    []string  `json:"groups"`
	Id        string    `json:"id"`
	LastName  string    `json:"lastName"`
	Picture   string    `json:"picture"`
	Status    IdpStatus `json:"status"`
	UpdatedAt time.Time `json:"updatedAt"`
}

// With defines model for With.
type With struct {
	FieldDescription  *string `json:"fieldDescription,omitempty"`
	Label             string  `json:"label"`
	OptionDescription *string `json:"optionDescription,omitempty"`
	Title             string  `json:"title"`
	Value             string  `json:"value"`
}

// WithOption defines model for WithOption.
type WithOption struct {
	Description *string `json:"description,omitempty"`
	Label       string  `json:"label"`
	Valid       bool    `json:"valid"`
	Value       string  `json:"value"`
}

// AccessTokenResponse defines model for AccessTokenResponse.
type AccessTokenResponse struct {
	HasToken bool    `json:"hasToken"`
	Token    *string `json:"token,omitempty"`
}

// AuthUserResponse defines model for AuthUserResponse.
type AuthUserResponse struct {
	// IsAdmin Whether the user is an administrator of Common Fate.
	IsAdmin bool `json:"isAdmin"`
	User    User `json:"user"`
}

// DeploymentVersionResponse defines model for DeploymentVersionResponse.
type DeploymentVersionResponse struct {
	// Version The deployment version. Will be a semver, such as "v0.9.0" for official releases, or "dev+GIT_HASH" for pre-release builds.
	Version string `json:"version"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error string `json:"error"`
}

// IdentityConfigurationResponse defines model for IdentityConfigurationResponse.
type IdentityConfigurationResponse struct {
	AdministratorGroupId string `json:"administratorGroupId"`
	IdentityProvider     string `json:"identityProvider"`
}

// ListAccessRuleApproversResponse defines model for ListAccessRuleApproversResponse.
type ListAccessRuleApproversResponse struct {
	Next  *string  `json:"next"`
	Users []string `json:"users"`
}

// ListAccessRulesDetailResponse defines model for ListAccessRulesDetailResponse.
type ListAccessRulesDetailResponse struct {
	AccessRules []AccessRuleDetail `json:"accessRules"`
	Next        *string            `json:"next"`
}

// ListAccessRulesResponse defines model for ListAccessRulesResponse.
type ListAccessRulesResponse struct {
	AccessRules []AccessRule `json:"accessRules"`
	Next        *string      `json:"next"`
}

// ListFavoritesResponse defines model for ListFavoritesResponse.
type ListFavoritesResponse struct {
	Favorites []Favorite `json:"favorites"`
	Next      *string    `json:"next"`
}

// ListGroupsResponse defines model for ListGroupsResponse.
type ListGroupsResponse struct {
	Groups []Group `json:"groups"`
	Next   *string `json:"next"`
}

// ListRequestEventsResponse defines model for ListRequestEventsResponse.
type ListRequestEventsResponse struct {
	Events []RequestEvent `json:"events"`
	Next   *string        `json:"next"`
}

// ListRequestsResponse defines model for ListRequestsResponse.
type ListRequestsResponse struct {
	Next     *string   `json:"next"`
	Requests []Request `json:"requests"`
}

// ListUserResponse defines model for ListUserResponse.
type ListUserResponse struct {
	Next  *string `json:"next"`
	Users []User  `json:"users"`
}

// ReviewResponse defines model for ReviewResponse.
type ReviewResponse struct {
	// Request A request to access something made by an end user in Common Fate.
	Request *Request `json:"request,omitempty"`
}

// CreateAccessRuleRequest defines model for CreateAccessRuleRequest.
type CreateAccessRuleRequest struct {
	// Approval Approver config for access rules
	Approval    ApproverConfig `json:"approval"`
	Description string         `json:"description"`

	// Groups The group IDs that the access rule applies to.
	Groups []string `json:"groups"`
	Name   string   `json:"name"`

	// Target a request body for creating a Access Rule Target
	Target CreateAccessRuleTarget `json:"target"`

	// TimeConstraints Time configuration for an Access Rule.
	TimeConstraints TimeConstraints `json:"timeConstraints"`
}

// CreateFavoriteRequest defines model for CreateFavoriteRequest.
type CreateFavoriteRequest struct {
	AccessRuleId string                       `json:"accessRuleId"`
	Name         string                       `json:"name"`
	Reason       *string                      `json:"reason,omitempty"`
	Timing       RequestTiming                `json:"timing"`
	With         *CreateRequestWithSubRequest `json:"with,omitempty"`
}

// CreateGroupRequest defines model for CreateGroupRequest.
type CreateGroupRequest struct {
	Description *string  `json:"description,omitempty"`
	Members     []string `json:"members"`
	Name        string   `json:"name"`
}

// CreateRequestRequest defines model for CreateRequestRequest.
type CreateRequestRequest struct {
	AccessRuleId string                       `json:"accessRuleId"`
	Reason       *string                      `json:"reason,omitempty"`
	Timing       RequestTiming                `json:"timing"`
	With         *CreateRequestWithSubRequest `json:"with,omitempty"`
}

// CreateUserRequest defines model for CreateUserRequest.
type CreateUserRequest struct {
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"firstName"`
	IsAdmin   bool                `json:"isAdmin"`
	LastName  string              `json:"lastName"`
}

// ReviewRequest defines model for ReviewRequest.
type ReviewRequest struct {
	Comment *string `json:"comment,omitempty"`

	// Decision A decision made on an Access Request.
	Decision       ReviewDecision `json:"decision"`
	OverrideTiming *RequestTiming `json:"overrideTiming,omitempty"`
}

// UserLookupAccessRuleParams defines parameters for UserLookupAccessRule.
type UserLookupAccessRuleParams struct {
	// Type the provider type i.e. commonfate/aws-sso. type should be encoded i.e.  backslash -> %2
	Type *UserLookupAccessRuleParamsType `form:"type,omitempty" json:"type,omitempty"`

	// PermissionSetArnLabel the permissionSetArn label, typically resembles a role name i.e. AdminstratorAccess
	PermissionSetArnLabel *string `form:"permissionSetArn.label,omitempty" json:"permissionSetArn.label,omitempty"`

	// AccountId the aws account id
	AccountId *string `form:"accountId,omitempty" json:"accountId,omitempty"`
}

// UserLookupAccessRuleParamsType defines parameters for UserLookupAccessRule.
type UserLookupAccessRuleParamsType string

// AdminListAccessRulesParams defines parameters for AdminListAccessRules.
type AdminListAccessRulesParams struct {
	// Status Filter Access Rules by a particular status.
	Status *AdminListAccessRulesParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// NextToken encrypted token containing pagination info
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`
}

// AdminListAccessRulesParamsStatus defines parameters for AdminListAccessRules.
type AdminListAccessRulesParamsStatus string

// AdminCreateAccessRuleJSONBody defines parameters for AdminCreateAccessRule.
type AdminCreateAccessRuleJSONBody struct {
	// Approval Approver config for access rules
	Approval    ApproverConfig `json:"approval"`
	Description string         `json:"description"`

	// Groups The group IDs that the access rule applies to.
	Groups []string `json:"groups"`
	Name   string   `json:"name"`

	// Target a request body for creating a Access Rule Target
	Target CreateAccessRuleTarget `json:"target"`

	// TimeConstraints Time configuration for an Access Rule.
	TimeConstraints TimeConstraints `json:"timeConstraints"`
}

// AdminUpdateAccessRuleJSONBody defines parameters for AdminUpdateAccessRule.
type AdminUpdateAccessRuleJSONBody struct {
	// Approval Approver config for access rules
	Approval    ApproverConfig `json:"approval"`
	Description string         `json:"description"`

	// Groups The group IDs that the access rule applies to.
	Groups []string `json:"groups"`
	Name   string   `json:"name"`

	// Target a request body for creating a Access Rule Target
	Target CreateAccessRuleTarget `json:"target"`

	// TimeConstraints Time configuration for an Access Rule.
	TimeConstraints TimeConstraints `json:"timeConstraints"`
}

// AdminListGroupsParams defines parameters for AdminListGroups.
type AdminListGroupsParams struct {
	// NextToken encrypted token containing pagination info
	NextToken *string                      `form:"nextToken,omitempty" json:"nextToken,omitempty"`
	Source    *AdminListGroupsParamsSource `form:"source,omitempty" json:"source,omitempty"`
}

// AdminListGroupsParamsSource defines parameters for AdminListGroups.
type AdminListGroupsParamsSource string

// AdminCreateGroupJSONBody defines parameters for AdminCreateGroup.
type AdminCreateGroupJSONBody struct {
	Description *string  `json:"description,omitempty"`
	Members     []string `json:"members"`
	Name        string   `json:"name"`
}

// AdminUpdateGroupJSONBody defines parameters for AdminUpdateGroup.
type AdminUpdateGroupJSONBody struct {
	Description *string  `json:"description,omitempty"`
	Members     []string `json:"members"`
	Name        string   `json:"name"`
}

// AdminListProviderArgOptionsParams defines parameters for AdminListProviderArgOptions.
type AdminListProviderArgOptionsParams struct {
	// Refresh invalidate the cache and refresh the provider's options.
	Refresh *bool `form:"refresh,omitempty" json:"refresh,omitempty"`
}

// AdminListRequestsParams defines parameters for AdminListRequests.
type AdminListRequestsParams struct {
	// Status omit this param to view all results
	Status *AdminListRequestsParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// NextToken encrypted token containing pagination info
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`
}

// AdminListRequestsParamsStatus defines parameters for AdminListRequests.
type AdminListRequestsParamsStatus string

// AdminListUsersParams defines parameters for AdminListUsers.
type AdminListUsersParams struct {
	// NextToken encrypted token containing pagination info
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`
}

// AdminCreateUserJSONBody defines parameters for AdminCreateUser.
type AdminCreateUserJSONBody struct {
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"firstName"`
	IsAdmin   bool                `json:"isAdmin"`
	LastName  string              `json:"lastName"`
}

// AdminUpdateUserJSONBody defines parameters for AdminUpdateUser.
type AdminUpdateUserJSONBody struct {
	Groups []string `json:"groups"`
}

// UserCreateFavoriteJSONBody defines parameters for UserCreateFavorite.
type UserCreateFavoriteJSONBody struct {
	AccessRuleId string                       `json:"accessRuleId"`
	Name         string                       `json:"name"`
	Reason       *string                      `json:"reason,omitempty"`
	Timing       RequestTiming                `json:"timing"`
	With         *CreateRequestWithSubRequest `json:"with,omitempty"`
}

// UserUpdateFavoriteJSONBody defines parameters for UserUpdateFavorite.
type UserUpdateFavoriteJSONBody struct {
	AccessRuleId string                       `json:"accessRuleId"`
	Name         string                       `json:"name"`
	Reason       *string                      `json:"reason,omitempty"`
	Timing       RequestTiming                `json:"timing"`
	With         *CreateRequestWithSubRequest `json:"with,omitempty"`
}

// UserListRequestsParams defines parameters for UserListRequests.
type UserListRequestsParams struct {
	// Status omit this param to view all results
	Status *UserListRequestsParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// Reviewer show requests that the user is a reviewer for, rather than requests that the user has made themselves
	Reviewer *bool `form:"reviewer,omitempty" json:"reviewer,omitempty"`

	// NextToken encrypted token containing pagination info
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`
}

// UserListRequestsParamsStatus defines parameters for UserListRequests.
type UserListRequestsParamsStatus string

// UserCreateRequestJSONBody defines parameters for UserCreateRequest.
type UserCreateRequestJSONBody struct {
	AccessRuleId string                       `json:"accessRuleId"`
	Reason       *string                      `json:"reason,omitempty"`
	Timing       RequestTiming                `json:"timing"`
	With         *CreateRequestWithSubRequest `json:"with,omitempty"`
}

// UserListRequestsPastParams defines parameters for UserListRequestsPast.
type UserListRequestsPastParams struct {
	// NextToken encrypted token containing pagination info
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`
}

// UserListRequestsUpcomingParams defines parameters for UserListRequestsUpcoming.
type UserListRequestsUpcomingParams struct {
	// NextToken encrypted token containing pagination info
	NextToken *string `form:"nextToken,omitempty" json:"nextToken,omitempty"`
}

// UserReviewRequestJSONBody defines parameters for UserReviewRequest.
type UserReviewRequestJSONBody struct {
	Comment *string `json:"comment,omitempty"`

	// Decision A decision made on an Access Request.
	Decision       ReviewDecision `json:"decision"`
	OverrideTiming *RequestTiming `json:"overrideTiming,omitempty"`
}

// AdminCreateAccessRuleJSONRequestBody defines body for AdminCreateAccessRule for application/json ContentType.
type AdminCreateAccessRuleJSONRequestBody AdminCreateAccessRuleJSONBody

// AdminUpdateAccessRuleJSONRequestBody defines body for AdminUpdateAccessRule for application/json ContentType.
type AdminUpdateAccessRuleJSONRequestBody AdminUpdateAccessRuleJSONBody

// AdminCreateGroupJSONRequestBody defines body for AdminCreateGroup for application/json ContentType.
type AdminCreateGroupJSONRequestBody AdminCreateGroupJSONBody

// AdminUpdateGroupJSONRequestBody defines body for AdminUpdateGroup for application/json ContentType.
type AdminUpdateGroupJSONRequestBody AdminUpdateGroupJSONBody

// AdminCreateUserJSONRequestBody defines body for AdminCreateUser for application/json ContentType.
type AdminCreateUserJSONRequestBody AdminCreateUserJSONBody

// AdminUpdateUserJSONRequestBody defines body for AdminUpdateUser for application/json ContentType.
type AdminUpdateUserJSONRequestBody AdminUpdateUserJSONBody

// UserCreateFavoriteJSONRequestBody defines body for UserCreateFavorite for application/json ContentType.
type UserCreateFavoriteJSONRequestBody UserCreateFavoriteJSONBody

// UserUpdateFavoriteJSONRequestBody defines body for UserUpdateFavorite for application/json ContentType.
type UserUpdateFavoriteJSONRequestBody UserUpdateFavoriteJSONBody

// UserCreateRequestJSONRequestBody defines body for UserCreateRequest for application/json ContentType.
type UserCreateRequestJSONRequestBody UserCreateRequestJSONBody

// UserReviewRequestJSONRequestBody defines body for UserReviewRequest for application/json ContentType.
type UserReviewRequestJSONRequestBody UserReviewRequestJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List Access Rules
	// (GET /api/v1/access-rules)
	UserListAccessRules(w http.ResponseWriter, r *http.Request)
	// Lookup an access rule based on the target
	// (GET /api/v1/access-rules/lookup)
	UserLookupAccessRule(w http.ResponseWriter, r *http.Request, params UserLookupAccessRuleParams)
	// Get Access Rule
	// (GET /api/v1/access-rules/{ruleId})
	UserGetAccessRule(w http.ResponseWriter, r *http.Request, ruleId string)
	// List Access Rule approvers
	// (GET /api/v1/access-rules/{ruleId}/approvers)
	UserGetAccessRuleApprovers(w http.ResponseWriter, r *http.Request, ruleId string)
	// List Access Rules
	// (GET /api/v1/admin/access-rules)
	AdminListAccessRules(w http.ResponseWriter, r *http.Request, params AdminListAccessRulesParams)
	// Create Access Rule
	// (POST /api/v1/admin/access-rules)
	AdminCreateAccessRule(w http.ResponseWriter, r *http.Request)
	// Get Access Rule
	// (GET /api/v1/admin/access-rules/{ruleId})
	AdminGetAccessRule(w http.ResponseWriter, r *http.Request, ruleId string)
	// Update Access Rule
	// (PUT /api/v1/admin/access-rules/{ruleId})
	AdminUpdateAccessRule(w http.ResponseWriter, r *http.Request, ruleId string)
	// Archive Access Rule
	// (POST /api/v1/admin/access-rules/{ruleId}/archive)
	AdminArchiveAccessRule(w http.ResponseWriter, r *http.Request, ruleId string)
	// Get Access Rule version history
	// (GET /api/v1/admin/access-rules/{ruleId}/versions)
	AdminGetAccessRuleVersions(w http.ResponseWriter, r *http.Request, ruleId string)
	// Get Access Rule Version
	// (GET /api/v1/admin/access-rules/{ruleId}/versions/{version})
	AdminGetAccessRuleVersion(w http.ResponseWriter, r *http.Request, ruleId string, version string)
	// Get deployment version details
	// (GET /api/v1/admin/deployment/version)
	AdminGetDeploymentVersion(w http.ResponseWriter, r *http.Request)
	// List groups
	// (GET /api/v1/admin/groups)
	AdminListGroups(w http.ResponseWriter, r *http.Request, params AdminListGroupsParams)
	// Create Group
	// (POST /api/v1/admin/groups)
	AdminCreateGroup(w http.ResponseWriter, r *http.Request)
	// Delete Group
	// (DELETE /api/v1/admin/groups/{groupId})
	AdminDeleteGroup(w http.ResponseWriter, r *http.Request, groupId string)
	// Get Group Details
	// (GET /api/v1/admin/groups/{groupId})
	AdminGetGroup(w http.ResponseWriter, r *http.Request, groupId string)
	// Update Group
	// (PUT /api/v1/admin/groups/{groupId})
	AdminUpdateGroup(w http.ResponseWriter, r *http.Request, groupId string)
	// Get identity configuration
	// (GET /api/v1/admin/identity)
	AdminGetIdentityConfiguration(w http.ResponseWriter, r *http.Request)
	// Sync Identity
	// (POST /api/v1/admin/identity/sync)
	AdminSyncIdentity(w http.ResponseWriter, r *http.Request)
	// List providers
	// (GET /api/v1/admin/providers)
	AdminListProviders(w http.ResponseWriter, r *http.Request)
	// List providers
	// (GET /api/v1/admin/providers/{providerId})
	AdminGetProvider(w http.ResponseWriter, r *http.Request, providerId string)
	// List provider arg options
	// (GET /api/v1/admin/providers/{providerId}/args/{argId}/options)
	AdminListProviderArgOptions(w http.ResponseWriter, r *http.Request, providerId string, argId string, params AdminListProviderArgOptionsParams)
<<<<<<< HEAD
	// List the provider setups in progress
	// (GET /api/v1/admin/providersetups)
	AdminListProvidersetups(w http.ResponseWriter, r *http.Request)
	// Begin the setup process for a new Access Provider
	// (POST /api/v1/admin/providersetups)
	AdminCreateProvidersetup(w http.ResponseWriter, r *http.Request)
	// Delete an in-progress provider setup
	// (DELETE /api/v1/admin/providersetups/{providersetupId})
	AdminDeleteProvidersetup(w http.ResponseWriter, r *http.Request, providersetupId string)
	// Get an in-progress provider setup
	// (GET /api/v1/admin/providersetups/{providersetupId})
	AdminGetProvidersetup(w http.ResponseWriter, r *http.Request, providersetupId string)
	// Complete a ProviderSetup
	// (POST /api/v1/admin/providersetups/{providersetupId}/complete)
	AdminCompleteProvidersetup(w http.ResponseWriter, r *http.Request, providersetupId string)
	// Get the setup instructions for an Access Provider
	// (GET /api/v1/admin/providersetups/{providersetupId}/instructions)
	AdminGetProvidersetupInstructions(w http.ResponseWriter, r *http.Request, providersetupId string)
	// Update the completion status for a Provider setup step
	// (PUT /api/v1/admin/providersetups/{providersetupId}/steps/{stepIndex}/complete)
	AdminSubmitProvidersetupStep(w http.ResponseWriter, r *http.Request, providersetupId string, stepIndex int)
	// Validate the configuration for a Provider Setup
	// (POST /api/v1/admin/providersetups/{providersetupId}/validate)
	AdminValidateProvidersetup(w http.ResponseWriter, r *http.Request, providersetupId string)
	// List providers
	// (GET /api/v1/admin/providersv2)
	AdminListProvidersV2(w http.ResponseWriter, r *http.Request)
=======
>>>>>>> jordi/cf-349-connect-community-provider-to-common
	// Your GET endpoint
	// (GET /api/v1/admin/requests)
	AdminListRequests(w http.ResponseWriter, r *http.Request, params AdminListRequestsParams)
	// Get a request
	// (GET /api/v1/admin/requests/{requestId})
	AdminGetRequest(w http.ResponseWriter, r *http.Request, requestId string)
	// Returns a list of users
	// (GET /api/v1/admin/users)
	AdminListUsers(w http.ResponseWriter, r *http.Request, params AdminListUsersParams)
	// Create User
	// (POST /api/v1/admin/users)
	AdminCreateUser(w http.ResponseWriter, r *http.Request)
	// Update User
	// (POST /api/v1/admin/users/{userId})
	AdminUpdateUser(w http.ResponseWriter, r *http.Request, userId string)
	// ListFavorites
	// (GET /api/v1/favorites)
	UserListFavorites(w http.ResponseWriter, r *http.Request)
	// Create Favorite
	// (POST /api/v1/favorites)
	UserCreateFavorite(w http.ResponseWriter, r *http.Request)

	// (DELETE /api/v1/favorites/{id})
	UserDeleteFavorite(w http.ResponseWriter, r *http.Request, id string)
	// Get Favorite
	// (GET /api/v1/favorites/{id})
	UserGetFavorite(w http.ResponseWriter, r *http.Request, id string)

	// (PUT /api/v1/favorites/{id})
	UserUpdateFavorite(w http.ResponseWriter, r *http.Request, id string)
	// List my requests
	// (GET /api/v1/requests)
	UserListRequests(w http.ResponseWriter, r *http.Request, params UserListRequestsParams)
	// Create a request
	// (POST /api/v1/requests)
	UserCreateRequest(w http.ResponseWriter, r *http.Request)
	// Your GET endpoint
	// (GET /api/v1/requests/past)
	UserListRequestsPast(w http.ResponseWriter, r *http.Request, params UserListRequestsPastParams)
	// Your GET endpoint
	// (GET /api/v1/requests/upcoming)
	UserListRequestsUpcoming(w http.ResponseWriter, r *http.Request, params UserListRequestsUpcomingParams)
	// Get a request
	// (GET /api/v1/requests/{requestId})
	UserGetRequest(w http.ResponseWriter, r *http.Request, requestId string)
	// Get Access Instructions
	// (GET /api/v1/requests/{requestId}/access-instructions)
	UserGetAccessInstructions(w http.ResponseWriter, r *http.Request, requestId string)
	// Get Access Token
	// (GET /api/v1/requests/{requestId}/access-token)
	UserGetAccessToken(w http.ResponseWriter, r *http.Request, requestId string)
	// Cancel a request
	// (POST /api/v1/requests/{requestId}/cancel)
	UserCancelRequest(w http.ResponseWriter, r *http.Request, requestId string)
	// List request events
	// (GET /api/v1/requests/{requestId}/events)
	UserListRequestEvents(w http.ResponseWriter, r *http.Request, requestId string)
	// Review a request
	// (POST /api/v1/requests/{requestId}/review)
	UserReviewRequest(w http.ResponseWriter, r *http.Request, requestId string)
	// Revoke an active request
	// (POST /api/v1/requests/{requestid}/revoke)
	UserRevokeRequest(w http.ResponseWriter, r *http.Request, requestid string)
	// Get details for the current user
	// (GET /api/v1/users/me)
	UserGetMe(w http.ResponseWriter, r *http.Request)
	// Get a user
	// (GET /api/v1/users/{userId})
	UserGetUser(w http.ResponseWriter, r *http.Request, userId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// UserListAccessRules operation middleware
func (siw *ServerInterfaceWrapper) UserListAccessRules(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserListAccessRules(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserLookupAccessRule operation middleware
func (siw *ServerInterfaceWrapper) UserLookupAccessRule(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params UserLookupAccessRuleParams

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", r.URL.Query(), &params.Type)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "type", Err: err})
		return
	}

	// ------------- Optional query parameter "permissionSetArn.label" -------------

	err = runtime.BindQueryParameter("form", true, false, "permissionSetArn.label", r.URL.Query(), &params.PermissionSetArnLabel)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "permissionSetArn.label", Err: err})
		return
	}

	// ------------- Optional query parameter "accountId" -------------

	err = runtime.BindQueryParameter("form", true, false, "accountId", r.URL.Query(), &params.AccountId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "accountId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserLookupAccessRule(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserGetAccessRule operation middleware
func (siw *ServerInterfaceWrapper) UserGetAccessRule(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ruleId" -------------
	var ruleId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ruleId", runtime.ParamLocationPath, chi.URLParam(r, "ruleId"), &ruleId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ruleId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserGetAccessRule(w, r, ruleId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserGetAccessRuleApprovers operation middleware
func (siw *ServerInterfaceWrapper) UserGetAccessRuleApprovers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ruleId" -------------
	var ruleId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ruleId", runtime.ParamLocationPath, chi.URLParam(r, "ruleId"), &ruleId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ruleId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserGetAccessRuleApprovers(w, r, ruleId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminListAccessRules operation middleware
func (siw *ServerInterfaceWrapper) AdminListAccessRules(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AdminListAccessRulesParams

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	// ------------- Optional query parameter "nextToken" -------------

	err = runtime.BindQueryParameter("form", true, false, "nextToken", r.URL.Query(), &params.NextToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nextToken", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminListAccessRules(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminCreateAccessRule operation middleware
func (siw *ServerInterfaceWrapper) AdminCreateAccessRule(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminCreateAccessRule(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminGetAccessRule operation middleware
func (siw *ServerInterfaceWrapper) AdminGetAccessRule(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ruleId" -------------
	var ruleId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ruleId", runtime.ParamLocationPath, chi.URLParam(r, "ruleId"), &ruleId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ruleId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminGetAccessRule(w, r, ruleId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminUpdateAccessRule operation middleware
func (siw *ServerInterfaceWrapper) AdminUpdateAccessRule(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ruleId" -------------
	var ruleId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ruleId", runtime.ParamLocationPath, chi.URLParam(r, "ruleId"), &ruleId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ruleId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminUpdateAccessRule(w, r, ruleId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminArchiveAccessRule operation middleware
func (siw *ServerInterfaceWrapper) AdminArchiveAccessRule(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ruleId" -------------
	var ruleId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ruleId", runtime.ParamLocationPath, chi.URLParam(r, "ruleId"), &ruleId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ruleId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminArchiveAccessRule(w, r, ruleId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminGetAccessRuleVersions operation middleware
func (siw *ServerInterfaceWrapper) AdminGetAccessRuleVersions(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ruleId" -------------
	var ruleId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ruleId", runtime.ParamLocationPath, chi.URLParam(r, "ruleId"), &ruleId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ruleId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminGetAccessRuleVersions(w, r, ruleId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminGetAccessRuleVersion operation middleware
func (siw *ServerInterfaceWrapper) AdminGetAccessRuleVersion(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "ruleId" -------------
	var ruleId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ruleId", runtime.ParamLocationPath, chi.URLParam(r, "ruleId"), &ruleId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "ruleId", Err: err})
		return
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithLocation("simple", false, "version", runtime.ParamLocationPath, chi.URLParam(r, "version"), &version)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "version", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminGetAccessRuleVersion(w, r, ruleId, version)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminGetDeploymentVersion operation middleware
func (siw *ServerInterfaceWrapper) AdminGetDeploymentVersion(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminGetDeploymentVersion(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminListGroups operation middleware
func (siw *ServerInterfaceWrapper) AdminListGroups(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AdminListGroupsParams

	// ------------- Optional query parameter "nextToken" -------------

	err = runtime.BindQueryParameter("form", true, false, "nextToken", r.URL.Query(), &params.NextToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nextToken", Err: err})
		return
	}

	// ------------- Optional query parameter "source" -------------

	err = runtime.BindQueryParameter("form", true, false, "source", r.URL.Query(), &params.Source)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "source", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminListGroups(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminCreateGroup operation middleware
func (siw *ServerInterfaceWrapper) AdminCreateGroup(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminCreateGroup(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminDeleteGroup operation middleware
func (siw *ServerInterfaceWrapper) AdminDeleteGroup(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "groupId" -------------
	var groupId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "groupId", runtime.ParamLocationPath, chi.URLParam(r, "groupId"), &groupId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminDeleteGroup(w, r, groupId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminGetGroup operation middleware
func (siw *ServerInterfaceWrapper) AdminGetGroup(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "groupId" -------------
	var groupId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "groupId", runtime.ParamLocationPath, chi.URLParam(r, "groupId"), &groupId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminGetGroup(w, r, groupId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminUpdateGroup operation middleware
func (siw *ServerInterfaceWrapper) AdminUpdateGroup(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "groupId" -------------
	var groupId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "groupId", runtime.ParamLocationPath, chi.URLParam(r, "groupId"), &groupId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "groupId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminUpdateGroup(w, r, groupId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminGetIdentityConfiguration operation middleware
func (siw *ServerInterfaceWrapper) AdminGetIdentityConfiguration(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminGetIdentityConfiguration(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminSyncIdentity operation middleware
func (siw *ServerInterfaceWrapper) AdminSyncIdentity(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminSyncIdentity(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminListProviders operation middleware
func (siw *ServerInterfaceWrapper) AdminListProviders(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminListProviders(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminGetProvider operation middleware
func (siw *ServerInterfaceWrapper) AdminGetProvider(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "providerId" -------------
	var providerId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "providerId", runtime.ParamLocationPath, chi.URLParam(r, "providerId"), &providerId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "providerId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminGetProvider(w, r, providerId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminListProviderArgOptions operation middleware
func (siw *ServerInterfaceWrapper) AdminListProviderArgOptions(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "providerId" -------------
	var providerId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "providerId", runtime.ParamLocationPath, chi.URLParam(r, "providerId"), &providerId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "providerId", Err: err})
		return
	}

	// ------------- Path parameter "argId" -------------
	var argId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "argId", runtime.ParamLocationPath, chi.URLParam(r, "argId"), &argId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "argId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params AdminListProviderArgOptionsParams

	// ------------- Optional query parameter "refresh" -------------

	err = runtime.BindQueryParameter("form", true, false, "refresh", r.URL.Query(), &params.Refresh)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "refresh", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminListProviderArgOptions(w, r, providerId, argId, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminListProvidersV2 operation middleware
func (siw *ServerInterfaceWrapper) AdminListProvidersV2(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminListProvidersV2(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AdminListRequests operation middleware
func (siw *ServerInterfaceWrapper) AdminListRequests(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AdminListRequestsParams

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	// ------------- Optional query parameter "nextToken" -------------

	err = runtime.BindQueryParameter("form", true, false, "nextToken", r.URL.Query(), &params.NextToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nextToken", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminListRequests(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminGetRequest operation middleware
func (siw *ServerInterfaceWrapper) AdminGetRequest(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "requestId" -------------
	var requestId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "requestId", runtime.ParamLocationPath, chi.URLParam(r, "requestId"), &requestId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminGetRequest(w, r, requestId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminListUsers operation middleware
func (siw *ServerInterfaceWrapper) AdminListUsers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AdminListUsersParams

	// ------------- Optional query parameter "nextToken" -------------

	err = runtime.BindQueryParameter("form", true, false, "nextToken", r.URL.Query(), &params.NextToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nextToken", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminListUsers(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminCreateUser operation middleware
func (siw *ServerInterfaceWrapper) AdminCreateUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminCreateUser(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// AdminUpdateUser operation middleware
func (siw *ServerInterfaceWrapper) AdminUpdateUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, chi.URLParam(r, "userId"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AdminUpdateUser(w, r, userId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserListFavorites operation middleware
func (siw *ServerInterfaceWrapper) UserListFavorites(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserListFavorites(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserCreateFavorite operation middleware
func (siw *ServerInterfaceWrapper) UserCreateFavorite(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserCreateFavorite(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserDeleteFavorite operation middleware
func (siw *ServerInterfaceWrapper) UserDeleteFavorite(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserDeleteFavorite(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserGetFavorite operation middleware
func (siw *ServerInterfaceWrapper) UserGetFavorite(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserGetFavorite(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserUpdateFavorite operation middleware
func (siw *ServerInterfaceWrapper) UserUpdateFavorite(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserUpdateFavorite(w, r, id)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserListRequests operation middleware
func (siw *ServerInterfaceWrapper) UserListRequests(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params UserListRequestsParams

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	// ------------- Optional query parameter "reviewer" -------------

	err = runtime.BindQueryParameter("form", true, false, "reviewer", r.URL.Query(), &params.Reviewer)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "reviewer", Err: err})
		return
	}

	// ------------- Optional query parameter "nextToken" -------------

	err = runtime.BindQueryParameter("form", true, false, "nextToken", r.URL.Query(), &params.NextToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nextToken", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserListRequests(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserCreateRequest operation middleware
func (siw *ServerInterfaceWrapper) UserCreateRequest(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserCreateRequest(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserListRequestsPast operation middleware
func (siw *ServerInterfaceWrapper) UserListRequestsPast(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params UserListRequestsPastParams

	// ------------- Optional query parameter "nextToken" -------------

	err = runtime.BindQueryParameter("form", true, false, "nextToken", r.URL.Query(), &params.NextToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nextToken", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserListRequestsPast(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserListRequestsUpcoming operation middleware
func (siw *ServerInterfaceWrapper) UserListRequestsUpcoming(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params UserListRequestsUpcomingParams

	// ------------- Optional query parameter "nextToken" -------------

	err = runtime.BindQueryParameter("form", true, false, "nextToken", r.URL.Query(), &params.NextToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "nextToken", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserListRequestsUpcoming(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserGetRequest operation middleware
func (siw *ServerInterfaceWrapper) UserGetRequest(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "requestId" -------------
	var requestId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "requestId", runtime.ParamLocationPath, chi.URLParam(r, "requestId"), &requestId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserGetRequest(w, r, requestId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserGetAccessInstructions operation middleware
func (siw *ServerInterfaceWrapper) UserGetAccessInstructions(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "requestId" -------------
	var requestId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "requestId", runtime.ParamLocationPath, chi.URLParam(r, "requestId"), &requestId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserGetAccessInstructions(w, r, requestId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserGetAccessToken operation middleware
func (siw *ServerInterfaceWrapper) UserGetAccessToken(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "requestId" -------------
	var requestId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "requestId", runtime.ParamLocationPath, chi.URLParam(r, "requestId"), &requestId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserGetAccessToken(w, r, requestId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserCancelRequest operation middleware
func (siw *ServerInterfaceWrapper) UserCancelRequest(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "requestId" -------------
	var requestId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "requestId", runtime.ParamLocationPath, chi.URLParam(r, "requestId"), &requestId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserCancelRequest(w, r, requestId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserListRequestEvents operation middleware
func (siw *ServerInterfaceWrapper) UserListRequestEvents(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "requestId" -------------
	var requestId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "requestId", runtime.ParamLocationPath, chi.URLParam(r, "requestId"), &requestId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserListRequestEvents(w, r, requestId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserReviewRequest operation middleware
func (siw *ServerInterfaceWrapper) UserReviewRequest(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "requestId" -------------
	var requestId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "requestId", runtime.ParamLocationPath, chi.URLParam(r, "requestId"), &requestId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserReviewRequest(w, r, requestId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserRevokeRequest operation middleware
func (siw *ServerInterfaceWrapper) UserRevokeRequest(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "requestid" -------------
	var requestid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "requestid", runtime.ParamLocationPath, chi.URLParam(r, "requestid"), &requestid)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "requestid", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserRevokeRequest(w, r, requestid)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserGetMe operation middleware
func (siw *ServerInterfaceWrapper) UserGetMe(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserGetMe(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UserGetUser operation middleware
func (siw *ServerInterfaceWrapper) UserGetUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, chi.URLParam(r, "userId"), &userId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UserGetUser(w, r, userId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/access-rules", wrapper.UserListAccessRules)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/access-rules/lookup", wrapper.UserLookupAccessRule)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/access-rules/{ruleId}", wrapper.UserGetAccessRule)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/access-rules/{ruleId}/approvers", wrapper.UserGetAccessRuleApprovers)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/access-rules", wrapper.AdminListAccessRules)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/admin/access-rules", wrapper.AdminCreateAccessRule)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/access-rules/{ruleId}", wrapper.AdminGetAccessRule)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/admin/access-rules/{ruleId}", wrapper.AdminUpdateAccessRule)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/admin/access-rules/{ruleId}/archive", wrapper.AdminArchiveAccessRule)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/access-rules/{ruleId}/versions", wrapper.AdminGetAccessRuleVersions)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/access-rules/{ruleId}/versions/{version}", wrapper.AdminGetAccessRuleVersion)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/deployment/version", wrapper.AdminGetDeploymentVersion)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/groups", wrapper.AdminListGroups)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/admin/groups", wrapper.AdminCreateGroup)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/admin/groups/{groupId}", wrapper.AdminDeleteGroup)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/groups/{groupId}", wrapper.AdminGetGroup)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/admin/groups/{groupId}", wrapper.AdminUpdateGroup)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/identity", wrapper.AdminGetIdentityConfiguration)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/admin/identity/sync", wrapper.AdminSyncIdentity)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/providers", wrapper.AdminListProviders)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/providers/{providerId}", wrapper.AdminGetProvider)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/providers/{providerId}/args/{argId}/options", wrapper.AdminListProviderArgOptions)
	})
	r.Group(func(r chi.Router) {
<<<<<<< HEAD
		r.Get(options.BaseURL+"/api/v1/admin/providersetups", wrapper.AdminListProvidersetups)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/admin/providersetups", wrapper.AdminCreateProvidersetup)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/admin/providersetups/{providersetupId}", wrapper.AdminDeleteProvidersetup)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/providersetups/{providersetupId}", wrapper.AdminGetProvidersetup)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/admin/providersetups/{providersetupId}/complete", wrapper.AdminCompleteProvidersetup)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/providersetups/{providersetupId}/instructions", wrapper.AdminGetProvidersetupInstructions)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/admin/providersetups/{providersetupId}/steps/{stepIndex}/complete", wrapper.AdminSubmitProvidersetupStep)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/admin/providersetups/{providersetupId}/validate", wrapper.AdminValidateProvidersetup)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/providersv2", wrapper.AdminListProvidersV2)
	})
	r.Group(func(r chi.Router) {
=======
>>>>>>> jordi/cf-349-connect-community-provider-to-common
		r.Get(options.BaseURL+"/api/v1/admin/requests", wrapper.AdminListRequests)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/requests/{requestId}", wrapper.AdminGetRequest)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/admin/users", wrapper.AdminListUsers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/admin/users", wrapper.AdminCreateUser)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/admin/users/{userId}", wrapper.AdminUpdateUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/favorites", wrapper.UserListFavorites)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/favorites", wrapper.UserCreateFavorite)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/favorites/{id}", wrapper.UserDeleteFavorite)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/favorites/{id}", wrapper.UserGetFavorite)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/favorites/{id}", wrapper.UserUpdateFavorite)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/requests", wrapper.UserListRequests)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/requests", wrapper.UserCreateRequest)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/requests/past", wrapper.UserListRequestsPast)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/requests/upcoming", wrapper.UserListRequestsUpcoming)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/requests/{requestId}", wrapper.UserGetRequest)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/requests/{requestId}/access-instructions", wrapper.UserGetAccessInstructions)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/requests/{requestId}/access-token", wrapper.UserGetAccessToken)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/requests/{requestId}/cancel", wrapper.UserCancelRequest)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/requests/{requestId}/events", wrapper.UserListRequestEvents)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/requests/{requestId}/review", wrapper.UserReviewRequest)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/requests/{requestid}/revoke", wrapper.UserRevokeRequest)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/users/me", wrapper.UserGetMe)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/users/{userId}", wrapper.UserGetUser)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

<<<<<<< HEAD
	"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",
	"///wCICU1dgAAA==",
=======
	"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",
	"aK4FsQPxpud+02UjNx9v/icAAP//SVSV3aG0AAA=",
>>>>>>> jordi/cf-349-connect-community-provider-to-common
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./accesshandler/openapi.yml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
