// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/common-fate/common-fate/pkg/service/accesssvc (interfaces: AccessRuleService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	rule "github.com/common-fate/common-fate/pkg/rule"
	gomock "github.com/golang/mock/gomock"
)

// MockAccessRuleService is a mock of AccessRuleService interface.
type MockAccessRuleService struct {
	ctrl     *gomock.Controller
	recorder *MockAccessRuleServiceMockRecorder
}

// MockAccessRuleServiceMockRecorder is the mock recorder for MockAccessRuleService.
type MockAccessRuleServiceMockRecorder struct {
	mock *MockAccessRuleService
}

// NewMockAccessRuleService creates a new mock instance.
func NewMockAccessRuleService(ctrl *gomock.Controller) *MockAccessRuleService {
	mock := &MockAccessRuleService{ctrl: ctrl}
	mock.recorder = &MockAccessRuleServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessRuleService) EXPECT() *MockAccessRuleServiceMockRecorder {
	return m.recorder
}

// GetApprovers mocks base method.
func (m *MockAccessRuleService) GetApprovers(arg0 context.Context, arg1 rule.AccessRule) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApprovers", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApprovers indicates an expected call of GetApprovers.
func (mr *MockAccessRuleServiceMockRecorder) GetApprovers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApprovers", reflect.TypeOf((*MockAccessRuleService)(nil).GetApprovers), arg0, arg1)
}
