/**
 * Generated by orval v6.10.3 üç∫
 * Do not edit manually.
 * Deployment CLI
 * Deployment CLI
 * OpenAPI spec version: 1.0
 */
import useSwr from 'swr'
import type {
  SWRConfiguration,
  Key
} from 'swr'
import {
  rest
} from 'msw'
import {
  faker
} from '@faker-js/faker'
import { customInstanceLocal } from '../../custom-instance'
import type { ErrorType } from '../../custom-instance'
export type ListProvidersResponseResponse = {
  next: string | null;
  providers: Provider[];
};

export type ListRegistryProvidersResponseResponse = {
  next: string | null;
  providers: RegistryProvider[];
};

export type ErrorResponseResponse = {
  error?: string;
};

export interface Provider {
  team: string;
  name: string;
  version: string;
  alias: string;
  id: string;
}

export interface RegistryProvider {
  id?: string;
}




  
  // eslint-disable-next-line
  type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * @summary Your GET endpoint
 */
export const getApiV1Providers = (
    
 options?: SecondParameter<typeof customInstanceLocal>) => {
      return customInstanceLocal<ListProvidersResponseResponse>(
      {url: `/api/v1/providers`, method: 'get'
    },
      options);
    }
  

export const getGetApiV1ProvidersKey = () => [`/api/v1/providers`];

    
export type GetApiV1ProvidersQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1Providers>>>
export type GetApiV1ProvidersQueryError = ErrorType<ErrorResponseResponse>

export const useGetApiV1Providers = <TError = ErrorType<ErrorResponseResponse>>(
  options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiV1Providers>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customInstanceLocal> }

  ) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiV1ProvidersKey() : null);
  const swrFn = () => getApiV1Providers(requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}


/**
 * @summary Your GET endpoint
 */
export const getApiV1RegistryProviders = (
    
 options?: SecondParameter<typeof customInstanceLocal>) => {
      return customInstanceLocal<ListRegistryProvidersResponseResponse>(
      {url: `/api/v1/registry/providers`, method: 'get'
    },
      options);
    }
  

export const getGetApiV1RegistryProvidersKey = () => [`/api/v1/registry/providers`];

    
export type GetApiV1RegistryProvidersQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1RegistryProviders>>>
export type GetApiV1RegistryProvidersQueryError = ErrorType<ErrorResponseResponse>

export const useGetApiV1RegistryProviders = <TError = ErrorType<ErrorResponseResponse>>(
  options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getApiV1RegistryProviders>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customInstanceLocal> }

  ) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetApiV1RegistryProvidersKey() : null);
  const swrFn = () => getApiV1RegistryProviders(requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}




export const getGetApiV1ProvidersMock = () => ({next: faker.helpers.arrayElement([faker.random.word(), null]), providers: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({team: faker.random.word(), name: faker.random.word(), version: faker.random.word(), alias: faker.random.word(), id: faker.random.word()}))})

export const getGetApiV1RegistryProvidersMock = () => ({next: faker.helpers.arrayElement([faker.random.word(), null]), providers: Array.from({ length: faker.datatype.number({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.random.word(), undefined])}))})

export const getDeploymentCLIMSW = () => [
rest.get('*/api/v1/providers', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetApiV1ProvidersMock()),
        )
      }),rest.get('*/api/v1/registry/providers', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getGetApiV1RegistryProvidersMock()),
        )
      }),]
