/**
 * Generated by orval v6.10.3 üç∫
 * Do not edit manually.
 * Common Fate
 * Common Fate API
 * OpenAPI spec version: 1.0
 */
import useSwr from 'swr'
import type {
  SWRConfiguration,
  Key
} from 'swr'
import type {
  ListProviderSetupsV2ResponseResponse,
  ProviderSetupResponseResponse,
  CreateProviderSetupRequestBody,
  ProviderSetupV2ResponseResponse
} from '.././types'
import { customInstanceCommonfate } from '../../custom-instance'
import type { ErrorType } from '../../custom-instance'


  
  // eslint-disable-next-line
  type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

/**
 * List providers which are still in the process of being set up.
 * @summary List the provider setups in progress
 */
export const adminListProvidersetupsv2 = (
    
 options?: SecondParameter<typeof customInstanceCommonfate>) => {
      return customInstanceCommonfate<ListProviderSetupsV2ResponseResponse>(
      {url: `/api/v1/admin/providersetupsv2`, method: 'get'
    },
      options);
    }
  

export const getAdminListProvidersetupsv2Key = () => [`/api/v1/admin/providersetupsv2`];

    
export type AdminListProvidersetupsv2QueryResult = NonNullable<Awaited<ReturnType<typeof adminListProvidersetupsv2>>>
export type AdminListProvidersetupsv2QueryError = ErrorType<unknown>

export const useAdminListProvidersetupsv2 = <TError = ErrorType<unknown>>(
  options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof adminListProvidersetupsv2>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customInstanceCommonfate> }

  ) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getAdminListProvidersetupsv2Key() : null);
  const swrFn = () => adminListProvidersetupsv2(requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Begins the guided setup process for a new Access Provider.
 * @summary Begin the setup process for a new Access Provider
 */
export const adminCreateProvidersetupv2 = (
    createProviderSetupRequestBody: CreateProviderSetupRequestBody,
 options?: SecondParameter<typeof customInstanceCommonfate>) => {
      return customInstanceCommonfate<ProviderSetupResponseResponse>(
      {url: `/api/v1/admin/providersetupsv2`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: createProviderSetupRequestBody
    },
      options);
    }
  

/**
 * Get the setup instructions for an Access Provider.
 * @summary Get an in-progress provider setup
 */
export const adminGetProvidersetup = (
    providersetupId: string,
 options?: SecondParameter<typeof customInstanceCommonfate>) => {
      return customInstanceCommonfate<ProviderSetupV2ResponseResponse>(
      {url: `/api/v1/admin/providersetupsv2/${providersetupId}`, method: 'get'
    },
      options);
    }
  

export const getAdminGetProvidersetupKey = (providersetupId: string,) => [`/api/v1/admin/providersetupsv2/${providersetupId}`];

    
export type AdminGetProvidersetupQueryResult = NonNullable<Awaited<ReturnType<typeof adminGetProvidersetup>>>
export type AdminGetProvidersetupQueryError = ErrorType<unknown>

export const useAdminGetProvidersetup = <TError = ErrorType<unknown>>(
 providersetupId: string, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof adminGetProvidersetup>>, TError> & { swrKey?: Key, enabled?: boolean }, request?: SecondParameter<typeof customInstanceCommonfate> }

  ) => {

  const {swr: swrOptions, request: requestOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false && !!(providersetupId)
    const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getAdminGetProvidersetupKey(providersetupId) : null);
  const swrFn = () => adminGetProvidersetup(providersetupId, requestOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * Removes an in-progress provider setup and deletes all data relating to it.

Returns the deleted provider.
 * @summary Delete an in-progress provider setup
 */
export const adminDeleteProvidersetup = (
    providersetupId: string,
 options?: SecondParameter<typeof customInstanceCommonfate>) => {
      return customInstanceCommonfate<ProviderSetupV2ResponseResponse>(
      {url: `/api/v1/admin/providersetupsv2/${providersetupId}`, method: 'delete'
    },
      options);
    }
  

