// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/common-fate/common-fate/pkg/api (interfaces: PreflightService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	access "github.com/common-fate/common-fate/pkg/access"
	identity "github.com/common-fate/common-fate/pkg/identity"
	types "github.com/common-fate/common-fate/pkg/types"
	gomock "github.com/golang/mock/gomock"
)

// MockPreflightService is a mock of PreflightService interface.
type MockPreflightService struct {
	ctrl     *gomock.Controller
	recorder *MockPreflightServiceMockRecorder
}

// MockPreflightServiceMockRecorder is the mock recorder for MockPreflightService.
type MockPreflightServiceMockRecorder struct {
	mock *MockPreflightService
}

// NewMockPreflightService creates a new mock instance.
func NewMockPreflightService(ctrl *gomock.Controller) *MockPreflightService {
	mock := &MockPreflightService{ctrl: ctrl}
	mock.recorder = &MockPreflightServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPreflightService) EXPECT() *MockPreflightServiceMockRecorder {
	return m.recorder
}

// ProcessPreflight mocks base method.
func (m *MockPreflightService) ProcessPreflight(arg0 context.Context, arg1 identity.User, arg2 types.CreatePreflightRequest) (*access.Preflight, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessPreflight", arg0, arg1, arg2)
	ret0, _ := ret[0].(*access.Preflight)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessPreflight indicates an expected call of ProcessPreflight.
func (mr *MockPreflightServiceMockRecorder) ProcessPreflight(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessPreflight", reflect.TypeOf((*MockPreflightService)(nil).ProcessPreflight), arg0, arg1, arg2)
}
