// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package client

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	externalRef0 "github.com/common-fate/common-fate/accesshandler/pkg/types"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
)

// Defines values for AccessRuleStatus.
const (
	AccessRuleStatusACTIVE   AccessRuleStatus = "ACTIVE"
	AccessRuleStatusARCHIVED AccessRuleStatus = "ARCHIVED"
)

// Defines values for AccessRuleTargetDetailArgumentsFormElement.
const (
	INPUT       AccessRuleTargetDetailArgumentsFormElement = "INPUT"
	MULTISELECT AccessRuleTargetDetailArgumentsFormElement = "MULTISELECT"
)

// Defines values for ApprovalMethod.
const (
	AUTOMATIC ApprovalMethod = "AUTOMATIC"
	REVIEWED  ApprovalMethod = "REVIEWED"
)

// Defines values for GrantStatus.
const (
	GrantStatusACTIVE  GrantStatus = "ACTIVE"
	GrantStatusERROR   GrantStatus = "ERROR"
	GrantStatusEXPIRED GrantStatus = "EXPIRED"
	GrantStatusPENDING GrantStatus = "PENDING"
	GrantStatusREVOKED GrantStatus = "REVOKED"
)

// Defines values for IdpStatus.
const (
	IdpStatusACTIVE   IdpStatus = "ACTIVE"
	IdpStatusARCHIVED IdpStatus = "ARCHIVED"
)

// Defines values for ProviderSetupStatus.
const (
	ProviderSetupStatusCOMPLETE                       ProviderSetupStatus = "COMPLETE"
	ProviderSetupStatusINITIALCONFIGURATIONINPROGRESS ProviderSetupStatus = "INITIAL_CONFIGURATION_IN_PROGRESS"
	ProviderSetupStatusVALIDATING                     ProviderSetupStatus = "VALIDATING"
	ProviderSetupStatusVALIDATIONFAILED               ProviderSetupStatus = "VALIDATION_FAILED"
	ProviderSetupStatusVALIDATIONSUCEEDED             ProviderSetupStatus = "VALIDATION_SUCEEDED"
)

// Defines values for ProviderSetupDiagnosticLogLevel.
const (
	ProviderSetupDiagnosticLogLevelERROR   ProviderSetupDiagnosticLogLevel = "ERROR"
	ProviderSetupDiagnosticLogLevelINFO    ProviderSetupDiagnosticLogLevel = "INFO"
	ProviderSetupDiagnosticLogLevelWARNING ProviderSetupDiagnosticLogLevel = "WARNING"
)

// Defines values for ProviderSetupV2Status.
const (
	ProviderSetupV2StatusCOMPLETE                       ProviderSetupV2Status = "COMPLETE"
	ProviderSetupV2StatusINITIALCONFIGURATIONINPROGRESS ProviderSetupV2Status = "INITIAL_CONFIGURATION_IN_PROGRESS"
	ProviderSetupV2StatusVALIDATING                     ProviderSetupV2Status = "VALIDATING"
	ProviderSetupV2StatusVALIDATIONFAILED               ProviderSetupV2Status = "VALIDATION_FAILED"
	ProviderSetupV2StatusVALIDATIONSUCEEDED             ProviderSetupV2Status = "VALIDATION_SUCEEDED"
)

// Defines values for ProviderSetupValidationStatus.
const (
	ProviderSetupValidationStatusERROR      ProviderSetupValidationStatus = "ERROR"
	ProviderSetupValidationStatusINPROGRESS ProviderSetupValidationStatus = "IN_PROGRESS"
	ProviderSetupValidationStatusPENDING    ProviderSetupValidationStatus = "PENDING"
	ProviderSetupValidationStatusSUCCESS    ProviderSetupValidationStatus = "SUCCESS"
)

// Defines values for RequestArgumentFormElement.
const (
	SELECT RequestArgumentFormElement = "SELECT"
)

// Defines values for RequestEventFromGrantStatus.
const (
	RequestEventFromGrantStatusACTIVE  RequestEventFromGrantStatus = "ACTIVE"
	RequestEventFromGrantStatusERROR   RequestEventFromGrantStatus = "ERROR"
	RequestEventFromGrantStatusEXPIRED RequestEventFromGrantStatus = "EXPIRED"
	RequestEventFromGrantStatusPENDING RequestEventFromGrantStatus = "PENDING"
	RequestEventFromGrantStatusREVOKED RequestEventFromGrantStatus = "REVOKED"
)

// Defines values for RequestEventToGrantStatus.
const (
	RequestEventToGrantStatusACTIVE  RequestEventToGrantStatus = "ACTIVE"
	RequestEventToGrantStatusERROR   RequestEventToGrantStatus = "ERROR"
	RequestEventToGrantStatusEXPIRED RequestEventToGrantStatus = "EXPIRED"
	RequestEventToGrantStatusPENDING RequestEventToGrantStatus = "PENDING"
	RequestEventToGrantStatusREVOKED RequestEventToGrantStatus = "REVOKED"
)

// Defines values for RequestStatus.
const (
	RequestStatusAPPROVED  RequestStatus = "APPROVED"
	RequestStatusCANCELLED RequestStatus = "CANCELLED"
	RequestStatusDECLINED  RequestStatus = "DECLINED"
	RequestStatusPENDING   RequestStatus = "PENDING"
)

// Defines values for ReviewDecision.
const (
	APPROVED ReviewDecision = "APPROVED"
	DECLINED ReviewDecision = "DECLINED"
)

// Access Rule contains information for an end user to make a request for access.
type AccessRule struct {
	Description string `json:"description"`
	ID          string `json:"id"`
	IsCurrent   bool   `json:"isCurrent"`
	Name        string `json:"name"`

	// A target for an access rule
	Target AccessRuleTarget `json:"target"`

	// Time configuration for an Access Rule.
	TimeConstraints TimeConstraints `json:"timeConstraints"`

	// A unique version identifier for the Access Rule. Updating a rule creates a new version.
	// When a rule is updated, it's ID remains consistent.
	Version string `json:"version"`
}

// AccessRuleDetail contains detailed information about a rule and is used in administrative apis.
type AccessRuleDetail struct {
	// Approver config for access rules
	Approval    ApproverConfig `json:"approval"`
	Description string         `json:"description"`

	// The group IDs that the access rule applies to.
	Groups    []string           `json:"groups"`
	ID        string             `json:"id"`
	IsCurrent bool               `json:"isCurrent"`
	Metadata  AccessRuleMetadata `json:"metadata"`
	Name      string             `json:"name"`

	// The status of an Access Rule.
	Status AccessRuleStatus `json:"status"`

	// A detailed target for an access rule
	Target AccessRuleTargetDetail `json:"target"`

	// Time configuration for an Access Rule.
	TimeConstraints TimeConstraints `json:"timeConstraints"`

	// A unique version identifier for the Access Rule. Updating a rule creates a new version.
	// When a rule is updated, it's ID remains consistent.
	Version string `json:"version"`
}

// AccessRuleMetadata defines model for AccessRuleMetadata.
type AccessRuleMetadata struct {
	CreatedAt     time.Time `json:"createdAt"`
	CreatedBy     string    `json:"createdBy"`
	UpdateMessage *string   `json:"updateMessage,omitempty"`
	UpdatedAt     time.Time `json:"updatedAt"`
	UpdatedBy     string    `json:"updatedBy"`
}

// The status of an Access Rule.
type AccessRuleStatus string

// A target for an access rule
type AccessRuleTarget struct {
	// Provider
	Provider Provider `json:"provider"`
}

// A detailed target for an access rule
type AccessRuleTargetDetail struct {
	// Provider
	Provider Provider                    `json:"provider"`
	With     AccessRuleTargetDetail_With `json:"with"`
}

// AccessRuleTargetDetail_With defines model for AccessRuleTargetDetail.With.
type AccessRuleTargetDetail_With struct {
	AdditionalProperties map[string]AccessRuleTargetDetailArguments `json:"-"`
}

// AccessRuleTargetDetailArguments defines model for AccessRuleTargetDetailArguments.
type AccessRuleTargetDetailArguments struct {
	FormElement AccessRuleTargetDetailArgumentsFormElement `json:"formElement"`
	Groupings   AccessRuleTargetDetailArguments_Groupings  `json:"groupings"`
	Values      []string                                   `json:"values"`
}

// AccessRuleTargetDetailArgumentsFormElement defines model for AccessRuleTargetDetailArguments.FormElement.
type AccessRuleTargetDetailArgumentsFormElement string

// AccessRuleTargetDetailArguments_Groupings defines model for AccessRuleTargetDetailArguments.Groupings.
type AccessRuleTargetDetailArguments_Groupings struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// Describes whether a request has been approved automatically or from a review
type ApprovalMethod string

// Approver config for access rules
type ApproverConfig struct {
	Groups []string `json:"groups"`

	// The user IDs of the approvers for the request.
	Users []string `json:"users"`
}

// a request body for creating a Access Rule Target
type CreateAccessRuleTarget struct {
	ProviderId string                      `json:"providerId"`
	With       CreateAccessRuleTarget_With `json:"with"`
}

// CreateAccessRuleTarget_With defines model for CreateAccessRuleTarget.With.
type CreateAccessRuleTarget_With struct {
	AdditionalProperties map[string]CreateAccessRuleTargetDetailArguments `json:"-"`
}

// CreateAccessRuleTargetDetailArguments defines model for CreateAccessRuleTargetDetailArguments.
type CreateAccessRuleTargetDetailArguments struct {
	Groupings CreateAccessRuleTargetDetailArguments_Groupings `json:"groupings"`
	Values    []string                                        `json:"values"`
}

// CreateAccessRuleTargetDetailArguments_Groupings defines model for CreateAccessRuleTargetDetailArguments.Groupings.
type CreateAccessRuleTargetDetailArguments_Groupings struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// CreateRequestWith defines model for CreateRequestWith.
type CreateRequestWith struct {
	AdditionalProperties map[string][]string `json:"-"`
}

// CreateRequestWithSubRequest defines model for CreateRequestWithSubRequest.
type CreateRequestWithSubRequest = []CreateRequestWith

// Favorite defines model for Favorite.
type Favorite struct {
	Id     string `json:"id"`
	Name   string `json:"name"`
	RuleId string `json:"ruleId"`
}

// Detailed object for a Favorite.
type FavoriteDetail struct {
	Id     string                      `json:"id"`
	Name   string                      `json:"name"`
	Reason *string                     `json:"reason,omitempty"`
	Timing RequestTiming               `json:"timing"`
	With   CreateRequestWithSubRequest `json:"with"`
}

// A temporary assignment of a user to a principal.
type Grant struct {
	// The end time of the grant.
	End time.Time `json:"end"`

	// The ID of the provider to grant access to.
	Provider string `json:"provider"`

	// The start time of the grant.
	Start time.Time `json:"start"`

	// The current state of the grant.
	Status GrantStatus `json:"status"`

	// The email address of the user to grant access to.
	Subject openapi_types.Email `json:"subject"`
}

// The current state of the grant.
type GrantStatus string

// Group defines model for Group.
type Group struct {
	Description string   `json:"description"`
	Id          string   `json:"id"`
	MemberCount int      `json:"memberCount"`
	Members     []string `json:"members"`
	Name        string   `json:"name"`
	Source      string   `json:"source"`
}

// IdpStatus defines model for IdpStatus.
type IdpStatus string

// KeyValue defines model for KeyValue.
type KeyValue struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// A matched access rule with option values if they are required for the access rule request
type LookupAccessRule struct {
	// Access Rule contains information for an end user to make a request for access.
	AccessRule AccessRule `json:"accessRule"`

	// If the matched access rule has selectable fields, this array will contain the matched values to be used to prefill the form when requesting
	SelectableWithOptionValues *[]KeyValue `json:"selectableWithOptionValues,omitempty"`
}

// Provider
type Provider struct {
	Id   string `json:"id"`
	Type string `json:"type"`
}

// ProviderConfigField defines model for ProviderConfigField.
type ProviderConfigField struct {
	Description string `json:"description"`
	Id          string `json:"id"`

	// Whether the config value is optional.
	IsOptional bool `json:"isOptional"`

	// Whether or not the config field is a secret (like an API key or a password)
	IsSecret bool   `json:"isSecret"`
	Name     string `json:"name"`

	// the path to where the secret will be stored, in a secrets manager like AWS SSM Parameter Store.
	SecretPath *string `json:"secretPath,omitempty"`
}

// ProviderConfigValue defines model for ProviderConfigValue.
type ProviderConfigValue struct {
	// The ID of the config field.
	Id string `json:"id"`

	// The value entered by the user.
	Value string `json:"value"`
}

// A provider in the process of being set up through the guided setup workflow in Common Fate. These providers are **not** yet active.
type ProviderSetup struct {
	ConfigValidation []externalRef0.ProviderConfigValidation `json:"configValidation"`

	// The current configuration values.
	ConfigValues map[string]string `json:"configValues"`

	// A unique ID for the provider setup. This is a random KSUID to avoid potential conflicts with user-specified provider IDs in the `deployment.yml` file.
	Id string `json:"id"`

	// The status of the setup process.
	Status ProviderSetupStatus `json:"status"`

	// An overview of the steps indicating whether they are complete.
	Steps []ProviderSetupStepOverview `json:"steps"`

	// The type of the Access Provider being set up.
	Type string `json:"type"`

	// The version of the provider.
	Version string `json:"version"`
}

// The status of the setup process.
type ProviderSetupStatus string

// A log entry related to a provider setup validation.
type ProviderSetupDiagnosticLog struct {
	// The log level.
	Level ProviderSetupDiagnosticLogLevel `json:"level"`

	// The log message.
	Msg string `json:"msg"`
}

// The log level.
type ProviderSetupDiagnosticLogLevel string

// ProviderSetupInstructions defines model for ProviderSetupInstructions.
type ProviderSetupInstructions struct {
	StepDetails []ProviderSetupStepDetails `json:"stepDetails"`
}

// ProviderSetupStepDetails defines model for ProviderSetupStepDetails.
type ProviderSetupStepDetails struct {
	ConfigFields []ProviderConfigField `json:"configFields"`
	Instructions string                `json:"instructions"`
	Title        string                `json:"title"`
}

// Indicates whether a setup step is complete or not.
type ProviderSetupStepOverview struct {
	// Whether the step has been completed.
	Complete bool `json:"complete"`
}

// A provider in the process of being set up through the guided setup workflow in Common Fate. These providers are **not** yet active.
type ProviderSetupV2 struct {
	ConfigValidation []externalRef0.ProviderConfigValidation `json:"configValidation"`

	// The current configuration values.
	ConfigValues map[string]string `json:"configValues"`

	// A unique ID for the provider setup. This is a random KSUID to avoid potential conflicts with user-specified provider IDs in the `deployment.yml` file.
	Id   string `json:"id"`
	Name string `json:"name"`

	// The status of the setup process.
	Status ProviderSetupV2Status `json:"status"`

	// An overview of the steps indicating whether they are complete.
	Steps []ProviderSetupStepOverview `json:"steps"`

	// The type of the Access Provider being set up.
	Team string `json:"team"`

	// The version of the provider.
	Version string `json:"version"`
}

// The status of the setup process.
type ProviderSetupV2Status string

// A validation against the configuration values of the Access Provider.
type ProviderSetupValidation struct {
	// The particular config fields validated, if any.
	FieldsValidated []interface{} `json:"fieldsValidated"`

	// The ID of the validation, such as `list-sso-users`.
	Id   string                        `json:"id"`
	Logs *[]ProviderSetupDiagnosticLog `json:"logs,omitempty"`

	// The status of the validation.
	Status ProviderSetupValidationStatus `json:"status"`
}

// The status of the validation.
type ProviderSetupValidationStatus string

// A request to access something made by an end user in Common Fate.
type Request struct {
	AccessRuleId      string `json:"accessRuleId"`
	AccessRuleVersion string `json:"accessRuleVersion"`

	// Describes whether a request has been approved automatically or from a review
	ApprovalMethod *ApprovalMethod `json:"approvalMethod,omitempty"`

	// A temporary assignment of a user to a principal.
	Grant       *Grant    `json:"grant,omitempty"`
	ID          string    `json:"id"`
	Reason      *string   `json:"reason,omitempty"`
	RequestedAt time.Time `json:"requestedAt"`
	Requestor   string    `json:"requestor"`

	// The status of an Access Request.
	Status    RequestStatus `json:"status"`
	Timing    RequestTiming `json:"timing"`
	UpdatedAt time.Time     `json:"updatedAt"`
}

// Access Rule contains information for an end user to make a request for access.
type RequestAccessRule struct {
	CanRequest  bool   `json:"canRequest"`
	Description string `json:"description"`
	ID          string `json:"id"`
	IsCurrent   bool   `json:"isCurrent"`
	Name        string `json:"name"`

	// A detailed target for an access rule request
	Target RequestAccessRuleTarget `json:"target"`

	// Time configuration for an Access Rule.
	TimeConstraints TimeConstraints `json:"timeConstraints"`

	// A unique version identifier for the Access Rule. Updating a rule creates a new version.
	// When a rule is updated, it's ID remains consistent.
	Version string `json:"version"`
}

// A detailed target for an access rule request
type RequestAccessRuleTarget struct {
	Arguments RequestAccessRuleTarget_Arguments `json:"arguments"`

	// Provider
	Provider Provider `json:"provider"`
}

// RequestAccessRuleTarget_Arguments defines model for RequestAccessRuleTarget.Arguments.
type RequestAccessRuleTarget_Arguments struct {
	AdditionalProperties map[string]RequestArgument `json:"-"`
}

// RequestArgument defines model for RequestArgument.
type RequestArgument struct {
	Description *string                     `json:"description,omitempty"`
	FormElement *RequestArgumentFormElement `json:"formElement,omitempty"`
	Options     []WithOption                `json:"options"`

	// This will be true if a selection is require when creating a request
	RequiresSelection bool   `json:"requiresSelection"`
	Title             string `json:"title"`
}

// RequestArgumentFormElement defines model for RequestArgument.FormElement.
type RequestArgumentFormElement string

// A request to access something made by an end user in Common Fate.
type RequestDetail struct {
	// Access Rule contains information for an end user to make a request for access.
	AccessRule AccessRule `json:"accessRule"`

	// Describes whether a request has been approved automatically or from a review
	ApprovalMethod *ApprovalMethod         `json:"approvalMethod,omitempty"`
	Arguments      RequestDetail_Arguments `json:"arguments"`

	// true if the requesting user is a reviewer of this request.
	CanReview bool `json:"canReview"`

	// A temporary assignment of a user to a principal.
	Grant       *Grant    `json:"grant,omitempty"`
	ID          string    `json:"id"`
	Reason      *string   `json:"reason,omitempty"`
	RequestedAt time.Time `json:"requestedAt"`
	Requestor   string    `json:"requestor"`

	// The status of an Access Request.
	Status    RequestStatus `json:"status"`
	Timing    RequestTiming `json:"timing"`
	UpdatedAt time.Time     `json:"updatedAt"`
}

// RequestDetail_Arguments defines model for RequestDetail.Arguments.
type RequestDetail_Arguments struct {
	AdditionalProperties map[string]With `json:"-"`
}

// RequestEvent defines model for RequestEvent.
type RequestEvent struct {
	Actor     *string   `json:"actor,omitempty"`
	CreatedAt time.Time `json:"createdAt"`

	// The current state of the grant.
	FromGrantStatus *RequestEventFromGrantStatus `json:"fromGrantStatus,omitempty"`

	// The status of an Access Request.
	FromStatus         *RequestStatus `json:"fromStatus,omitempty"`
	FromTiming         *RequestTiming `json:"fromTiming,omitempty"`
	GrantCreated       *bool          `json:"grantCreated,omitempty"`
	GrantFailureReason *string        `json:"grantFailureReason,omitempty"`
	Id                 string         `json:"id"`

	// An event which was recorded relating to the grant.
	RecordedEvent  *map[string]string `json:"recordedEvent,omitempty"`
	RequestCreated *bool              `json:"requestCreated,omitempty"`
	RequestId      string             `json:"requestId"`

	// The current state of the grant.
	ToGrantStatus *RequestEventToGrantStatus `json:"toGrantStatus,omitempty"`

	// The status of an Access Request.
	ToStatus *RequestStatus `json:"toStatus,omitempty"`
	ToTiming *RequestTiming `json:"toTiming,omitempty"`
}

// The current state of the grant.
type RequestEventFromGrantStatus string

// The current state of the grant.
type RequestEventToGrantStatus string

// The status of an Access Request.
type RequestStatus string

// RequestTiming defines model for RequestTiming.
type RequestTiming struct {
	DurationSeconds int `json:"durationSeconds"`

	// iso8601 timestamp in UTC timezone
	StartTime *time.Time `json:"startTime,omitempty"`
}

// A decision made on an Access Request.
type ReviewDecision string

// Time configuration for an Access Rule.
type TimeConstraints struct {
	// The maximum duration in seconds the access is allowed for.
	MaxDurationSeconds int `json:"maxDurationSeconds"`
}

// User defines model for User.
type User struct {
	Email     string    `json:"email"`
	FirstName string    `json:"firstName"`
	Groups    []string  `json:"groups"`
	Id        string    `json:"id"`
	LastName  string    `json:"lastName"`
	Picture   string    `json:"picture"`
	Status    IdpStatus `json:"status"`
	UpdatedAt time.Time `json:"updatedAt"`
}

// With defines model for With.
type With struct {
	FieldDescription  *string `json:"fieldDescription,omitempty"`
	Label             string  `json:"label"`
	OptionDescription *string `json:"optionDescription,omitempty"`
	Title             string  `json:"title"`
	Value             string  `json:"value"`
}

// WithOption defines model for WithOption.
type WithOption struct {
	Description *string `json:"description,omitempty"`
	Label       string  `json:"label"`
	Valid       bool    `json:"valid"`
	Value       string  `json:"value"`
}

// AccessTokenResponse defines model for AccessTokenResponse.
type AccessTokenResponse struct {
	HasToken bool    `json:"hasToken"`
	Token    *string `json:"token,omitempty"`
}

// AuthUserResponse defines model for AuthUserResponse.
type AuthUserResponse struct {
	// Whether the user is an administrator of Common Fate.
	IsAdmin bool `json:"isAdmin"`
	User    User `json:"user"`
}

// CompleteProviderSetupResponse defines model for CompleteProviderSetupResponse.
type CompleteProviderSetupResponse struct {
	// Whether a manual update is required to the Common Fate deployment configuration (`deployment.yml`) to activate the provider.
	DeploymentConfigUpdateRequired bool `json:"deploymentConfigUpdateRequired"`
}

// DeploymentVersionResponse defines model for DeploymentVersionResponse.
type DeploymentVersionResponse struct {
	// The deployment version. Will be a semver, such as "v0.9.0" for official releases, or "dev+GIT_HASH" for pre-release builds.
	Version string `json:"version"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error string `json:"error"`
}

// IdentityConfigurationResponse defines model for IdentityConfigurationResponse.
type IdentityConfigurationResponse struct {
	AdministratorGroupId string `json:"administratorGroupId"`
	IdentityProvider     string `json:"identityProvider"`
}

// ListAccessRuleApproversResponse defines model for ListAccessRuleApproversResponse.
type ListAccessRuleApproversResponse struct {
	Next  *string  `json:"next"`
	Users []string `json:"users"`
}

// ListAccessRulesDetailResponse defines model for ListAccessRulesDetailResponse.
type ListAccessRulesDetailResponse struct {
	AccessRules []AccessRuleDetail `json:"accessRules"`
	Next        *string            `json:"next"`
}

// ListAccessRulesResponse defines model for ListAccessRulesResponse.
type ListAccessRulesResponse struct {
	AccessRules []AccessRule `json:"accessRules"`
	Next        *string      `json:"next"`
}

// ListFavoritesResponse defines model for ListFavoritesResponse.
type ListFavoritesResponse struct {
	Favorites []Favorite `json:"favorites"`
	Next      *string    `json:"next"`
}

// ListGroupsResponse defines model for ListGroupsResponse.
type ListGroupsResponse struct {
	Groups []Group `json:"groups"`
	Next   *string `json:"next"`
}

// ListProviderSetupsResponse defines model for ListProviderSetupsResponse.
type ListProviderSetupsResponse struct {
	ProviderSetups []ProviderSetup `json:"providerSetups"`
}

// ListProviderSetupsV2Response defines model for ListProviderSetupsV2Response.
type ListProviderSetupsV2Response struct {
	ProviderSetups []ProviderSetupV2 `json:"providerSetups"`
}

// ListRequestEventsResponse defines model for ListRequestEventsResponse.
type ListRequestEventsResponse struct {
	Events []RequestEvent `json:"events"`
	Next   *string        `json:"next"`
}

// ListRequestsResponse defines model for ListRequestsResponse.
type ListRequestsResponse struct {
	Next     *string   `json:"next"`
	Requests []Request `json:"requests"`
}

// ListUserResponse defines model for ListUserResponse.
type ListUserResponse struct {
	Next  *string `json:"next"`
	Users []User  `json:"users"`
}

// A provider in the process of being set up through the guided setup workflow in Common Fate. These providers are **not** yet active.
type ProviderSetupResponse = ProviderSetup

// A provider in the process of being set up through the guided setup workflow in Common Fate. These providers are **not** yet active.
type ProviderSetupV2Response = ProviderSetupV2

// ReviewResponse defines model for ReviewResponse.
type ReviewResponse struct {
	// A request to access something made by an end user in Common Fate.
	Request *Request `json:"request,omitempty"`
}

// CreateAccessRuleRequest defines model for CreateAccessRuleRequest.
type CreateAccessRuleRequest struct {
	// Approver config for access rules
	Approval    ApproverConfig `json:"approval"`
	Description string         `json:"description"`

	// The group IDs that the access rule applies to.
	Groups []string `json:"groups"`
	Name   string   `json:"name"`

	// a request body for creating a Access Rule Target
	Target CreateAccessRuleTarget `json:"target"`

	// Time configuration for an Access Rule.
	TimeConstraints TimeConstraints `json:"timeConstraints"`
}

// CreateFavoriteRequest defines model for CreateFavoriteRequest.
type CreateFavoriteRequest struct {
	AccessRuleId string                       `json:"accessRuleId"`
	Name         string                       `json:"name"`
	Reason       *string                      `json:"reason,omitempty"`
	Timing       RequestTiming                `json:"timing"`
	With         *CreateRequestWithSubRequest `json:"with,omitempty"`
}

// CreateGroupRequest defines model for CreateGroupRequest.
type CreateGroupRequest struct {
	Description *string  `json:"description,omitempty"`
	Members     []string `json:"members"`
	Name        string   `json:"name"`
}

// CreateProviderSetupRequest defines model for CreateProviderSetupRequest.
type CreateProviderSetupRequest struct {
	// The type of the provider to set up.
	ProviderType string `json:"providerType"`
}

// CreateRequestRequest defines model for CreateRequestRequest.
type CreateRequestRequest struct {
	AccessRuleId string                       `json:"accessRuleId"`
	Reason       *string                      `json:"reason,omitempty"`
	Timing       RequestTiming                `json:"timing"`
	With         *CreateRequestWithSubRequest `json:"with,omitempty"`
}

// CreateUserRequest defines model for CreateUserRequest.
type CreateUserRequest struct {
	Email     openapi_types.Email `json:"email"`
	FirstName string              `json:"firstName"`
	IsAdmin   bool                `json:"isAdmin"`
	LastName  string              `json:"lastName"`
}

// ProviderSetupStepCompleteRequest defines model for ProviderSetupStepCompleteRequest.
type ProviderSetupStepCompleteRequest struct {
	// Whether the step is complete or not.
	Complete bool `json:"complete"`

	// The config values entered by the user which correspond to the setup step.
	ConfigValues map[string]string `json:"configValues"`
}

// ReviewRequest defines model for ReviewRequest.
type ReviewRequest struct {
	Comment *string `json:"comment,omitempty"`

	// A decision made on an Access Request.
	Decision       ReviewDecision `json:"decision"`
	OverrideTiming *RequestTiming `json:"overrideTiming,omitempty"`
}

// AdminCreateProvidersetupv2JSONRequestBody defines body for AdminCreateProvidersetupv2 for application/json ContentType.
type AdminCreateProvidersetupv2JSONRequestBody CreateProviderSetupRequest

// Getter for additional properties for AccessRuleTargetDetail_With. Returns the specified
// element and whether it was found
func (a AccessRuleTargetDetail_With) Get(fieldName string) (value AccessRuleTargetDetailArguments, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AccessRuleTargetDetail_With
func (a *AccessRuleTargetDetail_With) Set(fieldName string, value AccessRuleTargetDetailArguments) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]AccessRuleTargetDetailArguments)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AccessRuleTargetDetail_With to handle AdditionalProperties
func (a *AccessRuleTargetDetail_With) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]AccessRuleTargetDetailArguments)
		for fieldName, fieldBuf := range object {
			var fieldVal AccessRuleTargetDetailArguments
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AccessRuleTargetDetail_With to handle AdditionalProperties
func (a AccessRuleTargetDetail_With) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for AccessRuleTargetDetailArguments_Groupings. Returns the specified
// element and whether it was found
func (a AccessRuleTargetDetailArguments_Groupings) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for AccessRuleTargetDetailArguments_Groupings
func (a *AccessRuleTargetDetailArguments_Groupings) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for AccessRuleTargetDetailArguments_Groupings to handle AdditionalProperties
func (a *AccessRuleTargetDetailArguments_Groupings) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for AccessRuleTargetDetailArguments_Groupings to handle AdditionalProperties
func (a AccessRuleTargetDetailArguments_Groupings) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for CreateAccessRuleTarget_With. Returns the specified
// element and whether it was found
func (a CreateAccessRuleTarget_With) Get(fieldName string) (value CreateAccessRuleTargetDetailArguments, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CreateAccessRuleTarget_With
func (a *CreateAccessRuleTarget_With) Set(fieldName string, value CreateAccessRuleTargetDetailArguments) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]CreateAccessRuleTargetDetailArguments)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CreateAccessRuleTarget_With to handle AdditionalProperties
func (a *CreateAccessRuleTarget_With) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]CreateAccessRuleTargetDetailArguments)
		for fieldName, fieldBuf := range object {
			var fieldVal CreateAccessRuleTargetDetailArguments
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CreateAccessRuleTarget_With to handle AdditionalProperties
func (a CreateAccessRuleTarget_With) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for CreateAccessRuleTargetDetailArguments_Groupings. Returns the specified
// element and whether it was found
func (a CreateAccessRuleTargetDetailArguments_Groupings) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CreateAccessRuleTargetDetailArguments_Groupings
func (a *CreateAccessRuleTargetDetailArguments_Groupings) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CreateAccessRuleTargetDetailArguments_Groupings to handle AdditionalProperties
func (a *CreateAccessRuleTargetDetailArguments_Groupings) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CreateAccessRuleTargetDetailArguments_Groupings to handle AdditionalProperties
func (a CreateAccessRuleTargetDetailArguments_Groupings) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for CreateRequestWith. Returns the specified
// element and whether it was found
func (a CreateRequestWith) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CreateRequestWith
func (a *CreateRequestWith) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CreateRequestWith to handle AdditionalProperties
func (a *CreateRequestWith) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CreateRequestWith to handle AdditionalProperties
func (a CreateRequestWith) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for RequestAccessRuleTarget_Arguments. Returns the specified
// element and whether it was found
func (a RequestAccessRuleTarget_Arguments) Get(fieldName string) (value RequestArgument, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for RequestAccessRuleTarget_Arguments
func (a *RequestAccessRuleTarget_Arguments) Set(fieldName string, value RequestArgument) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]RequestArgument)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for RequestAccessRuleTarget_Arguments to handle AdditionalProperties
func (a *RequestAccessRuleTarget_Arguments) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]RequestArgument)
		for fieldName, fieldBuf := range object {
			var fieldVal RequestArgument
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for RequestAccessRuleTarget_Arguments to handle AdditionalProperties
func (a RequestAccessRuleTarget_Arguments) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for RequestDetail_Arguments. Returns the specified
// element and whether it was found
func (a RequestDetail_Arguments) Get(fieldName string) (value With, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for RequestDetail_Arguments
func (a *RequestDetail_Arguments) Set(fieldName string, value With) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]With)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for RequestDetail_Arguments to handle AdditionalProperties
func (a *RequestDetail_Arguments) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]With)
		for fieldName, fieldBuf := range object {
			var fieldVal With
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for RequestDetail_Arguments to handle AdditionalProperties
func (a RequestDetail_Arguments) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// AdminListProvidersetupsv2 request
	AdminListProvidersetupsv2(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminCreateProvidersetupv2 request with any body
	AdminCreateProvidersetupv2WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AdminCreateProvidersetupv2(ctx context.Context, body AdminCreateProvidersetupv2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminDeleteProvidersetup request
	AdminDeleteProvidersetup(ctx context.Context, providersetupId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AdminGetProvidersetup request
	AdminGetProvidersetup(ctx context.Context, providersetupId string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) AdminListProvidersetupsv2(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminListProvidersetupsv2Request(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminCreateProvidersetupv2WithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminCreateProvidersetupv2RequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminCreateProvidersetupv2(ctx context.Context, body AdminCreateProvidersetupv2JSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminCreateProvidersetupv2Request(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminDeleteProvidersetup(ctx context.Context, providersetupId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminDeleteProvidersetupRequest(c.Server, providersetupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AdminGetProvidersetup(ctx context.Context, providersetupId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAdminGetProvidersetupRequest(c.Server, providersetupId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewAdminListProvidersetupsv2Request generates requests for AdminListProvidersetupsv2
func NewAdminListProvidersetupsv2Request(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/providersetupsv2")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAdminCreateProvidersetupv2Request calls the generic AdminCreateProvidersetupv2 builder with application/json body
func NewAdminCreateProvidersetupv2Request(server string, body AdminCreateProvidersetupv2JSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAdminCreateProvidersetupv2RequestWithBody(server, "application/json", bodyReader)
}

// NewAdminCreateProvidersetupv2RequestWithBody generates requests for AdminCreateProvidersetupv2 with any type of body
func NewAdminCreateProvidersetupv2RequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/providersetupsv2")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAdminDeleteProvidersetupRequest generates requests for AdminDeleteProvidersetup
func NewAdminDeleteProvidersetupRequest(server string, providersetupId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "providersetupId", runtime.ParamLocationPath, providersetupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/providersetupsv2/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAdminGetProvidersetupRequest generates requests for AdminGetProvidersetup
func NewAdminGetProvidersetupRequest(server string, providersetupId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "providersetupId", runtime.ParamLocationPath, providersetupId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/admin/providersetupsv2/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// AdminListProvidersetupsv2 request
	AdminListProvidersetupsv2WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AdminListProvidersetupsv2Response, error)

	// AdminCreateProvidersetupv2 request with any body
	AdminCreateProvidersetupv2WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminCreateProvidersetupv2Response, error)

	AdminCreateProvidersetupv2WithResponse(ctx context.Context, body AdminCreateProvidersetupv2JSONRequestBody, reqEditors ...RequestEditorFn) (*AdminCreateProvidersetupv2Response, error)

	// AdminDeleteProvidersetup request
	AdminDeleteProvidersetupWithResponse(ctx context.Context, providersetupId string, reqEditors ...RequestEditorFn) (*AdminDeleteProvidersetupResponse, error)

	// AdminGetProvidersetup request
	AdminGetProvidersetupWithResponse(ctx context.Context, providersetupId string, reqEditors ...RequestEditorFn) (*AdminGetProvidersetupResponse, error)
}

type AdminListProvidersetupsv2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		ProviderSetups []ProviderSetupV2 `json:"providerSetups"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminListProvidersetupsv2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminListProvidersetupsv2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminCreateProvidersetupv2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ProviderSetup
	JSON400      *struct {
		Error string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r AdminCreateProvidersetupv2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminCreateProvidersetupv2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminDeleteProvidersetupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProviderSetupV2
}

// Status returns HTTPResponse.Status
func (r AdminDeleteProvidersetupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminDeleteProvidersetupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AdminGetProvidersetupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProviderSetupV2
}

// Status returns HTTPResponse.Status
func (r AdminGetProvidersetupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AdminGetProvidersetupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// AdminListProvidersetupsv2WithResponse request returning *AdminListProvidersetupsv2Response
func (c *ClientWithResponses) AdminListProvidersetupsv2WithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AdminListProvidersetupsv2Response, error) {
	rsp, err := c.AdminListProvidersetupsv2(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminListProvidersetupsv2Response(rsp)
}

// AdminCreateProvidersetupv2WithBodyWithResponse request with arbitrary body returning *AdminCreateProvidersetupv2Response
func (c *ClientWithResponses) AdminCreateProvidersetupv2WithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AdminCreateProvidersetupv2Response, error) {
	rsp, err := c.AdminCreateProvidersetupv2WithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminCreateProvidersetupv2Response(rsp)
}

func (c *ClientWithResponses) AdminCreateProvidersetupv2WithResponse(ctx context.Context, body AdminCreateProvidersetupv2JSONRequestBody, reqEditors ...RequestEditorFn) (*AdminCreateProvidersetupv2Response, error) {
	rsp, err := c.AdminCreateProvidersetupv2(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminCreateProvidersetupv2Response(rsp)
}

// AdminDeleteProvidersetupWithResponse request returning *AdminDeleteProvidersetupResponse
func (c *ClientWithResponses) AdminDeleteProvidersetupWithResponse(ctx context.Context, providersetupId string, reqEditors ...RequestEditorFn) (*AdminDeleteProvidersetupResponse, error) {
	rsp, err := c.AdminDeleteProvidersetup(ctx, providersetupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminDeleteProvidersetupResponse(rsp)
}

// AdminGetProvidersetupWithResponse request returning *AdminGetProvidersetupResponse
func (c *ClientWithResponses) AdminGetProvidersetupWithResponse(ctx context.Context, providersetupId string, reqEditors ...RequestEditorFn) (*AdminGetProvidersetupResponse, error) {
	rsp, err := c.AdminGetProvidersetup(ctx, providersetupId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAdminGetProvidersetupResponse(rsp)
}

// ParseAdminListProvidersetupsv2Response parses an HTTP response from a AdminListProvidersetupsv2WithResponse call
func ParseAdminListProvidersetupsv2Response(rsp *http.Response) (*AdminListProvidersetupsv2Response, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminListProvidersetupsv2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			ProviderSetups []ProviderSetupV2 `json:"providerSetups"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAdminCreateProvidersetupv2Response parses an HTTP response from a AdminCreateProvidersetupv2WithResponse call
func ParseAdminCreateProvidersetupv2Response(rsp *http.Response) (*AdminCreateProvidersetupv2Response, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminCreateProvidersetupv2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ProviderSetup
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseAdminDeleteProvidersetupResponse parses an HTTP response from a AdminDeleteProvidersetupWithResponse call
func ParseAdminDeleteProvidersetupResponse(rsp *http.Response) (*AdminDeleteProvidersetupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminDeleteProvidersetupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProviderSetupV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAdminGetProvidersetupResponse parses an HTTP response from a AdminGetProvidersetupWithResponse call
func ParseAdminGetProvidersetupResponse(rsp *http.Response) (*AdminGetProvidersetupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AdminGetProvidersetupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProviderSetupV2
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/wUAAP//BqGPdRGKAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "./accesshandler/openapi.yml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
